#!/usr/bin/python -tt
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: ec2_vol
short_description: create and attach a volume, return volume id and device map
description:
    - creates an EBS volume and optionally attaches it to an instance. This module has a dependency on python-boto
version_added: "1.1"
options:
  instance:
    description:
      - instance ID if you wish to attach the volume. 
    required: false
    default: null 
    aliases: []
  volume_size:
    description:
      - size of volume (in GB) to create.
    required: true
    default: null
    aliases: []
  device_name:
    description:
      - device id to override device mapping. Assumes /dev/sdf for instance-store, /dev/sdb for EBS.
    required: false
    default: null
    aliases: []
  zone:
    description:
      - zone in which to create the volume, if unset uses the zone the instance is in (if set) 
    required: false
    default: null
    aliases: []
examples:
   - code: 'local_action: ec2_vol instance=XXXXXX volume_size=5 device_name=sdd'
     description: "Simple playbook example"
   - code: |
            - name: Launch instances
              local_action: ec2 keypair=$keypair image=$image wait=true count=3
              register: ec2
            - name: Create volumes and attach
              local_action: ec2_vol instance=${item.id} volume_size=5
              with_items: ${ec2.instances}
              register: ec2_vol
     description: "Advanced - attaching multiple volumes to multiple instances"
requirements: [ "boto" ]
author: Lester Wade
'''

import sys
import time
import os

try:
    import boto 
except ImportError:
    print "failed=True msg='boto required for this module'"
    sys.exit(1)

def main():
    module = AnsibleModule(
        argument_spec = dict(
            bucket = dict(),
            key = dict(),
            action = dict(choices=['put', 'get']),
            filename = dict(required=True),
            state  = dict(required=True, choices=['present', 'absent']),
            s3_url = dict(aliases=['S3_URL']),
            ec2_secret_key = dict(aliases=['EC2_SECRET_KEY']),
            ec2_access_key = dict(aliases=['EC2_ACCESS_KEY']),
        )
    )

    bucket_name = module.params.get('bucket')
    key_name = module.params.get('key')
    action = module.params.get('action')
    filename = module.params.get('filename')
    state = module.params('state')
    s3_url = module.params.get('s3_url')
    ec2_secret_key = module.params.get('ec2_secret_key')
    ec2_access_key = module.params.get('ec2_access_key')

    # allow eucarc environment variables to be used if ansible vars aren't set
    if not s3_url and 'S3_URL' in os.environ:
        s3_url = os.environ['S3_URL']
    if not ec2_secret_key and 'EC2_SECRET_KEY' in os.environ:
        ec2_secret_key = os.environ['EC2_SECRET_KEY']
    if not ec2_access_key and 'EC2_ACCESS_KEY' in os.environ:
        ec2_access_key = os.environ['EC2_ACCESS_KEY']

    try:
        if s3_url: # if we have an URL set, connect to the specified endpoint 
            s3 = boto.connect_s3(s3_url, ec2_access_key, ec2_secret_key)
        else: # otherwise it's Amazon.
            s3 = boto.connect_s3(ec2_access_key, ec2_secret_key)
    except boto.exception.NoAuthHandlerFound, e:
        module.fail_json(msg = str(e))

    # Lets get some information from the s3 connection, including bucket check ...
    bucket = s3.lookup(bucket_name)
    if bucket:
        exists = True
    else
        exists = False 
    
    # Lets list the contents
    bucket_contents = bucket.list()

    # If state is present but the bucket doesn't exist, create it ...
    if state == 'present' and exists == False
        try:
            bucket = s3.create_bucket(bucket_name)
            exists = True
        except s3.provider.storage_create_error, e:
            module.fail_json(msg = str(e))

    # If state is absent and the bucket exists already, delete it (recursively) ...
    if state == 'absent' and exists = True
        try:
            for contents in bucket.list():
                bucket.delete_key(contents.key)
                s3.delete_bucket(bucket_name)

    # If the bucket exists and we have an action specified with object, do stuff ...
    if exists == True
       if action in ['put','get'] and obj: 
           if action == 'put':
                try:
                    from boto.s3.key import Key
                    key = bucket.new_key(key_name)  
                    key.set_contents_from_filename(filename)
           if action == 'get':
                try:
                    key.get_contents_to_filename(filename))

#    # If the bucket exists and we are fetching but with no object, get all contents
#    if exists == True
#        if not obj:
#            if action in ['get']:
#                    for item in bucket_list:
#                        try:
#                            download = key.get_contents_to_filename(item.name)
                   
    if exists = True and state == 'present' and action == 'put'
        try:
            

    if state == 'absent' 





    # Here we need to get the zone info for the instance. This covers situation where 
    # instance is specified but zone isn't.
    # Useful for playbooks chaining instance launch with volume create + attach and where the
    # zone doesn't matter to the user.

    if instance:
        reservation = ec2.get_all_instances(instance_ids=instance)
        inst = reservation[0].instances[0]
        zone = inst.placement

    # If no instance supplied, try volume creation based on module parameters.

    try:
        volume = ec2.create_volume(volume_size, zone)
        while volume.status != 'available':
            time.sleep(3)
            volume.update()
    except boto.exception.BotoServerError, e:
        module.fail_json(msg = "%s: %s" % (e.error_code, e.error_message))

    # Attach the created volume.

    if device_name and instance:
        try:
            attach = volume.attach(inst.id, device_name)
            while volume.attachment_state() != 'attached':
                time.sleep(3)
                volume.update()
        except boto.exception.BotoServerError, e:
            module.fail_json(msg = "%s: %s" % (e.error_code, e.error_message))           
   
    # If device_name isn't set, make a choice based on best practices here:
    # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html
    
    # In future this needs to be more dynamic but combining block device mapping best practices
    # (bounds for devices, as above) with instance.block_device_mapping data would be tricky. For me ;)
       
    if device_name is None and instance:
        try:
            if inst.root_device_type != 'ebs':
                device_name = '/dev/sdf'
                attach = volume.attach(inst.id, device_name)
            else:
                device_name = '/dev/sdb'
                attach = volume.attach(inst.id, device_name)
                while volume.attachment_state() != 'attached':
                    time.sleep(3)
                    volume.update()
        except boto.exception.BotoServerError, e:
            module.fail_json(msg = "%s: %s" % (e.error_code, e.error_message))           

    print json.dumps({
        "volume_id": volume.id,
        "device": device_name
    })
    sys.exit(0)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
