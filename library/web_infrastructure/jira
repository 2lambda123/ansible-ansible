#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2014, Steve Smith <ssmith@atlassian.com>
# Atlassian open-source approval reference OSR-76.
#
# This file is part of Ansible.
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = """
module: jira
version_added: "1.6"
short_description: create and modify issues in a JIRA instance
description:
  - Create and modify issues in a JIRA instance.

options:
  uri:
    required: true
    description:
      - Base URI for the JIRA instance

  operation:
    required: true
    aliases: [ command ]
    choices: [ create, comment, edit ]
    description:
      - The operation to perform.

  username:
    required: true
    description:
      - The username to log-in with.

  password:
    required: true
    description:
      - The password to log-in with.

  project:
    aliases: [ prj ]
    required: false
    description:
      - The project for this operation. Required for issue creation.

  summary:
    required: false
    description:
     - The issue summary, where appropriate.

  description:
    required: false
    description:
     - The issue description, where appropriate.

  issuetype:
    required: false
    description:
     - The issue type, for issue creation.

  issue:
    required: false
    description:
     - An existing issue key to operate on.

  comment:
    required: false
    description:
     - The comment text to add.

  fields:
    required: false
    description:
     - This is a free-form data structure that can contain arbitrary data. This is passed directly to the JIRA REST API (possibly after merging with other required data, as when passed to create). See examples for more information, and the JIRA REST API for the structure required for various fields.

notes:
  - "Currently this only works with basic-auth."

author: Steve Smith
"""

EXAMPLES = """
# Create a new issue and add a comment to it:
- name: Create an issue
  jira: uri={{server}} username={{user}} password={{pass}}
        project=ANS operation=create
        summary="Example Issue" description="Created using Ansible" issuetype=Task
  register: issue

- name: Comment on issue
  jira: uri={{server}} username={{user}} password={{pass}}
        issue={{issue.meta.key}} operation=comment 
        comment="A comment added by Ansible"

# Assign an existing issue using the edit
- name: Assign an issue using free-form fields
  jira: uri={{server}} username={{user}} password={{pass}}
        issue={{issue.meta.key}} operation=edit 
  args: { fields: {assignee: {name: "ssmith"}}}

# Create an issue with an existing assignee
- name: Create an assigned issue
  jira: uri={{server}} username={{user}} password={{pass}}
        project=ANS operation=create
        summary="Assigned issue" description="Created and assigned using Ansible" issuetype=Task
  args: { fields: {assignee: {name: "ssmith"}}}

# Set the labels on an issue
- name: Set the labels on an issue
  jira: uri={{server}} username={{user}} password={{pass}}
        issue={{issue.meta.key}} operation=edit 
  args: { fields: {labels: ["autocreated", "ansible"]}}

"""

import urllib2
import json
import base64

def request(url, user, passwd, data=None, method=None):
    if data:
        req = urllib2.Request(url, json.dumps(data))
    else:
        req = urllib2.Request(url)

    if method:
        req.get_method = lambda: method

    auth = base64.encodestring('%s:%s' % (user, passwd)).replace('\n', '')
    req.add_header("Authorization", "Basic %s" % auth)
    req.add_header('Content-Type', 'application/json')

    res = urllib2.urlopen(req)
    body = res.read()
    if body:
        return json.loads(body)
    else:
        return {}


def post(url, user, passwd, data):
    return request(url, user, passwd, data=data)

def put(url, user, passwd, data):
    return request(url, user, passwd, data=data, method='PUT')

def get(url, user, passwd):
    return request(url, user, passwd)


def create(restbase, user, passwd, params):
    createfields = {
        'project': { 'key': params['project'] },
        'summary': params['summary'],
        'description': params['description'],
        'issuetype': { 'name': params['issuetype'] }}

    # Merge in any additional or overridden fields
    if params['fields']:
        createfields.update(params['fields'])

    data = {'fields': createfields}

    url = restbase + '/issue/'

    ret = post(url, user, passwd, data) 

    return ret


def comment(restbase, user, passwd, params):
    data = {
        'body': params['comment']
        }

    url = restbase + '/issue/' + params['issue'] + '/comment'

    ret = post(url, user, passwd, data)

    return ret


def edit(restbase, user, passwd, params):
    data = {
        'fields': params['fields']
        }

    url = restbase + '/issue/' + params['issue']    

    ret = put(url, user, passwd, data) 

    return ret


def getissue(restbase, user, passwd, params):
    url = restbase + '/issue/' + params['issue']
    ret = get(url, user, passwd) 
    return ret


# Some parameters are required depending on the operation:
OP_REQUIRED = dict(create=['project', 'issuetype', 'summary', 'description'],
                   comment=['issue', 'comment'],
                   edit=['fields'],
                   getissue=['issue'])

def main():

    module = AnsibleModule(
        argument_spec=dict(
            uri=dict(required=True),
            operation=dict(choices=['create', 'comment', 'edit', 'getissue'],
                           aliases=['command'], required=True),
            username=dict(required=True),
            password=dict(required=True),
            project=dict(),
            summary=dict(),
            description=dict(),
            issuetype=dict(),
            issue=dict(aliases=['ticket']),
            comment=dict(),
            fields=dict()
        ),
        supports_check_mode=False
    )

    op = module.params['operation']
    uri = module.params['uri']
    user = module.params['username']
    passwd = module.params['password']

    if not uri.endswith('/'):
        uri = uri+'/'
    restbase = uri + 'rest/api/2'


    # Check we have the necessary per-operation parameters
    missing = []
    for parm in OP_REQUIRED[op]:
        if not module.params[parm]:
            missing.append(parm)
    if missing:
        module.fail_json(msg="Operation %s require the following missing parameters: %s" % (op, ",".join(missing)))


    # Dispatch
    try:
        
        # Lookup the corresponding operation for this operation. This
        # is safe as we check valid operations above.
        thismod = sys.modules[__name__]
        method = getattr(thismod, op)

        ret = method(restbase, user, passwd, module.params)

    except urllib2.HTTPError as e:
        return module.fail_json(msg=e.msg)
    except Exception as e:
        return module.fail_json(msg=e.message)

    module.exit_json(changed=True, meta=ret)


from ansible.module_utils.basic import *
main()
