#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

# Written by Steve Loveless <steve.loveless@gmail.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.
#
# rvm
#		state= installed|absent (default: installed)
#		install_type= single|multi (default: single)

import traceback
import os
import sys

def run_command(cmd):
	p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	(out, err) = p.communicate()
	rc = p.returncode
	return (rc, out, err)

def get_rvm_path():
	if os.environ.has_key('rvm_path'):
		return os.environ["rvm_path"]

	rvm = "~/.rvm"

	if os.path.exists(rvm):
		return os.path.abspath(rvm)

	rvm = "/usr/local/rvm"

	if os.path.exists(rvm):
		return rvm

def get_rvm_bin(rvm_path):
	return rvm_path + "/bin/rvm"

def install_multi():
	cmd = ['curl', '-L', 'https://get.rvm.io', '|', '/usr/bin/sudo', 'bash', '-s', 'stable']
	(rc, out, err) = run_command(cmd)
	return (rc, out, err)

def remove():
	cmd = ['/usr/bin/sudo', 'rm', '-rf', '$HOME/.rvm $HOME/.rvmrc', '/etc/rvmrc', '/etc/profile.d/rvm.sh', '/usr/local/rvm', '/usr/local/bin/rvm']
	(rc, out, err) = run_command(cmd)
	if rc != 0:
		return (rc, out, err)

	remove_rvm_group()

	return (rc, out, err)

def remove_rvm_group():
	cmd = ['/usr/bin/id', 'rvm']
	(rc, out, err) = run_command(cmd)

	if rc == 0:
		cmd = ['/usr/bin/sudo', '/usr/sbin/groupdel', 'rvm']
		(rc, out, err) = run_command(cmd)


def main():
	module = AnsibleModule(
		argument_spec = dict(
			state = dict(choices=['installed', 'absent']),
			install_type= dict(choices=['single', 'multi'])
		)
    )

	state = module.params['state']
	install_type = module.params['install_type']
	
	result = {}
	result['state'] = state
	result['install_type'] = install_type

	rc = None
	out = ''
	err = ''

	rvm_path = get_rvm_path()

	if rvm_path:
		result['changed'] = False

	#rvm_bin = get_rvm_bin(rvm_path)

	if state == 'absent':
		(rc, out, err) = remove()
		if rc != 0:
			module.fail_json(msg=err)
	elif state == 'installed':
		if install_type == 'multi':
			(rc, out, err) = install_multi()
			
		if rc != 0:
			module.fail_json(msg=err)

	if rc is None:
		result['changed'] = False
	else:
		result['changed'] = True

	if out:
		result['stdout'] = out

	if err:
		result['stderr'] = err

	module.exit_json(**result)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
