#!/usr/bin/python
from azure.servicemanagement import *
from ansible.module_utils.azure import *
from azure import WindowsAzureMissingResourceError
from azure import WindowsAzureError

import json

def get_cloud_service_facts(sms, name):
    service = None
    try:
        service = sms.get_hosted_service_properties(name, True)
    except WindowsAzureMissingResourceError:
        return None

    service_facts = dict(cloud_service_name=service.service_name,
                         cloud_service_url=service.url,
                         cloud_service_props=service.hosted_service_properties,
                         cloud_service_deployments=dict()
    )
    for deployment in service.deployments:
        service_facts['cloud_service_deployments'][deployment.name]=deployment
    return service_facts

def create_cloud_service(module):
    name = module.params.get('name')
    label = module.params.get('label')
    desc = module.params.get('desc')
    location = module.params.get('location')
    affinity_group = module.params.get('affinity_group')
    props = module.params.get('props')

    sms = Azure.get_sms(module)

    service_facts = get_cloud_service_facts(sms, name)
    if service_facts is None:
        sms.create_hosted_service(name, label, desc, location, affinity_group, props)
        service_facts = get_cloud_service_facts(sms, name)
        cloud_service=azure_props_to_dict(service_facts)
        module.exit_json(msg="Create cloud service complete", cloud_service=cloud_service)
    else:
        cloud_service=azure_props_to_dict(service_facts)
        module.fail_json(msg="Cloud service " + name + " already exists.", cloud_service=cloud_service)



def main():
    argument_spec = azure_common_argument_spec()
    argument_spec.update(dict(
            name = dict(aliases=['NAME'], type='str'),
            label = dict(aliases=['LABEL'], type='str'),
            desc = dict(aliases=['DESC'], type='str', default=None),
            location = dict(aliases=['LOCATION'], type='str', default="West Europe"),
            affinity_group = dict(aliases=['AFFINITY_GROUP'], type='str', default=None),
            props = dict(aliases=['PROPS'], type='str', default=None)))

    module = AnsibleModule(argument_spec=argument_spec)
    try:
        create_cloud_service(module)
    except WindowsAzureError as e:
        module.fail_json(msg=str(e))


# import module snippets
from ansible.module_utils.basic import *

main()
