#!/usr/bin/python
# -*- coding: utf-8 -*-


DOCUMENTATION = '''
---
module: ec2_group
version_added: "1.3"
short_description: maintain an ec2 VPC security group.
description:
    - maintains ec2 security groups. This module has a dependency on python-boto >= 2.5
options:
  name:
    description:
      - Name of the security group.
    required: true
  description:
    description:
      - Description of the security group.
    required: true
  vpc_id:
    description:
      - ID of the VPC to create the group in.
    required: false
  rules:
    description:
      - List of firewall rules to enforce in this group (see example). Rules are assumed to be ingress rules unless 'type: egress' is specified.
    required: true
  region:
    description:
      - the EC2 region to use
    required: false
    default: null
    aliases: []
  ec2_url:
    description:
      - Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints)
    required: false
    default: null
    aliases: []
  ec2_secret_key:
    description:
      - EC2 secret key
    required: false
    default: null
    aliases: ['aws_secret_key']
  ec2_access_key:
    description:
      - EC2 access key
    required: false
    default: null
    aliases: ['aws_access_key']
  state:
    version_added: "1.4"
    description:
      - create or delete security group
    required: false
    default: 'present'
    aliases: []

requirements: [ "boto" ]
'''

EXAMPLES = '''
- name: example ec2 group
  local_action:
    module: ec2_group
    name: example
    description: an example EC2 group
    vpc_id: 12345
    region: eu-west-1a
    ec2_secret_key: SECRET
    ec2_access_key: ACCESS
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 10.0.0.0/8
      - proto: udp
        from_port: 10050
        to_port: 10050
        cidr_ip: 10.0.0.0/8
      - proto: udp
        from_port: 10051
        to_port: 10051
        group_id: sg-12345678
      - proto: all
        # the containing group name may be specified here
        group_name: example
      - proto: tcp
        from_port: 123
        to_port: 123
        group_name: My_Awesome_Security_Group
        type: egress
'''

try:
    import boto.ec2
except ImportError:
    print "failed=True msg='boto required for this module'"
    sys.exit(1)

def lookup_security_group(groups, name, vpc_id):
    # find the group if present
    group = None

    for curGroup in groups.values():
        if curGroup.name == name and curGroup.vpc_id == vpc_id:
            group = curGroup
            break

    return group

def remove_security_group(module, group):
    changed = False

    # Ensure requested group is absent
    if group:
        '''found a match, delete it'''
        if not module.check_mode:
            try:
                group.delete()
            except Exception, e:
                module.fail_json(msg="Unable to delete security group '%s' - %s" % (group, e))
            else:
                changed = True
    else:
        '''no match found, no changes required'''

    return changed

def add_rules_to_lookup(rules, prefix, dict):
    for rule in rules:
        for grant in rule.grants:
            dict["%s-%s-%s-%s-%s-%s" % (prefix, rule.ip_protocol, rule.from_port, rule.to_port,
                                        grant.group_id, grant.cidr_ip)] = rule

def configure_rules(module, ec2, groups, group):
    changed = False
    changes = { 'created': [], 'added' : [], 'removed' : [] }

    groupRules = {}
    add_rules_to_lookup(group.rules, 'ingress', groupRules)
    add_rules_to_lookup(group.rules_egress, 'egress', groupRules)

    # Go through all provided rules and ensure they are there.
    rules = module.params['rules']
    if rules:
        for rule in rules:
            group_id = None
            ip = None
            if len(filter(lambda x: x in ['group_id', 'group_name', 'cidr_ip'], rule)) != 1:
                module.fail_json(msg="Specify ONLY ONE of group_id, group_name, or cidr_ip")
            elif 'group_id' in rule:
                group_id = rule['group_id']
            elif 'group_name' in rule:
                group_name = rule['group_name']
                vpc_id = module.params['vpc_id']

                g = lookup_security_group(groups, group_name, vpc_id)
                if not g:
                    if not module.check_mode:
                        g = ec2.create_security_group(group_name, None, vpc_id=vpc_id)
                        groups[g.id] = g
                    changes['created'].append(group_name)

                group_id = g.id
            elif 'cidr_ip' in rule:
                ip = rule['cidr_ip']

            if rule['proto'] == 'all':
                rule['proto'] = -1
                rule['from_port'] = None
                rule['to_port'] = None

            if 'type' in rule:
                ruleType = rule['type']
                if ruleType not in ['ingress', 'egress']:
                    module.fail_json(msg="Type must be either ingress or egress. Type defaults to ingress if not specified.")
            else:
                ruleType = 'ingress'

            ruleId = "%s-%s-%s-%s-%s-%s" % (ruleType, rule['proto'], rule['from_port'], rule['to_port'], group_id, ip)
            if ruleId in groupRules:
                # If rule already exists, don't later delete it
                del groupRules[ruleId]
            else:
                # Otherwise, add new rule
                grantGroup = None
                if group_id:
                    grantGroup = groups[group_id]
                    
                if not module.check_mode:
                    if ruleType == 'egress':
                        ec2.authorize_security_group_egress(group.id, rule['proto'], rule['from_port'], rule['to_port'], group_id, ip, False)
                    else:
                        group.authorize(rule['proto'], rule['from_port'], rule['to_port'], ip, grantGroup)
                changes['added'].append(rule)
                changed = True

    # Remove anything left in the groupRules -- these will be defunct rules
    for rule in groupRules.itervalues():
        for grant in rule.grants:
            grantGroup = None
            grantGroupName = None
            if grant.group_id:
                grantGroup = groups[grant.group_id]
                grantGroupName = grantGroup.name
            if not module.check_mode:
                if rule.ip_protocol in ['tcp', 'udp', 'icmp']:
                    group.revoke(rule.ip_protocol, rule.from_port, rule.to_port, grant.cidr_ip, grantGroup)
            
            changes['removed'].append([rule.ip_protocol, rule.from_port, rule.to_port, grant.cidr_ip, grantGroupName])
            changed = True

    return changed, changes

def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            description=dict(required=True),
            vpc_id=dict(),
            rules=dict(),
            ec2_url=dict(aliases=['EC2_URL']),
            ec2_secret_key=dict(aliases=['EC2_SECRET_KEY', 'aws_secret_key'], no_log=True),
            ec2_access_key=dict(aliases=['EC2_ACCESS_KEY', 'aws_access_key']),
            region=dict(choices=AWS_REGIONS),
            state=dict(default='present', choices=['present', 'absent']),
        ),
        supports_check_mode=True,
    )

    ec2 = ec2_connect(module)

    groups = {}
    for curGroup in ec2.get_all_security_groups():
        groups[curGroup.id] = curGroup

    name = module.params['name']
    vpc_id = module.params['vpc_id']
    group = lookup_security_group(groups, name, vpc_id)

    state = module.params['state']
    if state == 'absent':
        changed = remove_security_group(module, group0)
        module.exit_json(changed=changed, group_id=None)
    elif state == 'present':
        changed = False

        if group:
            '''existing group found'''
        else:
            '''no match found, create it'''
            if not module.check_mode:
                group = ec2.create_security_group(module.params['name'], module.params['description'], vpc_id=module.params['vpc_id'])
                changed = True

        rules_changed, changes = configure_rules(module, ec2, groups, group)
        if changed:
            changes['created'].append(module.params['name'])
        changed |= rules_changed

        module.exit_json(changed=changed, changes=changes, group_id=group.id)
    else:
        module.fail_json(msg="Unsupported state requested: %s" % state)

# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
