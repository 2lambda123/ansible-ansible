#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    try:
        from neutronclient.v2_0 import client
        from neutronclient.common.exceptions import NeutronClientException as neutron_exception
    except ImportError:
        from quantumclient.v2_0 import client
        from quantumclient.common.exceptions import QuantumClientException as neutron_exception
    from keystoneclient.v2_0 import client as ksclient
    from keystoneclient.openstack.common.apiclient import exceptions as key_exception
except ImportError:
    print("failed=True msg='quantumclient (or neutronclient) and keystone client are required'")

DOCUMENTATION = '''
---
module: quantum_router
version_added: "1.2"
short_description: Create or Remove router from openstack
description:
   - Create or Delete routers from OpenStack
options:
   os_username:
     description:
        - OpenStack Auth username
     required: true
     default: None
   os_password:
     description:
        - OpenStack Auth password
     required: true
     default: None
   os_tenant_name:
     description:
        - OpenStack Auth tenant name
     required: true
     default: None
   os_auth_url:
     description:
        - OpenStack Keystone Auth URL
     required: true
     default: None
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   name:
     description:
        - Name to be give to the router
     required: true
     default: None
   tenant_name:
     description:
        - Name of the tenant for which the router has to be created.
     required: false
     default: None
   tenant_id:
     description:
        - ID of the tenant for which the router has to be created.
     required: false
     default: None
   admin_state_up:
     description:
        - desired admin state of the created router .
     required: false
     default: true
requirements: ["quantumclient", "neutronclient", "keystoneclient"]
'''

EXAMPLES = '''
# Creates a router for tenant admin
- quantum_router:
        state: present
        os_username: admin
        os_password: password
        os_tenant_name: admin
        os_auth_url: http://10.0.2.15:5000/v2.0
        name: router1
'''

def _get_keystone(module):
    try:
        kclient = ksclient.Client(username=module.params['os_username'],
                                  password=module.params['os_password'],
                                  tenant_name=module.params['os_tenant_name'],
                                  auth_url=module.params['os_auth_url'],
                                  region_name=module.params['region_name'])
    except key_exception, e:
        module.fail_json(msg="Error authenticating to the keystone: %s" % e.message)
    return kclient

def _get_neutron_client(module):
    neutron = client.Client(username=module.params['os_username'],
                            password=module.params['os_password'],
                            tenant_name=module.params['os_tenant_name'],
                            auth_url=module.params['os_auth_url'],
                            region_name=module.params['region_name'])
    return neutron

def _set_tenant_id(module, keystone):
    for ten in keystone.tenants.list():
        if module.params['tenant_name'] == ten.name:
            module.params['tenant_id'] = ten.id
            return

def _get_router_id(module, neutron):
    kwargs = {
            'name': module.params['name'],
    }
    if module.params['tenant_id']:
        kwargs['tenant_id'] = module.params['tenant_id']
    try:
        routers = neutron.list_routers(**kwargs)
    except neutron_exception, e:
        module.fail_json(msg="Error in getting the router list: %s " % e.message)
    if not routers['routers']:
        return None
    return routers['routers'][0]['id']

def _create_router(module, neutron):
    router = {
            'name': module.params['name'],
            'admin_state_up': module.params['admin_state_up'],
    }
    if module.params['tenant_id']:
        router['tenant_id'] = module.params['tenant_id']
    try:
        new_router = neutron.create_router(dict(router=router))
    except neutron_exception, e:
        module.fail_json(msg="Error in creating router: %s" % e.message)
    return new_router['router']['id']

def _delete_router(module, neutron, router_id):
    try:
        neutron.delete_router(router_id)
    except neutron_exception, e:
        module.fail_json("Error in deleting the router:%s" % e.message)
    return True

def main():
    module = AnsibleModule(
        argument_spec                   = dict(
        os_username                  = dict(required=True),
        os_password                  = dict(required=True),
        os_tenant_name               = dict(required=True),
        os_auth_url                  = dict(required=True),
        region_name                  = dict(default=None),
        name                         = dict(required=True),
        tenant_name                  = dict(default=None),
        tenant_id                    = dict(default=None),
        state                        = dict(default='present', choices=['absent', 'present']),
        admin_state_up               = dict(type='bool', default=True),
        ),
        mutually_exclusive=[['tenant_name', 'tenant_id']],
    )

    neutron = _get_neutron_client(module)
    if module.params['tenant_name']:
        keystone = _get_keystone(module)
        _set_tenant_id(module, keystone)

    if module.params['state'] == 'present':
        router_id = _get_router_id(module, neutron)
        if not router_id:
            router_id = _create_router(module, neutron)
            module.exit_json(changed=True, result="Created", id=router_id)
        else:
            module.exit_json(changed=False, result="success" , id=router_id)

    else:
        router_id = _get_router_id(module, neutron)
        if not router_id:
            module.exit_json(changed=False, result="success")
        else:
            _delete_router(module, neutron, router_id)
            module.exit_json(changed=True, result="deleted")

# this is magic, see lib/ansible/module.params['common.py
from ansible.module_utils.basic import *
main()
