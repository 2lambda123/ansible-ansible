#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    try:
        from neutronclient.v2_0 import client
        from neutronclient.common.exceptions import NeutronClientException as neutron_exception
    except ImportError:
        from quantumclient.v2_0 import client
        from quantumclient.common.exceptions import QuantumClientException as neutron_exception
except ImportError:
    print("failed=True msg='quantumclient (or neutronclient) and keystone client are required'")
DOCUMENTATION = '''
---
module: quantum_router_interface
version_added: "1.2"
short_description: Attach/Dettach a subnet's interface to a router
description:
   - Attach/Dettach a subnet interface to a router, to provide a gateway for the subnet.
options:
   os_username:
     description:
        - OpenStack Auth username
     required: true
     default: None
   os_password:
     description:
        - OpenStack Auth password
     required: true
     default: None
   os_tenant_name:
     description:
        - Openstack Auth tenant name
     required: true
     default: None
   os_auth_url:
     description:
        - OpenStack Keystone Auth URL
     required: true
     default: None
   region_name:
     description:
        - OpenStack Region Name
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   router_name:
     description:
        - Name of the router to which the subnet's interface should be attached.
     required: true
     default: None
   subnet_name:
     description:
        - Name of the subnet to whose interface should be attached to the router.
     required: true
     default: None
   tenant_name:
     description:
        - Name of the tenant whose subnet has to be attached.
     required: false
     default: None
   tenant_id:
     description:
        - ID of the tenant whose subnet has to be attached.
     required: false
     default: None

requirements: ["quantumclient", "keystoneclient"]
'''

EXAMPLES = '''
# Attach tenant1's subnet to the external router
- quantum_router_interface:
        state: present
        os_username: admin
        os_password: admin
        os_tenant_name: admin
        os_auth_url: http://10.0.2.15:5000/v2.0
        tenant_name: tenant1
        router_name: external_route
        subnet_name: t1subnet
'''
def _get_ksclient(module):
    try:
        kclient = ksclient.Client(username=module.params['os_username'],
                                 password=module.params['os_password'],
                                 tenant_name=module.params['os_tenant_name'],
                                 auth_url=module.params['os_auth_url'],
                                 region_name=module.params['region_name'])
    except key_exception, e:
        module.fail_json(msg="Error authenticating to the keystone: %s" % e.message)
    return kclient

def _get_neutron_client(module):
    neutron = client.Client(username=module.params['os_username'],
                            password=module.params['os_password'],
                            tenant_name=module.params['os_tenant_name'],
                            auth_url=module.params['os_auth_url'],
                            region_name=module.params['region_name'])
    return neutron

def _set_tenant_id(module, keystone):
    for ten in keystone.tenants.list():
        if module.params['tenant_name'] == ten.name:
            module.params['tenant_id'] = ten.id
            return

def _get_router_id(module, neutron):
    kwargs = {
        'name': module.params['router_name'],
    }
    try:
        routers = neutron.list_routers(**kwargs)
    except neutron_exception, e:
        module.fail_json(msg="Error in getting the router list: %s" % e.message)
    if not routers['routers']:
        return None
    return routers['routers'][0]['id']


def _get_subnet_id(module, neutron):
    subnet_id = None
    kwargs = {
            'name': module.params['subnet_name'],
    }
    if module.params['tenant_id']:
        kwargs['tenant_id'] = module.params['tenant_id']
    try:
        subnets = neutron.list_subnets(**kwargs)
    except neutron_exception, e:
        module.fail_json(msg="Error in getting the subnet list:%s" % e.message)
    if not subnets['subnets']:
        return None
    return subnets['subnets'][0]['id']

def _get_port_id(neutron, module, router_id, subnet_id):
    kwargs = {
            'device_id': router_id,
    }
    if module.params['tenant_id']:
        kwargs['tenant_id'] = module.params['tenant_id']
    try:
        ports = neutron.list_ports(**kwargs)
    except neutron_exception, e:
        module.fail_json(msg="Error in listing ports: %s" % e.message)
    if not ports['ports']:
        return None
    for port in  ports['ports']:
        for subnet in port['fixed_ips']:
            if subnet['subnet_id'] == subnet_id:
                return port['id']
    return None

def _add_interface_router(neutron, module, router_id, subnet_id):
    kwargs = {
        'subnet_id': subnet_id,
    }
    try:
        neutron.add_interface_router(router_id, body=kwargs)
    except neturon_exception, e:
        module.fail_json(msg="Error in adding interface to router: %s" % e.message)
    return True

def  _remove_interface_router(neutron, module, router_id, subnet_id):
    kwargs = {
        'subnet_id': subnet_id
    }
    try:
        neutron.remove_interface_router(router_id, body=kwargs)
    except neutron_exception, e:
        module.fail_json(msg="Error in removing interface from router: %s" % e.message)
    return True

def main():
    module = AnsibleModule(
        argument_spec                   = dict(
            os_username                  = dict(required=True),
            os_password                  = dict(required=True),
            os_tenant_name               = dict(required=True),
            os_auth_url                  = dict(required=True),
            region_name                  = dict(default=None),
            router_name                  = dict(required=True),
            subnet_name                  = dict(required=True),
            tenant_name                  = dict(default=None),
            tenant_id                    = dict(default=None),
            state                        = dict(default='present', choices=['absent', 'present']),
        ),
        mutually_exclusive=[['tenant_id', 'tenant_name']],
    )

    neutron = _get_neutron_client(module)
    if module.params['tenant_name']:
        keystone = _get_ksclient(module)
        _set_tenant_id(module, keystone)
    router_id = _get_router_id(module, neutron)
    if not router_id:
        module.fail_json(msg="failed to get the router id, please check the router name")

    subnet_id = _get_subnet_id(module, neutron)
    if not subnet_id:
        module.fail_json(msg="failed to get the subnet id, please check the subnet name")

    if module.params['state'] == 'present':
        port_id = _get_port_id(neutron, module, router_id, subnet_id)
        if not port_id:
            _add_interface_router(neutron, module, router_id, subnet_id)
            module.exit_json(changed=True, result="created", id=port_id)
        module.exit_json(changed=False, result="success", id=port_id)

    if module.params['state'] == 'absent':
        port_id = _get_port_id(neutron, module, router_id, subnet_id)
        if not port_id:
            module.exit_json(changed = False, result = "Success")
        _remove_interface_router(neutron, module, router_id, subnet_id)
        module.exit_json(changed=True, result="Deleted")

# this is magic, see lib/ansible/module.params['common.py
from ansible.module_utils.basic import *
main()

