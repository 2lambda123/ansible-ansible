#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
DOCUMENTATION = '''
---
module: do
short_description: Manages DigitalOcean machines supported by dop
description:
     - Manages DigitalOcean machines supported by dop.
version_added: "0.1"
options:
  action:
    description:
     - Actions you want to execute on your Droplet virtual servers.
    required: true
    default: null
    choices: ["add_ssh_key", "all_ssh_keys", "create_droplet", "destroy_droplet", "destroy_image", "destroy_ssh_key", "disable_backups_droplet", "edit_ssh_key", "enable_backups_droplet", "images", "power_cycle_droplet", "power_off_droplet", "power_on_droplet", "reboot_droplet", "rebuild_droplet", "regions", "reset_root_password", "resize_droplet", "restore_droplet", "show_active_droplets", "show_droplet", "show_image", "show_ssh_key", "shutdown_droplet", "sizes", "snapshot_droplet"]
  client_id:
    description:
     - Your client id
    required: true
    default: null
  api_key:
    description:
     - Your api key
    required: true
    default: null
  show_all_images:
    description:
     - Whether to show all of your images or not.
    default: true
    choices: [ "true", "false" ]
  droplet_id:
    description:
     - Numeric, this is the id of your droplet.
    default: null
  droplet_name:
    description:
     - String, this is the name of the droplet - must be formatted by hostname rules.
    default: null
  size_id:
    description:
     - Numeric, this is the id of the size you would like the droplet created at or resized to.
    default: null
  image_id:
    description:
     - Numeric, this is the id of the image you would like the droplet created with.
    default: null
  region_id:
    description:
     - Numeric, this is the id of the region you would like your server in IE: US/Amsterdam.
    default: null
  virtio:
    description:
     - This toggles whether to enable or disable virtio during creation
    default: true
    choices: [ "true", "false" ]
  ssh_key_ids:
    description:
     - Comma separated list of ssh_key_ids that you would like to be added to the server.
    default: null
  ssh_key_id:
    description:
     - SSH key id.
    default: null
  snapshot_name:
    description:
     - String, this is the name of the new snapshot you want to create. If not set, the snapshot name will default to date/time.
    default: null

notes:
  - Two environment variables can be used, CLIENT_ID and API_KEY.
'''


EXAMPLES = '''
# a playbook task line:
tasks:
  - do: action=show_active_droplets client_id=XXX api_key=XXX

# /usr/bin/ansible invocations
ansible -i host -m do -a "action=show_active_droplets client_id=XXX api_key=XXX"
'''

import sys
import os

try:
    from dop.client import Client
except ImportError:
    print "failed=True msg='python module dop unavailable'"
    sys.exit(1)

ALL_COMMANDS = ['destroy_ssh_key', 'restore_droplet', 'create_droplet', 'images', 'destroy_droplet', 'disable_backups_droplet', 'rebuild_droplet', 'all_ssh_keys', 'edit_ssh_key', 'reboot_droplet', 'regions', 'reset_root_password', 'resize_droplet', 'shutdown_droplet', 'show_droplet', 'add_ssh_key', 'power_off_droplet', 'show_ssh_key', 'show_active_droplets', 'sizes', 'destroy_image', 'power_cycle_droplet', 'show_image', 'enable_backups_droplet', 'power_on_droplet', 'snapshot_droplet']
ALL_COMMANDS = ['create', 'stop', 'reboot', ]

def getkey(d, k):
    v = d[k]
    if v is None:
        raise KeyError(k)
    return v

def core(module):
    params = module.params
    # setup the auth
    try:
        client_id = params.get('client_id') or os.environ['CLIENT_ID']
        api_key = params.get('api_key') or os.environ['API_KEY']
    except KeyError, e:
        module.fail_json(msg='Unable to load %s' % e.message)

    client = Client(client_id, api_key)

    action = params['action']
    if action=='create':
        name = getkey(params, 'name')
        size_id = getkey(params, 'size_id')
        image_id = getkey(params, 'image_id')
        region_id = getkey(params, 'region_id')
        virtio = getkey(params, 'virtio')
        ssh_key_ids = getkey(params, 'ssh_key_ids').split(',')
        droplet = client.create_droplet(name, size_id, image_id, region_id, ssh_key_ids, virtio)
        return droplet.to_json()

    elif action=='stop'


def main():
    module = AnsibleModule(
        argument_spec = dict(
            action = dict(required=True, choices=ALL_COMMANDS),
            client_id = dict(aliases=['CLIENT_ID']),
            api_key = dict(aliases=['API_KEY']),
            name = dict(),
            size_id = dict(),
            image_id = dict(),
            region_id = dict(),
            virtio = dict(choices=BOOLEANS, default=True),
            ssh_key_ids = dict(default=''),

            show_all_images = dict(choices=BOOLEANS),
            droplet_id = dict(),
            droplet_name = dict(),
            snapshot_name = dict(),
        )
    )

    try:
        result = core(module)
    except KeyError, ke:
        module.fail_json(msg='Unable to load %s' % ke.message)
    except Exception, e:
        module.fail_json(msg=str(e))

    module.exit_json(**result)


    # try:
    #     param_dict, changed = params_of_func(params['action'])
    #     for k, v in param_dict.iteritems():
    #         if v is None:
    #             module.fail_json(msg='Unable to load %s' % k)
    #     getattr(client, params['action'])(**param_dict)
    # except KeyError, e:
    #     module.fail_json(msg='Unable to load %s' % e.message)
    # except AttributeError, e:
    #     module.fail_json(msg='Unexpected action %s' % e.message)
    # else:
    #     module.exit_json(changed=changed)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
