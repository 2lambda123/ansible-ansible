#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
# (c) 2013, John Dewey <john@dewey.ws>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    from novaclient.v1_1 import client as nova_client
    from novaclient import exceptions as nova_exc
except ImportError:
    print("failed=True msg='novaclient is required for this module to work'")

DOCUMENTATION = '''
---
module: nova_keypair
version_added: "1.2"
short_description: Add/Delete key pair from nova
description:
   - Add or Remove key pair from nova .
options:
   os_username:
     description:
        - OpenStack Auth username
     required: true
     default: None
   os_password:
     description:
        - OpenStack Auth password
     required: true
     default: None
   os_tenant_name:
     description:
        - OpenStack Auth tenant name
     required: true
     default: None
   os_auth_url:
     description:
        - OpenStack Keystone Auth URL
     required: true
     default: None
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   name:
     description:
        - Name that has to be given to the key pair
     required: true
     default: None
   public_key:
     description:
        - The public key that would be uploaded to nova and injected to vm's upon creation
     required: false
     default: None
   key_file:
      description:
        - Path to public key to use
      required: false
      default: None
requirements: ["novaclient"]
'''
EXAMPLES = '''
# Creates a key pair with the running users public key
- nova_keypair:
    state: present
    os_username: admin
    os_password: admin
    os_tenant_name: admin
    name: ansible_key
    public_key: {{ lookup('file','~/.ssh/id_rsa.pub') }}

# Creates a new key pair and the private key returned after the run.
- nova_keypair:
    state: present
    os_username: admin
    os_password: admin
    os_tenant_name: admin
    name: ansible_key
'''

def main():
    module = AnsibleModule(
        argument_spec                   = dict(
        os_username                  = dict(required=True),
        os_password                  = dict(required=True),
        os_tenant_name               = dict(required=True),
        os_auth_url                  = dict(required=True),
        region_name                  = dict(default=None),
        name                         = dict(required=True),
        public_key                   = dict(default=None),
        key_file                     = dict(default=None),
        state                        = dict(default='present', choices=['absent', 'present'])
        ),
    )

    nova = nova_client.Client(module.params['os_username'],
                              module.params['os_password'],
                              module.params['os_tenant_name'],
                              module.params['os_auth_url'],
                              region_name=module.params['region_name'],
                              service_type='compute')
    try:
        nova.authenticate()
    except nova_exc.Unauthorized, e:
        module.fail_json(msg="Invalid OpenStack Nova credentials.: %s" % str(e))
    except nova_exc.AuthorizationFailure, e:
        module.fail_json(msg="Unable to authorize user: %s" % str(e))

    if module.params['key_file']:
        with open(module.params['key_file'], 'r') as f:
            module.params['public_key'] = f.read()
    if module.params['state'] == 'present':
        for key in nova.keypairs.list():
            if key.name == module.params['name']:
                if module.params['public_key'] and (module.params['public_key'] != key.public_key):
                    module.fail_json(msg="name {} present but key hash not the same as offered.  Delete key first.".format(key['name']))
                else:
                    module.exit_json(changed=False, result="Key present")
        try:
            key = nova.keypairs.create(module.params['name'], module.params['public_key'])
        except nova_exc, e:
            module.exit_json(msg="Error in creating the keypair: %s" % str(e))
        if not module.params['public_key']:
            module.exit_json(changed=True, key=key.private_key)
        module.exit_json(changed=True, key=None)
    if module.params['state'] == 'absent':
        for key in nova.keypairs.list():
            if key.name == module.params['name']:
                try:
                    nova.keypairs.delete(module.params['name'])
                except nova_exc, e:
                    module.fail_json(msg="The keypair deletion has failed: %s" % str(e))
                module.exit_json(changed=True, result="deleted")
        module.exit_json(changed=False, result="not present")

# this is magic, see lib/ansible/module.params['common.py
from ansible.module_utils.basic import *
main()

