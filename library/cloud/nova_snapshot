#!/usr/bin/python
#coding: utf-8 -*-

# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.
import time
try:
    from novaclient.v1_1 import client as nova_client
    from novaclient import exceptions as nova_exc
except ImportError:
    print("failed=True msg='novaclient is required for this module'")

DOCUMENTATION = '''
---
module: nova_snapshot
version_added: "1.0"
short_description: Create/Delete snapshots of VMs from OpenStack
description:
   - Create or Remove virtual machine snapshots from Openstack.
options:
   os_username:
     description:
        - OpenStack Auth username
     required: true
     default: None
   os_password:
     description:
        - OpenStack Auth password
     required: true
     default: None
   os_tenant_name:
     description:
        - OpenStack Auth tenant name
     required: true
     default: None
   os_auth_url:
     description:
        - OpenStack Keystone Auth URL
     required: true
     default: None
   region_name:
     description:
        - Name of the region
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   server_name:
     description:
        - Name of server to snapshot
     required: false
     default: None
   server_id:
     description:
        - ID of server to snapshot
     required: false
     default: None
   image_name:
      description:
        - Name of created snapshot
      required: true
      default: None
    wait:
     description:
        - Wait for given snasphot to complete
     required: false
     default: False
   timeout:
      description:
        - Timeout for waiting for snapshot
      required: False
      default: 180
requirements: ["novaclient"]
'''

EXAMPLES = '''
# Creates a new VM and attaches to a network and passes metadata to the instance
- nova_snapshot:
       state: present
       os_username: admin
       os_password: admin
       os_tenant_name: admin
       os_os_auth_url: http://1.1.1.1:5000/v2.0
       server_name: Test Server
       image_name: Test-Image
       wait: True
       timeout: 3500
'''
def _find_server(nova, server_name):
    for server in nova.servers.list():
        if server.name == server_name:
            return server.id
    return None

def _check_for_snapshot(module, nova):
    for image in nova.images.list():
        if image.name == module.params['image_name']:
            if hasattr(image, 'server') and image.server['id'] == module.params['server_id']:
                return image.id
    return None

def _snapshot_present(module, nova):
    kwargs = {'server' : module.params['server_id'],
              'image_name' : module.params['image_name']
             }
    try:
        image_id = nova.servers.create_image(**kwargs)
    except nova_exc, e:
        module.fail_json(msg='Error creating snapshot:%s' % str(e))
    image = nova.images.get(image_id)
    if module.params['wait']:
        expires = float(module.params['timeout']) + time.time()
        while time.time() < expires:
            image = nova.images.get(image_id)
            if image.status == 'ACTIVE':
                break
            if image.status == 'ERROR':
                module.fail_json(msg='Error creating snapshot')
            time.sleep(5)
    module.exit_json(changed=True, id=image_id, info=image._info)

def _snapshot_absent(module, nova, image_id):
    if image_id == None:
        module.fail_json(msg='Cannot find snapshot to delete')
    nova.images.delete(image_id)
    if module.params['wait']:
        expires = float(module.params['timeout']) + time.time()
        while time.time() < expires:
            try:
                nova.images.get(image_id)
            except nova_exc.NotFound:
                break
            time.sleep(5)
    module.exit_json(changed=True, result='Snapshot deleted')

def main():
    module = AnsibleModule(
        argument_spec                   = dict(
        os_username                  = dict(default='admin'),
        os_password                  = dict(required=True),
        os_tenant_name               = dict(required='True'),
        os_auth_url                        = dict(default='http://127.0.0.1:35357/v2.0/'),
        region_name                     = dict(default=None),
        server_id                       = dict(required=False),
        server_name                     = dict(required=False),
        image_name                      = dict(required=True),
        wait                            = dict(default=False, choices=[True, False]),
        timeout                        = dict(default=180),
        state                           = dict(default='present', choices=['absent', 'present']),
        ),
        mutually_exclusive = [['server_id','server_name']],
    )
    nova = nova_client.Client(module.params['os_username'],
                              module.params['os_password'],
                              module.params['os_tenant_name'],
                              module.params['os_auth_url'],
                              region_name=module.params['region_name'],
                              service_type='compute')
    try:
        nova.authenticate()
    except nova_exc.Unauthorized, e:
        module.fail_json(msg="Invalid OpenStack Nova credentials.: %s" % e.message)
    except nova_exc.AuthorizationFailure, e:
        module.fail_json(msg="Unable to authorize user: %s" % e.message)

    if module.params['server_name'] != None:
        module.params['server_id'] = _find_server(nova, module.params['server_name'])
    image = _check_for_snapshot(module, nova)
    if module.params['state'] == 'present':
        if image != None:
            module.exit_json(changed=False, result='Snapshot exists')
        _snapshot_present(module, nova)
    if module.params['state'] == 'absent':
        _snapshot_absent(module, nova, image)

# this is magic, see lib/ansible/module.params['common.py
from ansible.module_utils.basic import *
main()
