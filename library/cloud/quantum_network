#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Benno Joy <benno@ansible.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    try:
        from neutronclient.v2_0 import client
        from neutronclient.common.exceptions import NeutronClientException as neutron_exception
    except ImportError:
        from quantumclient.v2_0 import client
        from quantumclient.common.exceptions import QuantumClientException as neutron_exception
    from keystoneclient.v2_0 import client as ksclient
    from keystoneclient.openstack.common.apiclient import exceptions as key_exception
except ImportError:
    print("failed=True msg='quantumclient (or neutronclient) and keystone client are required'")

DOCUMENTATION = '''
---
module: quantum_network
version_added: "1.4"
short_description: Creates/Removes networks from OpenStack
description:
   - Add or Remove network from OpenStack.
options:
   os_username:
     description:
        - OpenStack Auth username
     required: true
     default: None
   os_password:
     description:
        - OpenStack Auth password
     required: true
     default: None
   os_tenant_name:
     description:
        - OpenStack Auth tenant name
     required: true
     default: None
   os_auth_url:
     description:
        - OpenStack Keystone Auth URL
     required: true
     default: None
   region_name:
     description:
        - OpenStack Auth Region Name
     required: false
     default: None
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent']
     default: present
   name:
     description:
        - Name to be assigned to the nework
     required: true
     default: None
   provider_network_type:
     description:
        - The type of the network to be created, gre, vlan, local. Available types depend on the plugin. The Quantum service decides if not specified.
     required: false
     default: None
   provider_physical_network:
     description:
        - The physical network which would realize the virtual network for flat and vlan networks.
     required: false
     default: None
   provider_segmentation_id:
     description:
        - The id that has to be assigned to the network, in case of vlan networks that would be vlan id and for gre the tunnel id
     required: false
     default: None
   router_external:
     description:
        - If 'yes', specifies that the virtual network is a external network (public).
     required: false
     default: false
   shared:
     description:
        - Whether this network is shared or not
     required: false
     default: false
   admin_state_up:
     description:
        - Whether the state should be marked as up or down
     required: false
     default: true
requirements: ["quantumclient", "neutronclient", "keystoneclient"]

'''

EXAMPLES = '''
# Create a GRE backed Quantum network with tunnel id 1 for tenant1
- quantum_network:
        name: t1network
        tenant_name: tenant1
        state: present
        provider_network_type: gre
        provider_segmentation_id: 1
        os_username: admin
        os_password: password
        os_tenant_name: admin
        os_auth_url: http://10.0.2.15:5000/v2.0

# Create an external network
- quantum_network:
    name: external_network
    state: present
    provider_network_type: local
    router_external: yes
    os_username: admin
    os_password: password
    os_tenant_name: admin
    os_auth_url: http://10.0.2.15:5000/v2.0
'''

def _get_ksclient(module):
    try:
        kclient = ksclient.Client(username=module.params['os_username'],
                                 password=module.params['os_password'],
                                 tenant_name=module.params['os_tenant_name'],
                                 auth_url=module.params['os_auth_url'],
                                 region_name=module.params['region_name'])
    except key_exception, e:
        module.fail_json(msg="Error authenticating to the keystone: %s" % e.message)
    return kclient

def _get_neutron_client(module):
    neutron = client.Client(username=module.params['os_username'],
                            password=module.params['os_password'],
                            tenant_name=module.params['os_tenant_name'],
                            auth_url=module.params['os_auth_url'],
                            region_name=module.params['region_name'])
    return neutron

def _set_tenant_id(module, keystone):
    for ten in keystone.tenants.list():
        if ten.name == module.params['tenant_name']:
            module.params['tenant_id'] = ten.id
            return
    module.fail_json(msg='Cannot find tenant:%s' % module.params['tenant_name'])

def _get_net_id(neutron, module):
    kwargs = {
            'name': module.params['name'],
    }
    if module.params['tenant_id']:
        kwargs['tenant_id'] = module.params['tenant_id']
    try:
        networks = neutron.list_networks(**kwargs)
    except neutron_exception, e:
        module.fail_json(msg='Cannot get network list:%s' % e.message)
    if not networks['networks']:
        return None
    return networks['networks'][0]['id']

def _create_network(module, neutron):
    neutron.format = 'json'
    args = {
        'name' : 'name',
        'provider:network_type' : 'provider_network_type',
        'provider:physical_network' : 'provider_physical_network',
        'provider:segmentation_id' : 'provider_segmentation_id',
        'router:external' : 'router_external',
        'shared' : 'shared',
        'admin_state_up' : 'admin_state_up',
        'tenant_id' : 'tenant_id',
    }
    network = dict()
    for k, v in args.iteritems():
        if module.params[v]:
            network[k] = module.params[v]
    if module.params['provider_network_type'] == 'local':
        network.pop('provider:physical_network', None)
        network.pop('provider:segmentation_id', None)

    if module.params['provider_network_type'] == 'flat':
        network.pop('provider:segmentation_id', None)

    if module.params['provider_network_type'] == 'gre':
        network.pop('provider:physical_network', None)

    if module.params['provider_network_type'] is None:
        network.pop('provider:network_type', None)
        network.pop('provider:physical_network', None)
        network.pop('provider:segmentation_id', None)
    try:
        net = neutron.create_network({'network': network})
    except neutron_exception, e:
        module.fail_json(msg="Error in creating network: %s" % e.message)
    return net['network']['id']

def _delete_network(module, net_id, neutron):

    try:
        id = neutron.delete_network(net_id)
    except neutron_exception, e:
        module.fail_json(msg="Error in deleting the network: %s" % e.message)
    return True

def main():

    module = AnsibleModule(
        argument_spec                   = dict(
            os_username                     = dict(required=True),
            os_password                     = dict(required=True),
            os_tenant_name                  = dict(required=True),
            os_auth_url                     = dict(required=True),
            region_name                     = dict(default=None),
            name                            = dict(required=True),
            tenant_name                     = dict(default=None),
            tenant_id                       = dict(default=None),
            provider_network_type           = dict(default=None, choices=['local', 'vlan', 'flat', 'gre']),
            provider_physical_network       = dict(default=None),
            provider_segmentation_id        = dict(default=None),
            router_external                 = dict(default=False, type='bool'),
            shared                          = dict(default=False, type='bool'),
            admin_state_up                  = dict(default=True, type='bool'),
            state                           = dict(default='present', choices=['absent', 'present'])
        ),
        mutually_exclusive=[['tenant_id', 'tenant_name']],
    )

    if module.params['provider_network_type'] in ['vlan' , 'flat']:
            if not module.params['provider_physical_network']:
                module.fail_json(msg = " for vlan and flat networks, variable provider_physical_network should be set.")

    if module.params['provider_network_type']  in ['vlan', 'gre']:
            if not module.params['provider_segmentation_id']:
                module.fail_json(msg = " for vlan & gre networks, variable provider_segmentation_id should be set.")

    neutron = _get_neutron_client(module)
    if module.params['tenant_name']:
        keystone = _get_ksclient(module)
        _set_tenant_id(module, keystone)

    if module.params['state'] == 'present':
        network_id = _get_net_id(neutron, module)
        if not network_id:
            network_id = _create_network(module, neutron)
            module.exit_json(changed = True, result = "Created", id = network_id)
        else:
            module.exit_json(changed = False, result = "Success", id = network_id)

    if module.params['state'] == 'absent':
        network_id = _get_net_id(neutron, module)
        if not network_id:
            module.exit_json(changed = False, result = "Success")
        else:
            _delete_network(module, network_id, neutron)
            module.exit_json(changed = True, result = "Deleted")

# this is magic, see lib/ansible/module.params['common.py
from ansible.module_utils.basic import *
main()

