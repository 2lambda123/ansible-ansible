#!/usr/bin/python
from ansible.module_utils.azure import *
from azure import BLOB_SERVICE_HOST_BASE
from azure import WindowsAzureError
from azure import WindowsAzureConflictError

from ansible.utils import display_functions
from ansible.callbacks import display
from ansible.callbacks import vv, vvv



def _create_media_link(storage_name, container_name, blob_name):
    return create_azure_conform_name("http://{storage_name}{blob_service_host_base}/{container}/{blob}.vhd".format(
        storage_name=storage_name,
        blob_service_host_base=BLOB_SERVICE_HOST_BASE,
        container=container_name,
        blob=blob_name))


def _log(msg):
    display(msg)


def _create_cloud_service(sms, cloud_service_name, location, affinity_group):
    _log("* Cloud service not passed as an argument, creating one based on given name: " + cloud_service_name)
    try:
        sms.create_hosted_service(service_name=cloud_service_name, label=cloud_service_name, location=location, affinity_group=affinity_group)
    except WindowsAzureConflictError:  # service already there
        pass


def create_vm(module):
    sms = Azure.get_sms(module)
    name = create_azure_conform_name(module.params.get('name'))
    image_name = module.params.get('image_name')
    role_size = module.params.get('role_size')
    if not role_size or not role_size in ['ExtraSmall', 'Small', 'Medium', 'Large', 'ExtraLarge']:
        module.fail_json(msg="Type must be one of [ExtraSmall, Small, Medium, Large, ExtraLarge]")

    storage_name = module.params.get('storage_name')
    affinity_group = module.params.get('affinity_group')
    location = module.params.get('location')
    if location and affinity_group:
        module.fail_json(msg="Use only one type of parameter (location) or (affinity_group).")

    cloud_service_name = create_azure_conform_name(module.params.get('cloud_service_name'))
    if not cloud_service_name:
        cloud_service_name = name
        _create_cloud_service(sms, cloud_service_name, location, affinity_group)

    container_name = module.params.get('container_name')
    if not container_name:
        container_name = name

    blob_name = module.params.get('blob_name')
    if not blob_name:
        blob_name = "os"

    # Destination storage account container/blob where the VM disk
    # will be created
    media_link = _create_media_link(storage_name, container_name, blob_name)

    _log("* Using media link: " + media_link)

    # Linux VM configuration, you can use WindowsConfigurationSet
    # for a Windows VM instead
    linux_config = LinuxConfigurationSet('myhostname', 'myuser', 'on8heads.#', True)

    os_hd = OSVirtualHardDisk(image_name, media_link)
    _log("* Created os_hd: " + str(azure_props_to_dict(os_hd)))

    network = ConfigurationSet()
    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))

    vm = sms.create_virtual_machine_deployment(service_name=cloud_service_name,
                                               deployment_name=name,
                                               deployment_slot='production',
                                               label=name,
                                               network_config=network,
                                               role_name=name,
                                               system_config=linux_config,
                                               os_virtual_hard_disk=os_hd,
                                               role_size=role_size)

    props = sms.get_deployment_by_name(cloud_service_name, name)
    module.exit_json(msg="Create VM complete", vm=azure_props_to_dict(props), id=azure_props_to_dict(vm))


def main():
    argument_spec = azure_common_argument_spec()
    argument_spec.update(dict(
        name=dict(aliases=['NAME'], type='str'),
        image_name=dict(aliases=['IMAGE_NAME'], type='str'),
        storage_name=dict(aliases=['STORAGE_NAME'], type='str'),
        role_size=dict(aliases=['ROLE_SIZE'], type='str', default='Small'),
        state=dict(aliases=['STATE'], type='str', default='present'),
        cloud_service_name=dict(aliases=['CLOUD_SERVICE_NAME'], type='str'),
        location=dict(aliases=['LOCATION'], type='str', default=None),
        affinity_group=dict(aliases=['AFFINITY_GROUP'], type='str', default=None),
        blob_name=dict(aliases=['BLOB_NAME'], type='str'),
        container_name=dict(aliases=['CONTAINER_NAME'], type='str')))

    module = AnsibleModule(argument_spec=argument_spec)

    try:
        create_vm(module)
    except WindowsAzureError as e:
        module.fail_json(msg=str(e))

# import module snippets
from ansible.module_utils.basic import *

main()
