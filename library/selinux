#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Derek Carter<goozbach@friocorte.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import os

try:
    import selinux
    HAVE_SELINUX=True
except ImportError:
    HAVE_SELINUX=False
    fail_json(msg='python-selinux required for this module')

def config_change(state='enforcing'):
    # edit config file with state value
    pass

def enforce_selinux():
    # turn on with python
    # change config file to do enforcing
    config_change('enforcing')
    pass

def main():
    module = AnsibleModule(
        argument_spec = dict(
            policy=dict(choices=['targeted','mls','strict','minimum'], default='targeted'),
            state=dict(choices=['enforcing', 'permissive', 'disabled'], default='enforcing'),
        )
    )

    # global vars
    CHANGED=False
    msg                   = ''
    policy                = module.params['policy']
    state                 = module.params['state']
    runtime_enabled       = selinux.is_selinux_enabled()
    runtime_policy        = selinux.selinux_getpolicytype()[1]
    runtime_state         = 'disabled'
    if ( runtime_enabled ):
        # enabled means 'enforcing' or 'permissive'
        if ( selinux.security_getenforce() ):
            runtime_state = 'enforcing'
        else:
            runtime_state = 'permissive'
    config_policy         = '' #TODO get from file
    config_state          = '' #TODO get from file

    # check changed values
    if ( policy != runtime_policy ):
        msg = msg + ' runtime policy changed from %s to %s,' % ( runtime_policy, policy )
        CHANGED=True 
    if ( policy != config_policy ):
        msg = msg + ' config policy changed from %s to %s,' % ( config_policy, policy )
        CHANGED=True 
    # runtime_state change
    if ( state != runtime_state ):
        msg = msg + ' runtime state changed from %s to %s,' % ( runtime_state, state )
        CHANGED=True 
    # config_state change
    if ( state != config_state ):
        msg = msg + ' config state changed from %s to %s,' % ( config_state, state )
        CHANGED=True 
 
    module.exit_json(changed=CHANGED, msg=msg,
        policy=policy, state=state)

#################################################
# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
