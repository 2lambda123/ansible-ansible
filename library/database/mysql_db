#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Mark Theunissen <mark.theunissen@gmail.com>
# Sponsored by Four Kitchens http://fourkitchens.com.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: mysql_db
short_description: Add or remove MySQL databases from a remote host.
description:
   - Add or remove MySQL databases from a remote host.
version_added: "0.6"
options:
  name:
    description:
      - name of the database to add or remove
    required: true
    default: null
    aliases: [ db ]
  defaults_file:
    description:
      - defaults-file to load
    required: false
    default: ~/.my.cnf
  login_user:
    description:
      - The username used to authenticate with
    required: false
    default: root
  login_password:
    description:
      - The password used to authenticate with
    required: false
    default: null
  login_host:
    description:
      - Host running the database
    required: false
    default: localhost
  login_port:
    description:
      - Port of the MySQL server
    required: false
    default: 3306
  login_unix_socket:
    description:
      - The path to a Unix domain socket for local connections
    required: false
    default: null
  state:
    description:
      - The database state
    required: false
    default: present
    choices: [ "present", "absent", "dump", "import" ]
  collation:
    description:
      - Collation mode
    required: false
    default: null
  encoding:
    description:
      - Encoding mode
    required: false
    default: null
  target:
    description:
      - Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL
        files (C(.sql)) as well as bzip2 (C(.bz2)) and gzip (C(.gz)) compressed files are supported.
    required: false
notes:
   - Requires the MySQLdb Python package on the remote host. For Ubuntu, this
     is as easy as apt-get install python-mysqldb. (See M(apt).)
   - The I(defaults_file) will be loaded if passed, otherwise, ~/.my.cnf would be loaded.  Any parameters
     passed will override the parameters found in the my.cnf file.  user, password, host, port and socket
     parameters will be read from the my.cnf.
   - If user not found, root will be used
   - If password not found, no password will be used.  It is no longer required.
requirements: [ ConfigParser ]
author: Mark Theunissen (Him You Ten added defaults_file)
'''

EXAMPLES = '''
# Create a new database with name 'bobdata'
- mysql_db: name=bobdata state=present

# Copy database dump file to remote host and restore it to database 'my_db'
- copy: src=dump.sql.bz2 dest=/tmp
- mysql_db: name=my_db state=import target=/tmp/dump.sql.bz2
'''

import ConfigParser
import os
import pipes
try:
    import MySQLdb
except ImportError:
    mysqldb_found = False
else:
    mysqldb_found = True

# ===========================================
# MySQL module specific support methods.
#

def db_exists(cursor, db):
    res = cursor.execute("SHOW DATABASES LIKE %s", (db,))
    return bool(res)

def db_delete(cursor, db):
    query = "DROP DATABASE `%s`" % db
    cursor.execute(query)
    return True

def db_dump(module, host, user, password, db_name, target, port, socket=None):
    cmd = module.get_bin_path('mysqldump', True)
    cmd += " --quick --user=%s --password=%s" % (pipes.quote(user), pipes.quote(password))
    if socket is not None:
        cmd += " --socket=%s" % pipes.quote(socket)
    else:
        cmd += " --host=%s --port=%s" % (pipes.quote(host), pipes.quote(port))
    cmd += " %s" % pipes.quote(db_name)
    if os.path.splitext(target)[-1] == '.gz':
        cmd = cmd + ' | gzip > ' + pipes.quote(target)
    elif os.path.splitext(target)[-1] == '.bz2':
        cmd = cmd + ' | bzip2 > ' + pipes.quote(target)
    else:
        cmd += " > %s" % pipes.quote(target)
    rc, stdout, stderr = module.run_command(cmd, use_unsafe_shell=True)
    return rc, stdout, stderr

def db_import(module, host, user, password, db_name, target, port, socket=None):
    cmd = module.get_bin_path('mysql', True)
    cmd += " --user=%s --password=%s" % (pipes.quote(user), pipes.quote(password))
    if socket is not None:
        cmd += " --socket=%s" % pipes.quote(socket)
    else:
        cmd += " --host=%s --port=%s" % (pipes.quote(host), pipes.quote(port))
    cmd += " -D %s" % pipes.quote(db_name)
    if os.path.splitext(target)[-1] == '.gz':
        cmd = 'gunzip < ' + pipes.quote(target) + ' | ' + cmd
    elif os.path.splitext(target)[-1] == '.bz2':
        cmd = 'bunzip2 < ' + pipes.quote(target) + ' | ' + cmd
    else:
        cmd += " < %s" % pipes.quote(target)
    rc, stdout, stderr = module.run_command(cmd, use_unsafe_shell=True)
    return rc, stdout, stderr

def db_create(cursor, db, encoding, collation):
    if encoding:
        encoding = " CHARACTER SET %s" % encoding
    if collation:
        collation = " COLLATE %s" % collation
    query = "CREATE DATABASE `%s`%s%s" % (db, encoding, collation)
    res = cursor.execute(query)
    return True

def strip_quotes(s):
    """ Remove surrounding single or double quotes
    
    >>> print strip_quotes('hello')
    hello
    >>> print strip_quotes('"hello"')
    hello
    >>> print strip_quotes("'hello'")
    hello
    >>> print strip_quotes("'hello")
    'hello
    
    """
    single_quote = "'"
    double_quote = '"'
    
    if s.startswith(single_quote) and s.endswith(single_quote):
        s = s.strip(single_quote)
    elif s.startswith(double_quote) and s.endswith(double_quote):
        s = s.strip(double_quote)
    return s


def config_get(config, section, option):
    """ Calls ConfigParser.get and strips quotes
    
    See: http://dev.mysql.com/doc/refman/5.0/en/option-files.html
    """
    return strip_quotes(config.get(section, option))


def load_mycnf(defaults_file, module):
    config = ConfigParser.RawConfigParser()
    mycnf = os.path.expanduser(defaults_file)
    passwd = None
    user = None
    host = None
    port = None
    unix_socket = None
    if not os.path.exists(mycnf):
        return False
    try:
        config.readfp(open(mycnf))
    except (IOError, e):
        return False
    # We support two forms of passwords in .my.cnf, both pass= and password=,
    # as these are both supported by MySQL.
    try:
        passwd = config_get(config, 'client', 'password')
    except (ConfigParser.NoOptionError):
        try:
            passwd = config_get(config, 'client', 'pass')
        except (ConfigParser.NoOptionError):
            module.fail_json(msg="cannot find password:"+e.message)
            return False
    try:
        user = config_get(config, 'client', 'user')
    except:
        pass
    try:
        host = config_get(config, 'client', 'host')
    except:
        pass
    try:
        port = config_get(config, 'client', 'port')
    except:
        pass
    try:
        unix_socket = config_get(config, 'client', 'socket')
    except:
        pass

    creds = dict(
        user=user,
        passwd=passwd,
        host=host,
        port=port,
        unix_socket=unix_socket,
    )

    return creds

# ===========================================
# Module execution.
#

def main():
    module = AnsibleModule(
        argument_spec = dict(
            defaults_file=dict(default="~/.my.cnf"),
            login_user=dict(default=None),
            login_password=dict(default=None),
            login_host=dict(default=None),
            login_port=dict(default=None),
            login_unix_socket=dict(default=None),
            db=dict(required=True, aliases=['name']),
            encoding=dict(default=""),
            collation=dict(default=""),
            target=dict(default=None),
            state=dict(default="present", choices=["absent", "present","dump", "import"]),
        )
    )
    
    if not mysqldb_found:
        module.fail_json(msg="the python mysqldb module is required")
    
    db = module.params["db"]
    encoding = module.params["encoding"]
    collation = module.params["collation"]
    state = module.params["state"]
    target = module.params["target"]
    defaults_file = module.params["defaults_file"]
    
    # load my.cnf specified or use default ~/.my.cnf
    mycnf_params = load_mycnf(defaults_file, module)
    
    # load the module params
    login_user = module.params["login_user"]
    login_password = module.params["login_password"]
    login_host = module.params["login_host"]
    login_port = module.params["login_port"]
    login_unix_socket = module.params["login_unix_socket"]
    
    # use module params if passed, otherwise use those in the my.cnf
    if mycnf_params:
        if login_user is None:
            login_user = mycnf_params["user"]
        if login_password is None:
            login_password = mycnf_params["passwd"]
        if login_host is None:
            login_host = mycnf_params["host"]
        if login_port is None:
            login_port = mycnf_params["port"]
        if login_unix_socket is None:
            login_unix_socket = mycnf_params["unix_socket"]
    
    # set the defaults if none found
    if login_user is None:
        login_user = "root"
    if login_password is None:
        login_password = ""
    if login_host is None:
        login_host = "localhost"
    if login_port is None:
        login_port = "3306"

    
    if state in ['dump','import']:
        if target is None:
            module.fail_json(msg="with state=%s target is required" % (state))
        connect_to_db = db
    else:
        connect_to_db = 'mysql'
    try:
        if login_unix_socket:
            db_connection = MySQLdb.connect(host=login_host, unix_socket=login_unix_socket, user=login_user, passwd=login_password, db=connect_to_db)
        else:
            db_connection = MySQLdb.connect(host=login_host, port=int(login_port), user=login_user, passwd=login_password, db=connect_to_db)
        cursor = db_connection.cursor()
    except Exception, e:
        module.fail_json(msg="unable to connect, check login_user and login_password are correct, or alternatively check my.cnf provided or ~/.my.cnf contains credentials")
    
    changed = False
    if db_exists(cursor, db):
        if state == "absent":
            changed = db_delete(cursor, db)
        elif state == "dump":
            rc, stdout, stderr = db_dump(module, login_host, login_user,
                                        login_password, db, target,
                                        port=login_port,
                                        socket=login_unix_socket)
            if rc != 0:
                module.fail_json(msg="%s" % stderr)
            else:
                module.exit_json(changed=True, db=db, msg=stdout)
        elif state == "import":
            rc, stdout, stderr = db_import(module, login_host, login_user,
                                        login_password, db, target,
                                        port=login_port,
                                        socket=login_unix_socket)
            if rc != 0:
                module.fail_json(msg="%s" % stderr)
            else:
                module.exit_json(changed=True, db=db, msg=stdout)
    else:
        if state == "present":
            changed = db_create(cursor, db, encoding, collation)
    
    module.exit_json(changed=changed, db=db)

# import module snippets
from ansible.module_utils.basic import *
main()
