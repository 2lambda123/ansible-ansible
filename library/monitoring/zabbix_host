#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, Epic Games, Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible. If not, see <http://www.gnu.org/licenses/>.
#
# The ZabbixAPI and ZabbixAPIObjectClass were based on:
# https://github.com/gescheit/scripts/blob/master/zabbix/zabbix_api.py
#
# LGPL 2.1   http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
# Zabbix API Python Library.
# Original Ruby Library is Copyright (C) 2009 Andrew Nelson nelsonab(at)red-tux(dot)net
# Python Library is Copyright (C) 2009 Brett Lentz brett.lentz(at)gmail(dot)com
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#

DOCUMENTATION = '''
---
module: zabbix_host
short_description: Creates a new host or updates and existing host in Zabbix.
description:
   - When the host does not exists, a new host will be created, added to any host groups, and link in any templates.
   - When the host already exists, the host group membership will be updated, along with the template links and interfaces.
version_added: "1.5"
author: Tony Minfei Ding
options:
    zabbix_server:
        description:
            - Zabbix server to connect to.
        required: true
    zabbix_login_user:
        description:
            - Zabbix user to login with.
        required: true
    zabbix_login_password:
        description:
            - Zabbix user password.
        required: true
    zabbix_access_protocol:
        description:
            - Protocol to use when connecting to Zabbix.
        required: false
        default: "http"
    zabbix_host_name:
        description:
            - Technical name of the host.
            - If the host has already been added, the host name won't be updated.
        required: true
    zabbix_host_groups:
        description:
            - List of host groups to add the host to.
        required: true
    zabbix_link_templates:
        description:
            - List of templates to be linked to the host.
        required: false
        default: None
    status:
        description:
            - Status and function of the host.
            - Possible values are: 0 - (default) monitored host; 1 - unmonitored host.
        required: false
        default: "0"
    interfaces:
        description:
            - List of interfaces to be created for the host (see example).
        required: true
'''

EXAMPLES = '''
- name: Create a new host or update an existing host's info
  local_action:
    module: zabbix_host
    zabbix_server: monitor.example.com
    zabbix_login_user: username
    zabbix_login_password: password
    zabbix_access_protocol: http
    zabbix_host_name: ExampleHost
    zabbix_host_groups:
      - Example group1
      - Example group2
    zabbix_link_templates:
      - Example template1
      - Example template2
    status: 1
    interfaces:
      - type: 1
        main: 1
        useip: 1
        ip: 10.xx.xx.xx
        dns: ""
        port: 10050
      - type: 4
        main: 1
        useip: 1
        ip: 10.xx.xx.xx
        dns: ""
        port: 12345
'''


import json
import base64
import urllib2

from ansible.module_utils.basic import *

class ZabbixAPI(object):
    def __init__(self, module):
        self._module = module
        self._request_url = None
        self._protocol = None
        self._server_address = None
        self._username = None
        self._password = None
        self._auth = None

        # the suffix of request url
        self._request_url_suffix = '/api_jsonrpc.php'

        # http request headers
        self._headers = {'Content-Type': 'application/json-rpc', 'User-Agent': 'python/zabbix'}

        # timeout for http request more than 10 secs
        self._timeout = 20

    # using a string object instead of an identifier to identify the attribute, e.g. ZabbixAPI.host
    def __getattr__(self, name):
        if not self.__dict__.has_key(name):
            self.__dict__[name] = ZabbixAPIObjectClass(self, name, self._module)
        return self.__dict__[name]

    # logging to zabbix
    def do_login(self, server_address, username, password, protocol):
        self._username = username
        self._password = password
        self._server_address = server_address
        self._protocol = protocol
        self._request_url = self._protocol + "://" + self._server_address + self._request_url_suffix

        params = {'user': self._username, 'password': self._password}
        login_request = {'jsonrpc': '2.0',
                         'method': 'user.login',
                         'params': params,
                         'id': 1
        }

        try:
            response = self.do_request(json.dumps(login_request))
            parse_response = self.parse_response(response)
        except Exception, e:
            self._module.fail_json(msg=e)

        self._auth = parse_response['result']
        if not self.check_auth():
            self._module.fail_json(msg="Login failed")

    # do request to zabbix and get response
    def do_request(self, json_string):
        base64string = base64.encodestring('%s:%s' % (self._username, self._password)).replace('\n', '')
        self._headers['Authorization'] = "Basic %s" % base64string
        request = urllib2.Request(url=self._request_url, headers=self._headers)
        request.add_data(json_string.encode('utf-8'))
        opener = self.get_build_opener()
        urllib2.install_opener(opener)
        try:
            response = opener.open(request, timeout=self._timeout)
        except Exception, e:
            self._module.fail_json(msg=e)
        return response

    # return build opener by different http protocol
    def get_build_opener(self):
        if self._protocol == "https":
            https_handler = urllib2.HTTPSHandler()
            opener = urllib2.build_opener(https_handler)
        elif self._protocol == "http":
            http_handler = urllib2.HTTPHandler()
            opener = urllib2.build_opener(http_handler)
        else:
            self._module.fail_json(msg="Unknown protocol: %s" % self._protocol)
        return opener

    # check and parse http response
    def parse_response(self, response):
        if response.code != 200:
            self._module.fail_json(msg="Error status code %s: %s" % (response.status, response.reason))

        reads = response.read()
        if not len(reads):
            self._module.fail_json(msg="Empty response from Zabbix server")
        try:
            # load string to json obj
            response_obj = json.loads(reads.decode('utf-8'))
        except ValueError as e:
	    self._module.fail_json(msg="Unable to decode response: %s" % reads)

        if 'error' in response_obj:
            error_code = response_obj['error']['code']
            error_msg = response_obj['error']['message']
            error_data = response_obj['error']['data']
	    self._module.fail_json(msg="Error status code %s: %s (%s)" % (error_code, error_msg, error_data))

        return response_obj

    # check login status
    def check_auth(self):
        if not self._auth or self._auth == '':
            return False
        return True

    def get_requst_json(self, method, params):
        request = {'jsonrpc': '2.0',
                   'method': method,
                   'params': params,
                   'auth': self._auth,
                   'id': 1
        }
        return json.dumps(request)


class ZabbixAPIObjectClass(ZabbixAPI):
    def __init__(self, zabbix_api, attr_name, module):
        super(ZabbixAPIObjectClass, self).__init__(module)
        self._zabbix_api = zabbix_api
        self._attr_name = attr_name

    def __getattr__(self, name):
        def method(*opts):
            if opts.__len__():
                return self.do_call(method="%s.%s" % (self._attr_name, name), param=opts[0])
        return method

    # do call zabbix api
    def do_call(self, **args):
        if self._zabbix_api.check_auth():
            json_string = self._zabbix_api.get_requst_json(args['method'], args['param'])
            response = self._zabbix_api.do_request(json_string)
            parse_response = self._zabbix_api.parse_response(response)
            return parse_response['result']
        else:
            self._module.fail_json(msg="User %s not logged into %s" % (self._username, self._server_address))


class Host(object):
    def __init__(self, module):
        self._module = module
        self._zapi = None

    def login(self, zabbix_server, zabbix_login_user, zabbix_login_password, zabbix_access_protocol):
        try:
            if not self._zapi:
                self._zapi = ZabbixAPI(self._module)
                if not self._zapi.check_auth():
                    self._zapi.do_login(zabbix_server, zabbix_login_user, zabbix_login_password, zabbix_access_protocol)
        except Exception, e:
            self._module.fail_json(msg="Login to Zabbix server %s failed: %s" % (zabbix_server, e))

    # exist host
    def is_host_exist(self, zabbix_host_name):
        try:
            result = self._zapi.host.exists({'host': zabbix_host_name})
        except Exception, e:
            self._module.fail_json(msg=e)
        return result

    # check if host group exists
    def check_host_group_exist(self, group_names):
        for group_name in group_names:
            result = self._zapi.hostgroup.exists({'name': group_name})
            if not result:
		self._module.fail_json(msg="Hostgroup not found: %s" % group_name)
        return True

    def get_template_ids(self, template_list):
        template_ids = []
        if template_list is None or len(template_list) == 0:
            return template_ids
        for template in template_list:
            template_list = self._zapi.template.get({'output': 'extend', 'filter': {'host': template}})
            if len(template_list) < 1:
                self._module.fail_json(msg="Template not found: %s" % template)
            else:
                template_id = template_list[0]['templateid']
                template_ids.append(template_id)
        return template_ids

    def add_host(self, zabbix_host_name, group_ids, status, interfaces):
        try:
            self._zapi.host.create({'host': zabbix_host_name, 'interfaces': interfaces, 'groups': group_ids, 'status': status})
        except Exception, e:
            self._module.fail_json(msg="Failed to create host %s: %s" % (zabbix_host_name, e))

    def update_host(self, zabbix_host_name, group_ids, status, host_id, interfaces, exist_interface_list):
        try:
            self._zapi.host.update({'hostid': host_id, 'groups': group_ids, 'status': status})
            interface_list_copy = exist_interface_list
            for interface in interfaces:
                flag = False
                interface_str = interface
                for exist_interface in exist_interface_list:
                    interface_type = interface['type']
                    exist_interface_type = int(exist_interface['type'])
                    if interface_type == exist_interface_type:
                        # update
                        interface_str['interfaceid'] = exist_interface['interfaceid']
                        self._zapi.hostinterface.update(interface_str)
                        flag = True
                        interface_list_copy.remove(exist_interface)
                        break
                if not flag:
                    # add
                    interface_str['hostid'] = host_id
                    self._zapi.hostinterface.create(interface_str)
                # remove
            remove_interface_ids = []
            for remove_interface in interface_list_copy:
                interface_id = remove_interface['interfaceid']
                remove_interface_ids.append(interface_id)
            if len(remove_interface_ids) > 0:
                self._zapi.hostinterface.delete(remove_interface_ids)
        except Exception, e:
            self._module.fail_json(msg="Failed to update host %s: %s" % (zabbix_host_name, e))

    # link or clear template of the host
    def link_or_clear_template(self, zabbix_host_name, template_ids_list):

        host_id = self.get_host_id(zabbix_host_name)

        # get host's exist templates
        exist_template_ids_list = self.get_templates_by_host_id(host_id)
        exist_templates_ids = set(exist_template_ids_list)
        template_ids = set(template_ids_list)
        # get unlink and clear templates
        templates_clear = exist_templates_ids.difference(template_ids)
        templates_clear_list = list(templates_clear)
        request_str = {'hostid': host_id, 'templates': template_ids_list, 'templates_clear': templates_clear_list}
        try:
            self._zapi.host.update(request_str)
        except Exception, e:
		self._module.fail_json(msg="Failed to link template to host: %s" % e)

    # get host id by hostname
    def get_host_id(self, zabbix_host_name):
        host_list = self._zapi.host.get({'output': 'extend', 'filter': {'host': [zabbix_host_name]}})
        if len(host_list) < 1:
            self._module.fail_json(msg="Host not found: %s" % zabbix_host_name)
        else:
            host_id = host_list[0]['hostid']
            return host_id

    def get_group_ids(self, group_names):
        group_ids = []

        if self.check_host_group_exist(group_names):
            group_list = self._zapi.hostgroup.get({'output': 'extend', 'filter': {'name': group_names}})
            for group in group_list:
                group_id = group['groupid']
                group_ids.append({'groupid':group_id})
        return group_ids

    # get host's templates
    def get_templates_by_host_id(self, host_id):
        template_ids = []
        template_list = self._zapi.template.get({'output': 'extend', 'hostids': host_id})
        for template in template_list:
            template_ids.append(template['hostid'])
        return template_ids


def main():
    module = AnsibleModule(
        argument_spec=dict(
            zabbix_server=dict(required=True),
            zabbix_login_user=dict(required=True),
            zabbix_login_password=dict(required=True),
            zabbix_access_protocol=dict(required=False, default="http"),
            zabbix_host_name=dict(required=True),
            zabbix_host_groups=dict(required=True),
            zabbix_link_templates=dict(required=False),
            status=dict(required=False, default="0"),
            interfaces=dict()
        )
    )

    zabbix_server = module.params['zabbix_server']
    zabbix_login_user = module.params['zabbix_login_user']
    zabbix_login_password = module.params['zabbix_login_password']
    zabbix_access_protocol = module.params['zabbix_access_protocol']
    zabbix_host_name = module.params['zabbix_host_name']
    zabbix_host_groups = module.params['zabbix_host_groups']
    zabbix_link_templates = module.params['zabbix_link_templates']
    status = module.params['status']
    interfaces = module.params['interfaces']
    ip = ""
    for interface in interfaces:
        if interface['type'] == 1:
            ip = interface['ip']

    host = Host(module)
    # login to zabbix
    host.login(zabbix_server, zabbix_login_user, zabbix_login_password, zabbix_access_protocol)
    template_ids = host.get_template_ids(zabbix_link_templates)
    group_ids = host.get_group_ids(zabbix_host_groups)
    # check if host exist
    isHostExist = host.is_host_exist(zabbix_host_name)

    if isHostExist:
        # get host id by host name
        host_id = host.get_host_id(zabbix_host_name)
        # get exist interface
        exist_interface_list = host._zapi.hostinterface.get({'output': 'extend', 'filter': {'hostid': host_id}})
        # update host
        if len(exist_interface_list) > len(interfaces):
            host.link_or_clear_template(zabbix_host_name, template_ids)
            host.update_host(zabbix_host_name, group_ids, status, host_id, interfaces, exist_interface_list)
        else:
            host.update_host(zabbix_host_name, group_ids, status, host_id, interfaces, exist_interface_list)
            host.link_or_clear_template(zabbix_host_name, template_ids)
        module.exit_json(changed=True, result="Successfully updated host %s (%s) and linked with template '%s'" % (zabbix_host_name, ip, zabbix_link_templates))
    else:
        # create host
        host.add_host(zabbix_host_name, group_ids, status, interfaces)
        host.link_or_clear_template(zabbix_host_name, template_ids)
        module.exit_json(changed=True, result="Successfully added host %s (%s) and linked with template '%s'" % (zabbix_host_name, ip, zabbix_link_templates))

# include magic from lib/ansible/module_common.py
# <<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()

