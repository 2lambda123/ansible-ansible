#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, Epic Games, Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible. If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = '''
---
module: zabbix_host
short_description: Creates a new host or updates and existing host in Zabbix.
description:
   - When the host does not exists, a new host will be created, added to any host groups, and link in any templates.
   - When the host already exists, the host group membership will be updated, along with the template links and interfaces.
version_added: "1.6"
author: Tony Minfei Ding
requirements:
    - zabbix-api python module
options:
    server_url:
        description:
            - Url of Zabbix server, with protocol (http or https).
              C(url) is an alias for C(server_url).
        required: true
        default: null
        aliases: [ "url" ]
    login_user:
        description:
            - Zabbix user name.
        required: true
        default: null
    login_password:
        description:
            - Zabbix user password.
        required: true
        default: null
    host_names:
        description:
            - Technical name of the host.
            - If the host has already been added, the host name won't be updated.
        required: true
    host_groups:
        description:
            - List of host groups to add the host to.
        required: true
    link_templates:
        description:
            - List of templates to be linked to the host.
        required: false
        default: None
    status:
        description:
            - Status and function of the host.
            - Possible values are: 0 - (default) monitored host; 1 - unmonitored host.
        required: false
        default: "0"
    interfaces:
        description:
            - List of interfaces to be created for the host (see example).
        required: true
'''

EXAMPLES = '''
- name: Create a new host or update an existing host's info
  local_action:
    module: zabbix_host
    server_url: http://monitor.example.com
    login_user: username
    login_password: password
    host_name: ExampleHost
    host_groups:
      - Example group1
      - Example group2
    link_templates:
      - Example template1
      - Example template2
    status: 1
    interfaces:
      - type: 1
        main: 1
        useip: 1
        ip: 10.xx.xx.xx
        dns: ""
        port: 10050
      - type: 4
        main: 1
        useip: 1
        ip: 10.xx.xx.xx
        dns: ""
        port: 12345
'''


from ansible.module_utils.basic import *
try:
    from zabbix_api import ZabbixAPI
    HAS_ZABBIX_API = True
except ImportError:
    HAS_ZABBIX_API = False


class Host(object):
    def __init__(self, module, zbx):
        self._module = module
        self._zapi = zbx

    # exist host
    def is_host_exist(self, host_name):
        result = self._zapi.host.exists({'host': host_name})
        return result

    # check if host group exists
    def check_host_group_exist(self, group_names):
        for group_name in group_names:
            result = self._zapi.hostgroup.exists({'name': group_name})
            if not result:
                self._module.fail_json(msg="Hostgroup not found: %s" % group_name)
        return True

    def get_template_ids(self, template_list):
        template_ids = []
        if template_list is None or len(template_list) == 0:
            return template_ids
        for template in template_list:
            template_list = self._zapi.template.get({'output': 'extend', 'filter': {'host': template}})
            if len(template_list) < 1:
                self._module.fail_json(msg="Template not found: %s" % template)
            else:
                template_id = template_list[0]['templateid']
                template_ids.append(template_id)
        return template_ids

    def add_host(self, host_name, group_ids, status, interfaces):
        try:
            self._zapi.host.create({'host': host_name, 'interfaces': interfaces, 'groups': group_ids, 'status': status})
        except Exception, e:
            self._module.fail_json(msg="Failed to create host %s: %s" % (host_name, e))

    def update_host(self, host_name, group_ids, status, host_id, interfaces, exist_interface_list):
        try:
            self._zapi.host.update({'hostid': host_id, 'groups': group_ids, 'status': status})
            interface_list_copy = exist_interface_list
            for interface in interfaces:
                flag = False
                interface_str = interface
                for exist_interface in exist_interface_list:
                    interface_type = interface['type']
                    exist_interface_type = int(exist_interface['type'])
                    if interface_type == exist_interface_type:
                        # update
                        interface_str['interfaceid'] = exist_interface['interfaceid']
                        self._zapi.hostinterface.update(interface_str)
                        flag = True
                        interface_list_copy.remove(exist_interface)
                        break
                if not flag:
                    # add
                    interface_str['hostid'] = host_id
                    self._zapi.hostinterface.create(interface_str)
            # remove
            remove_interface_ids = []
            for remove_interface in interface_list_copy:
                interface_id = remove_interface['interfaceid']
                remove_interface_ids.append(interface_id)
            if len(remove_interface_ids) > 0:
                self._zapi.hostinterface.delete(remove_interface_ids)
        except Exception, e:
            self._module.fail_json(msg="Failed to update host %s: %s" % (host_name, e))

    # link or clear template of the host
    def link_or_clear_template(self, host_name, template_ids_list):

        host_id = self.get_host_id(host_name)

        # get host's exist templates
        exist_template_ids_list = self.get_templates_by_host_id(host_id)
        exist_templates_ids = set(exist_template_ids_list)
        template_ids = set(template_ids_list)
        # get unlink and clear templates
        templates_clear = exist_templates_ids.difference(template_ids)
        templates_clear_list = list(templates_clear)
        request_str = {'hostid': host_id, 'templates': template_ids_list, 'templates_clear': templates_clear_list}
        try:
            self._zapi.host.update(request_str)
        except Exception, e:
            self._module.fail_json(msg="Failed to link template to host: %s" % e)

    # get host id by hostname
    def get_host_id(self, host_name):
        host_list = self._zapi.host.get({'output': 'extend', 'filter': {'host': [host_name]}})
        if len(host_list) < 1:
            self._module.fail_json(msg="Host not found: %s" % host_name)
        else:
            host_id = host_list[0]['hostid']
            return host_id

    def get_group_ids(self, group_names):
        group_ids = []
        if self.check_host_group_exist(group_names):
            group_list = self._zapi.hostgroup.get({'output': 'extend', 'filter': {'name': group_names}})
            for group in group_list:
                group_id = group['groupid']
                group_ids.append({'groupid': group_id})
        return group_ids

    # get host's templates
    def get_templates_by_host_id(self, host_id):
        template_ids = []
        template_list = self._zapi.template.get({'output': 'extend', 'hostids': host_id})
        for template in template_list:
            template_ids.append(template['hostid'])
        return template_ids


def main():
    module = AnsibleModule(
        argument_spec=dict(
            server_url=dict(required=True, default=None, aliases=['url']),
            login_user=dict(required=True),
            login_password=dict(required=True),
            host_name=dict(required=True),
            host_groups=dict(required=True),
            link_templates=dict(required=False),
            status=dict(required=False, default="0"),
            interfaces=dict()
        ),
        supports_check_mode=True,
    )

    if not HAS_ZABBIX_API:
        module.fail_json(msg="Missing requried zabbix-api module (check docs or install with: pip install zabbix-api)")

    server_url = module.params['server_url']
    login_user = module.params['login_user']
    login_password = module.params['login_password']
    host_name = module.params['host_name']
    host_groups = module.params['host_groups']
    link_templates = module.params['link_templates']
    status = module.params['status']
    interfaces = module.params['interfaces']
    ip = ""
    for interface in interfaces:
        if interface['type'] == 1:
            ip = interface['ip']

    zbx = None
    # login to zabbix
    try:
        zbx = ZabbixAPI(server_url)
        zbx.login(login_user, login_password)
    except Exception, e:
        module.fail_json(msg="Failed to connect to Zabbix server: %s" % e)

    host = Host(module, zbx)
    template_ids = host.get_template_ids(link_templates)
    group_ids = host.get_group_ids(host_groups)
    # check if host exist
    isHostExist = host.is_host_exist(host_name)

    if isHostExist:
        # get host id by host name
        host_id = host.get_host_id(host_name)
        # get exist interface
        exist_interface_list = host._zapi.hostinterface.get({'output': 'extend', 'filter': {'hostid': host_id}})
        # update host
        if len(exist_interface_list) > len(interfaces):
            host.link_or_clear_template(host_name, template_ids)
            host.update_host(host_name, group_ids, status, host_id, interfaces, exist_interface_list)
        else:
            host.update_host(host_name, group_ids, status, host_id, interfaces, exist_interface_list)
            host.link_or_clear_template(host_name, template_ids)
        module.exit_json(changed=True, result="Successfully updated host %s (%s) and linked with template '%s'" % (host_name, ip, link_templates))
    else:
        # create host
        host.add_host(host_name, group_ids, status, interfaces)
        host.link_or_clear_template(host_name, template_ids)
        module.exit_json(changed=True, result="Successfully added host %s (%s) and linked with template '%s'" % (host_name, ip, link_templates))

# include magic from lib/ansible/module_common.py
# <<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
