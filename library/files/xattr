#!/usr/bin/python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: getfattr
version_added: "1.3"
short_description: retrieve file extended attributes
description:
     - Retrieves facts for a file similar to the linux/unix 'getfattr' command.
options:
  path:
    required: true
    default: None
    description:
      - The full path of the file/object to get the facts of
  name:
    required: false
    default: None
    description:
      - The name of a specific Extended attribute key to set/retrieve
  value:
    required: false
    default: None
    description:
      - The value to set the named name/key to, it automatically sets the c(operation) to 'set'
  operation:
    required: false
    default: get
    choices: [ 'get', 'set', 'dump_all', 'dump_keys', 'remove' ]
    description:
      - defines which operation you want to do.
      c(get) retrieves the current value for a c(name) (default)
      c(set) sets c(name) to c(value), default if value is set
      c(all) dumps all data
      c(keys) retrieves all names/keys
      c(remove) deletes the name/key
  follow:
    required: false
    default: yes
    choices: [ 'yes', 'no' ]
    description:
      - if yes, dereferences symlinks and sets/gets attributes on symlink target,
      otherwise acts on symlink itself.

author: Brian Coca
'''

EXAMPLES = '''
# Obtain the extended attributes  of /etc/foo.conf
- xattr: path=/etc/foo.conf

# Sets the key 'foo' to value 'bar'
- xattr: path=/etc/foo.conf name=user.foo value=bar

# Removes the key 'foo'
- xattr: path=/etc/foo.conf name=user.foo operation=remove
'''

import operator

def get_xattr_keys(module,path,follow):
    cmd = [ module.get_bin_path('getfattr', True) ]
    # prevents warning and not sure why it's not default
    cmd.append('--absolute-names')
    if not follow:
        cmd.append('-h')
    cmd.append(path)

    return _run_xattr(module,cmd)

def get_xattr(module,path,name,follow):

    cmd = [ module.get_bin_path('getfattr', True) ]
    # prevents warning and not sure why it's not default
    cmd.append('--absolute-names')
    if not follow:
        cmd.append('-h')
    if name is None:
        cmd.append('-d')
    else:
        cmd.append('-n %s' % name)
    cmd.append(path)

    return _run_xattr(module,cmd)

def set_xattr(module,path,name,value,follow):

    cmd = [ module.get_bin_path('setfattr', True) ]
    if not follow:
        cmd.append('-h')
    cmd.append('-n %s' % name)
    cmd.append('-v %s' % value)
    cmd.append(path)

    return _run_xattr(module,cmd)

def rm_xattr(module,path,name,follow):

    cmd = [ module.get_bin_path('setfattr', True) ]
    if not follow:
        cmd.append('-h')
    cmd.append('-x %s' % name)
    cmd.append(path)

    return _run_xattr(module,cmd,False)

def _run_xattr(module,cmd,check_rc=True):

    try:
        (rc, out, err) = module.run_command(' '.join(cmd), check_rc=check_rc)
    except Exception, e:
        module.fail_json(msg="%s!" % e.strerror)

    #result = {'raw': out}
    result = {}
    for line in out.splitlines():
        if re.match("^#", line) or line == "":
            pass
        elif re.search('=', line):
            (key, val) = line.split("=")
            result[key] = val.strip('"')
        else:
            result[line] = ''
    return result

def main():
    module = AnsibleModule(
        argument_spec = dict(
            path = dict(required=True),
            name = dict(required=False, default=None),
            value = dict(required=False, default=None),
            operation = dict(required=False, default='get', choices=[ 'get', 'set', 'all', 'keys', 'remove' ], type='str'),
            follow = dict(required=False, type='bool', default=True),
        ),
        supports_check_mode=True,
    )
    path = module.params.get('path')
    name = module.params.get('name')
    value = module.params.get('value')
    operation = module.params.get('operation')
    follow = module.params.get('follow')

    if not os.path.exists(path):
        module.fail_json(msg="path not found or not accessible!")


    changed=False
    msg = ""
    res = {}

    if name is None and operation in ['set','remove']:
        module.fail_json(msg="%s needs a name paramter" % operation)

    # All xattr must begin in user namespace
    if name is not None and not re.match('^user\.',name):
        name = 'user.%s' % name


    if (operation == 'set' or value is not None):
        current=get_xattr(module,path,name,follow)
        if current is None or not name in current or value != current[name]:
            if not module.check_mode:
                res = set_xattr(module,path,name,value,follow)
            changed=True
        res=current
        msg="%s set to %s" % (name, value)
    elif operation == 'remove':
        current=get_xattr(module,path,name,follow)
        if current is not None and name in current:
            if not module.check_mode:
                res = rm_xattr(module,path,name,follow)
            changed=True
        res=current
        msg="%s removed" % (name)
    elif operation == 'keys':
        res=get_xattr_keys(module,path,follow)
        msg="returning all keys"
    elif operation == 'all':
        res=get_xattr(module,path,None,follow)
        msg="dumping all"
    else:
        res=get_xattr(module,path,name,follow)
        msg="returning %s" % name

    module.exit_json(changed=changed, msg=msg, xattr=res)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
