#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

# Written by Steve Loveless <steve.loveless@gmail.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.
#
# rvm_ruby
#		state= present|absent (default: present)
#		version= [ruby version]

import traceback
import os

def run_command(cmd):
	p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	(out, err) = p.communicate()
	rc = p.returncode
	return (rc, out, err)


def get_rvm_bin():
	if os.environ.has_key('rvm_bin_path'):
		return os.environ["rvm_bin_path"]


def install_ruby(version):
	cmd = [get_rvm_bin, 'install', version]
	#cmd = ['/usr/local/rvm/bin/rvm', 'install', version]
	(rc, out, err) = run_command(cmd)
	return (rc, out, err)



def main():
	module = AnsibleModule(
		argument_spec = dict(
			state = dict(default='present', choices=['present', 'absent']),
			install_type = dict(default='single', choices=['single', 'multi']),
			ruby = dict(default=None)
		)
    )

	state = module.params['state']
	install_type = module.params['install_type']
	ruby = module.params['ruby']
	
	result = {}
	result['state'] = state
	result['install_type'] = install_type
	result['ruby'] = ruby

	rc = None
	out = ''
	err = ''

	rvm_path = get_rvm_path()

	#if rvm_path:
	#	result['changed'] = False

	if state == 'absent':
		(rc, out, err) = remove()
		if rc > 0:
			module.fail_json(msg=err, rc=rc)
	elif state == 'present':
		if not rvm_path:
			(rc, out, err) = install(install_type)

			if err:
				module.fail_json(rc=rc, msg=err, out=out)
			#else:
			#	module.exit_json(**result)
	
	if ruby:
		(rc, out, err) = install_ruby(ruby)

		if rc > 0:
			module.fail_json(rc=rc, msg=err, out=out)

	if rc is None:
		result['changed'] = False
	else:
		result['changed'] = True

	if out:
		result['stdout'] = out

	if err:
		result['stderr'] = err

	module.exit_json(**result)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
