#!/usr/bin/python

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import shlex
import base64
import syslog

try:
    import json
except ImportError:
    import simplejson as json

#
# Exit with the failed state
#
def fail_json(d):
    print json.dumps(d)
    sys.exit(1)

# ===========================================
# convert arguments of form a=b c=d
# to a dictionary

if len(sys.argv) > 1 and os.path.exists(sys.argv[1]):
    argfile = sys.argv[1]
else:
    fail_json(dict(
        failed = 1,
        msg    = "an unexpected error occurred. args file: %s does not exist" % os.path.abspath(sys.argv[1])
    ))

args = open(argfile, 'r').read()
items = shlex.split(args)
syslog.openlog('ansible-%s' % os.path.basename(__file__))
syslog.syslog(syslog.LOG_NOTICE, 'Invoked with %s' % args)

params = {}
for x in items:
    (k, v) = x.split("=")
    params[k] = v

# If the correct param is not specified, instead of printing
# python error, print something meaningful
if 'src' in params:
    source  = os.path.expanduser(params['src'])
else:
    fail_json(dict(
        failed = 1,
        msg    = "module expects the 'src' parameter. found parameter(s): %s" % ",".join(params.keys()) 
    ))

# ==========================================
 
# raise an error if there is no template metadata
if not os.path.exists(source):
    fail_json(dict(
        failed = 1,
        msg    = "file not found: %s" % source
    ))

if not os.access(source, os.R_OK):
    fail_json(dict(
        failed = 1,
        msg    = "file is not readable: %s" % source
    ))

# ==========================================

data = file(source).read()
data = base64.b64encode(data)

print json.dumps(dict(content=data, encoding='base64'))
sys.exit(0)

