#!/usr/bin/python

PIP = '/usr/local/bin/pip'
VIRTUALENV = '/usr/local/bin/virtualenv'
ENV = None


def _get_activate_path():
    return os.path.join(ENV, 'bin', 'activate')


def _ensure_virtualenv():
    if os.path.exists(_get_activate_path()):
        return 0, '', ''
    else:
        return _run('%s %s' % (VIRTUALENV, ENV))


def _is_installed(package):
    rc, status_stdout, status_stderr = _run_pip('freeze')
    return package.lower() in status_stdout.lower()


def _run_pip(cmd):
    return _run('%s %s --use-mirrors' % (PIP, cmd))


def _run(cmd):
    # returns (rc, stdout, stderr) from shell command
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE, shell=True)
    stdout, stderr = process.communicate()
    return (process.returncode, stdout, stderr)


def main():
    arg_spec = dict(
        state=dict(default='installed', choices=['installed', 'uninstalled']),
        name=dict(default=None, required=False),
        requirements=dict(default=None, required=False),
        virtualenv=dict(default=None, required=False)
    )

    module = AnsibleModule(argument_spec=arg_spec)

    global PIP
    global VIRTUALENV
    global ENV

    ENV = module.params['virtualenv']
    PIP = os.path.join(ENV, 'bin', 'pip') if ENV else PIP

    rc = 0
    err = ''
    out = ''

    state = module.params['state']
    name = module.params['name']
    requirements = module.params['requirements']
    command_map = dict(installed='install', uninstalled='uninstall -y')

    if name is None and requirements is None:
        module.fail_json(msg='You must specify a python library name via '
                             'the `name` parameter or a requirements file via '
                             'the `requirements` paramter')

    if name and requirements:
        module.fail_json(msg='Both `name` and `requirements` were specified. '
                             'Specify only the python library name via the '
                             '`name` parameter or a requirements file via the '
                             '`requirements` parameter')

    cmd = None

    if requirements:
        cmd = '%s -r %s' % (command_map[state], requirements)
        rc_pip, out_pip, err_pip = _run_pip(cmd)

        rc += rc_pip
        out += out_pip
        err += err_pip

        changed = 'Successfully installed' in out

    if name:

        rc_venv, out_venv, err_venv = _ensure_virtualenv()

        rc += rc_venv
        out += out_venv
        err += err_venv

        installed = _is_installed(name)

        changed = ((installed and state == 'uninstalled') or
                   (not installed and state == 'installed'))

        if changed:
            cmd = '%s %s' % (command_map[state], name)
            rc_pip, out_pip, err_pip = _run_pip(cmd)

            rc += rc_pip
            out += out_pip
            err += err_pip

    if rc != 0:
        module.fail_json(msg=err, cmd=cmd)

    module.exit_json(changed=changed)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
