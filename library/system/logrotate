#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2014, John Dewey <john@dewey.ws>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import os
import hashlib


DOCUMENTATION = """
---
module: logrotate
version_added: 1.6
short_description: Manages logrotate configuration files.
description:
   - Installs the logrotate package.
   - Manages logrotate configuration files.
options:
   name:
     description:
       - Name of the logrotate config file.
     required: true
   path:
     description:
       - Path of the file to manage.
     required: true
   options:
     description:
       - A dict with logrotate options.
     default:
       - daily
       - missingok
       - rotate 8
       - compress
       - delaycompress
       - copytruncate
       - notifempty
     required: false
   config_dir:
     description:
       - Directory containing config files.
     default: /etc/logrotate.d
     required: false
   state:
     description:
       - Indicate the desired state of the resource.
     choices: ['present', 'absent']
     default: present
requirements: ["logrotate"]
"""

EXAMPLES = """
# Rotate the Apache2 logs daily while keeping 12
- logrotate: name=apache2 path=/var/log/apache2/*.log
  args:
    options:
      - daily
      - rotate 12

# Rotate the Apache2 logs while adding a postrotate script
- logrotate: name=apache2 path=/var/log/apache2/*.log
  args:
    options:
      - daily
      - rotate 12
      - postrotate
      - exec script
      - endscript

# Remove the Apache2 config file
- logrotate: name=apache2 path=/var/log/apache2/*.log state=absent
"""

TEMPLATE = """
# Generated by Ansible.
# Local modifications will be overwritten.

{path}
{{
  {options}
}}
"""

def _compare_config(config, config_path):
    current_run_md5 = hashlib.md5(config).hexdigest()
    on_disk_md5 = None
    with open(config_path) as f:
        data = f.read()
        on_disk_md5 = hashlib.md5(data).hexdigest()

    return on_disk_md5 == current_run_md5

def _write_config(config, config_path):
        with open(config_path, 'w') as f:
            f.write(config)

def _get_config_path(module):
    name = module.params.get('name')
    config_dir = module.params.get('config_dir')

    return os.path.join(config_dir, name)

def _get_config(module):
    path = module.params.get('path')
    options = module.params.get('options')

    return TEMPLATE.format(path=path,
                           options='\n  '.join(options))

def _add_config(module):
    config_path = _get_config_path(module)
    config = _get_config(module)
    if os.path.isfile(config_path):
        if not _compare_config(config, config_path):
            _write_config(config, config_path)
            module.exit_json(changed=True, result="Enabled")
        module.exit_json(changed=False, result="Success")
    else:
        _write_config(config, config_path)
        module.exit_json(changed=True, result="Enabled")

def _remove_config(module):
    config_path = _get_config_path(module)
    if os.path.isfile(config_path):
        os.remove(config_path)
        module.exit_json(changed=True, result="Disabled")
    else:
        module.exit_json(changed=False, result="Success")

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name       = dict(required=True),
            path       = dict(required=True),
            options    = dict(default=['daily',
                                       'missingok',
                                       'rotate 8',
                                       'compress',
                                       'delaycompress',
                                       'copytruncate',
                                       'notifempty']),
            config_dir = dict(default='/etc/logrotate.d'),
            state      = dict(default='present', choices=['absent', 'present']),
        ),
    )

    if module.params.get('state') == 'present':
        _add_config(module)

    if module.params.get('state') == 'absent':
        _remove_config(module)

# this is magic, see lib/ansible/module_common.py
from ansible.module_utils.basic import *
main()
