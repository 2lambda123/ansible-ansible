#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, Aleksey Ovcharenko <aleksey.ovcharenko@gmail.com>
# (c) 2013, James Martin <jmartin@basho.com>
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
DOCUMENTATION = '''
---
module: ufw
short_description: This module handles Ubuntu UFW operations
description:
     - This module handles Ubuntu UFW operations

version_added: "2.0"
options:
  default_policy:
    description:
      - Change the default policy for incoming traffic.
    required: false
    choices: [ 'allow', 'deny', 'reject' ]
    default: None
  delete:
    description:
      - Delete rule instead of creation.
    required: false
    choices: [ 'yes', 'no' ]
    default: 'no'
  rule:
    description:
      - Rule command.
    required: false
    choices: [ 'enable', 'disable', 'allow', 'deny', 'reject' ]
    default: 'allow'
  from_ip:
    description:
      - Source IP address.
    required: false
    default: 'any'
  from_port:
    description:
      - Source port.
    required: false
    default: 'any'
  to_ip:
    description:
      - Destination IP address.
    required: false
    default: 'any'
  to_port:
    description:
      - Destination port.
    required: false
    default: 'any'
  proto:
    description:
      - TCP/IP protocol.
    choices: [ 'tcp', 'udp', 'ipv6' ]
    required: false
  log:
    description:
      - Toggles logging. Logged packets use the LOG_KERN syslog facility.
    choices: [ 'yes', 'no' ]
    required: false
    default: 'no'
'''

EXAMPLES = '''
# Allow everything and enable UFW
ufw: rule={{ item }}
with_items:
- allow
- enable

# Deny all access to port 53:
ufw: rule=deny to_port=53

# Allow all access to tcp port 80:
ufw: rule=allow to_port=80 proto=tcp

# Allow all access from RFC1918 networks to this host:
ufw: rule=allow from_ip={{ item }}
with_items:
- 10.0.0.0/8
- 172.16.0.0/12
- 192.168.0.0/16

# Deny access to udp port 514 from host 1.2.3.4:
ufw: rule=deny proto=udp from_ip=1.2.3.4 to_port=514

# Allow access to udp 1.2.3.4 port 5469 from 1.2.3.5 port 5469:
ufw: rule=allow proto=udp from_ip=1.2.3.5 from_port=5469 to_ip=1.2.3.4 to_port=5469

'''

import platform

def main():
    module = AnsibleModule(
        argument_spec = dict(
            default_policy = dict(default=None, required=False),
            rule = dict(default=None, required=False),
            from_ip = dict(default='any', required=False),
            from_port = dict(default='any', required=False),
            to_ip = dict(default='any', required=False),
            to_port = dict(default='any', required=False),
            proto = dict(default='any', required=False),
            delete = dict(default=False, type='bool', required=False),
            log = dict(default=False, type='bool', required=False)
        ),
        supports_check_mode = True
    )

    default_policy =  module.params.get('default_policy')
    rule =  module.params.get('rule')
    from_ip =  module.params.get('from_ip')
    from_port =  module.params.get('from_port')
    to_ip =  module.params.get('to_ip')
    to_port =  module.params.get('to_port')
    proto =  module.params.get('proto')
    log = module.params['log']
    delete = module.params['delete']

    system = platform.system()

    if "Linux" not in system:
        module.exit_json(msg="Not implemented for system %s. Only Linux (Ubuntu) is supported" % (system), changed=False)
    else:
        dist = platform.dist()
        if dist and 'Ubuntu' not in dist[0]:
            module.exit_json(msg="Not implemented for distrubution %s. Only Ubuntu is supported" % (dist[0]), changed=False)

    cmd = 'ufw'

    if module.check_mode:
        cmd = cmd + ' --dry-run'

    if default_policy:
        if rule:
            module.fail_json(msg="'default_policy' and 'rule' are mutually exclusive options.")
        else:
            if default_policy in ['allow', 'deny', 'reject']:
                cmd = cmd + ' default %s' % (default_policy)
                changed_marker = 'Default incoming policy changed to'
            else:
                module.fail_json(msg="Wrong default policy %s. See 'ansible-doc ufw' for usage." % (default_policy))

    if not default_policy:
        if not rule:
            module.fail_json(msg="You must specify either 'default_policy' or 'rule' option.")
        else:
            if rule in 'enable':
                cmd = cmd + ' -f %s' % (rule)
                changed_marker = 'Firewall is active and enabled on system startup'
            elif rule in 'disable':
                cmd = cmd + ' -f %s' % (rule)
                changed_marker = 'Firewall stopped and disabled on system startup'
            elif rule in ['allow', 'deny', 'reject']:
                changed_marker = 'Rules updated'
                if delete:
                    cmd = cmd + ' delete'

                cmd = cmd + ' %s' % (rule)
                if log:
                    cmd = cmd + ' log'
                if proto and proto not in 'any':
                    cmd = cmd + ' proto %s' % (proto)
                if from_ip and from_ip not in 'any':
                    cmd = cmd + ' from %s' % (from_ip)
                    if from_port and from_port not in 'any':
                         cmd = cmd + ' port %s' % (from_port)
                elif from_port and from_port not in 'any':
                    cmd = cmd + ' from port %s' % (from_port)

                if to_ip:
                    cmd = cmd + ' to %s' % (to_ip)
                    if to_port and to_port not in 'any':
                         cmd = cmd + ' port %s' % (to_port)
                elif to_port and to_port not in 'any':
                    cmd = cmd + ' to port %s' % (to_port)
            else:
                module.fail_json(msg="Wrong rule %s. See 'ansible-doc ufw' for usage." % (rule))

    (rc, out, err) = module.run_command(cmd)
    if rc:
        return module.fail_json(msg=err, rc=rc, cmd=cmd)
    else:
        changed = changed_marker in out
        return module.exit_json(changed=changed, msg=out.replace(changed_marker,''),
                                rc=rc, cmd=cmd)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
