#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) 2013, René Moser <mail@renemoser.net>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible. If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: hosts
author: René Moser
version_added: "1.3"
short_description: Add or remove entries in /etc/hosts
requirements:
description:
    - Manage entries in /etc/hosts
options:
    ip:
        required: true
        description:
            - IP address.
    hostnames:
        required: false
        description:
            - list of hostnames, comma separated. Required on state "present".
    state:
        required: false
        default: "present"
        choices: [ present, absent ]
        description:
            - Whether the entries should be present or not in /etc/hosts.
'''

EXAMPLES = '''
# Example hosts command from Ansible Playbooks
- hosts: ip=127.0.0.1 hostnames=localhost
- hosts: ip=127.0.0.1 hostnames=localhost state=present
- hosts: ip=192.168.1.1 state=absent
- hosts: ip=::1 hostnames=localhost,ip6-localhost,ip6-loopback
'''

import os
import tempfile
import fileinput
import syslog

class Hosts(object):

    HOSTSFILE = '/etc/hosts'

    def __init__(self, module):
        self.module             = module
        self.state              = module.params['state']
        self.ip                 = module.params['ip']
        self.hostnames          = module.params['hostnames']
        self.changed            = False
        self.ip_found           = False
        self.hostnames_found    = False
        self.found_on_line      = -1
        self.syslogging         = False


    def validateHasHostnames(self):
        err = ''
        if self.state == 'present' and not self.hostnames:
            err = "Error: No param 'hostnames' given in state 'present'."
        return err


    def log(self, msg):
        if self.syslogging:
            syslog.openlog('ansible-%s' % os.path.basename(__file__))
            syslog.syslog(syslog.LOG_NOTICE, '' + msg)


    def proceed_hosts_entries(self):

        f = open(self.HOSTSFILE,'rb')
        self.lines = f.readlines()
        f.close()

        for lineno, line in enumerate(self.lines):
            if line.startswith("#"):
                continue
            if line.startswith(self.ip):
                self.ip_found = True
                self.found_on_line = lineno
                self.log(self.ip + ' found on line.')
                hosts_file_hostname = ','.join(line.split()[1:])
                if self.hostnames == hosts_file_hostname:
                    self.log(hosts_file_hostname + ' full entry found on line.')
                    self.hostnames_found = True
                break


    def full_entry_exists(self):
        return self.ip_found and self.hostnames_found


    def ip_entry_exists(self):
        return self.ip_found


    def remove_entry(self):
        self.lines.pop(self.found_on_line)

    def add_entry(self):
        hosts_entries = self.hostnames.replace(',',' ')
        if self.ip_entry_exists():
            self.lines[self.found_on_line] = self.ip + ' ' +  hosts_entries + "\n"
        else:
            self.lines.extend(self.ip + ' ' +  hosts_entries + "\n")


    def write_changes(self):
        tmpfd, tmpfile = tempfile.mkstemp()
        f = os.fdopen(tmpfd,'wb')
        f.writelines(self.lines)
        f.close()
        self.module.atomic_move(tmpfile, self.HOSTSFILE)
        self.changed = True


def main():
    module = AnsibleModule(
        argument_spec = dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
            ip=dict(required=True, type='str'),
            hostnames=dict(default=None),
        ),
        supports_check_mode=True
    )

    result = {}
    hosts = Hosts(module)
    result['state'] = hosts.state

    err = hosts.validateHasHostnames()
    if err:
        module.fail_json(msg=err)

    hosts.proceed_hosts_entries()
    if hosts.state == 'present':
        if not hosts.full_entry_exists():
            hosts.log('Entry does not fully exist or may be missing.')
            if module.check_mode:
                module.exit_json(changed=True)
            hosts.log('Adding or replacing entry.')
            hosts.add_entry()
            hosts.write_changes()

    elif hosts.state == 'absent':
        if hosts.ip_entry_exists():
            hosts.log('IP entry exists, removing.')
            if module.check_mode:
                module.exit_json(changed=True)
            hosts.remove_entry()
            hosts.write_changes()

    result['changed'] = hosts.changed
    module.exit_json(**result)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
