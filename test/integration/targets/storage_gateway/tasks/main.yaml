---
- name: set connection information for all tasks
  set_fact:
    aws_connection_info: &aws_connection_info
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
  no_log: true

- block:

  # ============================================================
  # Prerequisites
  # ============================================================

  - name: Create VPC for use in testing
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      cidr_block: 10.22.32.0/23
      tags:
        Name: Ansible ec2_instance Testing VPC
      tenancy: default
      <<: *aws_connection_info
    register: testing_vpc

  - name: Create internet gateway for use in testing
    ec2_vpc_igw:
      vpc_id: "{{ testing_vpc.vpc.id }}"
      state: present
      <<: *aws_connection_info
    register: igw

  - name: Create testing subnet
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ testing_vpc.vpc.id }}"
      cidr: 10.22.32.0/24
      az: "{{ aws_region }}a"
      resource_tags:
        Name: "{{ resource_prefix }}-subnet"
      <<: *aws_connection_info
    register: testing_subnet

  - name: create routing rules
    ec2_vpc_route_table:
      vpc_id: "{{ testing_vpc.vpc.id }}"
      tags:
        created: "{{ resource_prefix }}-route"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      subnets:
        - "{{ testing_subnet.subnet.id }}"
      <<: *aws_connection_info

  - name: create a security group with the vpc
    ec2_group:
      name: "{{ resource_prefix }}-sg"
      description: a security group for ansible tests
      vpc_id: "{{ testing_vpc.vpc.id }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
      <<: *aws_connection_info
    register: sg

  - name: Create storage gateway instance
    ec2_instance:
      name: "{{ resource_prefix }}-test-file-gateway"
      image_id: "{{ ec2_file_ami_image[aws_region] }}"
      tags:
        TestId: "{{ resource_prefix }}"
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet.subnet.id }}"
      network:
        assign_public_ip: true
      instance_type: m4.xlarge
      volumes:
        - device_name: /dev/sdb
          ebs:
            volume_size: 150
            delete_on_termination: true
            volume_type: standard
      <<: *aws_connection_info
    register: gateway_instance

  - name: Send storage gateway activation code request
    uri:
      url: "http://{{ gateway_instance.instances[0].public_ip_address }}/?activationRegion={{ aws_region }}"
    retries: 10
    register: code_request

  - name: Extract activation code from request
    shell: echo "{{ code_request.url }}" | awk -F'[=&]' '{print $2}'
    register: activation_code

  # ============================================================
  # Parameter Tests
  # ============================================================

  - name: test with no parameters
    storage_gateway:
    register: result
    ignore_errors: true

  - name: assert failure when called with no parameters
    assert:
      that:
         - 'result.failed'
         - 'result.msg.startswith("missing required arguments:")'

  - name: test for missing parameters
    storage_gateway:
      name: 'test-gateway'
    register: result
    ignore_errors: true

  - name: assert failure when called with no parameters
    assert:
      that:
         - 'result.failed'
         - 'result.msg.startswith("missing required arguments:")'

  - name: test for missing parameters
    storage_gateway:
      name: 'test-gateway'
      activation_key: '1234567890'
    register: result
    ignore_errors: true

  - name: assert failure when called with missing parameters
    assert:
      that:
         - 'result.failed'
         - 'result.msg.startswith("missing required arguments:")'

  - name: test for wrong gateway type
    storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: present
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-6:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'WRONG_TYPE'
      <<: *aws_connection_info

  - name: assert failure when called with missing parameters
    assert:
      that:
         - 'result.failed'
         - 'result.msg.startswith("value of gateway_type must be one of:")'

  # ============================================================
  # Resource Tests
  # ============================================================

  - name: Activate file gateway for testing
    storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: present
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-6:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: result

  - name: assert changed is True
    assert:
      that:
          - result.changed
          - result.endpoint_arn is not none

  - name: No changes to file gateway
    storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: present
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-6:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: result

  - name: assert changed is True
    assert:
      that:
          - not result.changed
          - result.endpoint_arn is not none

  - name: Update file gateway
    storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: present
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-7:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: result

  - name: assert changed is True
    assert:
      that:
          - result.changed
          - result.endpoint_arn is not none

  - name: Deactivate file gateway
    storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: absent
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-6:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: result
    ignore_errors: yes

  - name: assert changed is True
    assert:
      that:
          - result.changed

  always:

  # ============================================================
  # Teardown testing resources
  # ============================================================

  - name: remove any instances in the test VPC
    ec2_instance:
      filters:
        vpc_id: "{{ testing_vpc.vpc.id }}"
      state: absent
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove ENIs
    ec2_eni_facts:
      filters:
        vpc-id: "{{ testing_vpc.vpc.id }}"
      <<: *aws_connection_info
    register: enis

  - name: delete all ENIs
    ec2_eni:
      eni_id: "{{ item.id }}"
      state: absent
      <<: *aws_connection_info
    until: removed is not failed
    with_items: "{{ enis.network_interfaces }}"
    ignore_errors: yes
    retries: 10

  - name: remove the security group
    ec2_group:
      name: "{{ resource_prefix }}-sg"
      description: a security group for ansible tests
      vpc_id: "{{ testing_vpc.vpc.id }}"
      state: absent
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove routing rules
    ec2_vpc_route_table:
      state: absent
      vpc_id: "{{ testing_vpc.vpc.id }}"
      tags:
        created: "{{ resource_prefix }}-route"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      subnets:
        - "{{ testing_subnet.subnet.id }}"
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove internet gateway
    ec2_vpc_igw:
      vpc_id: "{{ testing_vpc.vpc.id }}"
      state: absent
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove testing subnet
    ec2_vpc_subnet:
      state: absent
      vpc_id: "{{ testing_vpc.vpc.id }}"
      cidr: 10.22.32.0/24
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove the VPC
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      cidr_block: 10.22.32.0/23
      state: absent
      tags:
        Name: Ansible Testing VPC
      tenancy: default
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10
