# This file is part of Ansible

# test code for the win_psmodule module when using winrm connection
# Copyright: (c) 2018, Wojciech Sciesinski <wojciech[at]sciesinski[dot]net>
# Copyright: (c) 2017, Daniele Lazzari <lazzari@mailup.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

---
- name: install updated NuGet version
  win_shell: 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force'

- name: get the latest version of module in PowerShell Gallery
  win_shell: ((Find-Module -Name {{ powershell_module }}).Version).ToString()
  changed_when: false
  register: module_latest_version

- name: check installing module from Powershell Gallery - without version
  win_psmodule:
    name: "{{ powershell_module }}"
    state: present
  register: module_without_version_setup_1

- name: test installing module from Powershell Gallery - without version
  assert:
    that:
      - "module_without_version_setup_1 is changed"
      - "module_without_version_setup_1.output == 'Module {{ powershell_module }} installed in the version {{ module_latest_version.stdout | trim }}.'"

- name: check idempotency installing module from PowerShell Gallery - without version
  win_psmodule:
    name: "{{ powershell_module }}"
    state: present
  register: module_without_version_setup_2

- name: test idempotency installing module from PowerShell Gallery - without version
  assert:
    that:
      - "module_without_version_setup_2 is not changed"

- name: check installing module from Powershell Gallery - required_version
  win_psmodule:
    name: "{{ powershell_module }}"
    required_version: "{{ powershell_module_required_version }}"
    state: present
  register: module_required_version_setup_1

- name: test installing module from Powershell Gallery - required_version
  assert:
    that:
      - "module_required_version_setup_1 is changed"
      - "module_required_version_setup_1.output == 'Module {{ powershell_module }} installed in the version {{ powershell_module_required_version }}.'"

- name: check idempotency installing module from Powershell Gallery - required_version
  win_psmodule:
    name: "{{ powershell_module }}"
    required_version: "{{ powershell_module_required_version }}"
    state: present
  register: module_required_version_setup_2

- name: test idempotency installing module from Powershell Gallery - required_version
  assert:
    that:
      - "module_required_version_setup_2 is not changed"
      - "module_required_version_setup_2.output == 'Module {{ powershell_module }} already present in the version {{ powershell_module_required_version }}.'"

- name: check installing module from Powershell Gallery - required_version but not existing
  win_psmodule:
    name: "{{ powershell_module }}"
    required_version: "{{ powershell_module_ultra_high_version }}"
    state: present
  register: module_required_version_setup_3
  ignore_errors: yes

- name: test installing module from Powershell Gallery - required_version but not existing
  assert:
    that:
      - "module_required_version_setup_3 is not changed"
      - "module_required_version_setup_3 is failed"
      - "'Problems installing {{ powershell_module }} module: No match was found for the specified search criteria' in module_required_version_setup_3.msg"

- name: check installing module from Powershell Gallery - maximum_version
  win_psmodule:
    name: "{{ powershell_module }}"
    maximum_version: "{{ powershell_module_maximum_version_request }}"
    state: present
  register: module_maximum_version_setup_1

- name: test installing module from Powershell Gallery - maximum_version
  assert:
    that:
      - "module_maximum_version_setup_1 is changed"
      - "module_maximum_version_setup_1.output == 'Module {{ powershell_module }} installed in the version {{ powershell_module_maximum_version_result }}.'"

- name: check idempotency installing module from Powershell Gallery - maximum_version
  win_psmodule:
    name: "{{ powershell_module }}"
    maximum_version: "{{ powershell_module_maximum_version_request }}"
    state: present
  register: module_maximum_version_setup_2

- name: test idempotency installing module from Powershell Gallery - maximum_version
  assert:
    that:
      - "module_maximum_version_setup_2 is not changed"
      - "module_maximum_version_setup_2.output == 'Module {{ powershell_module }} already present in the version {{ powershell_module_maximum_version_result }}.'"

- name: check installing module from Powershell Gallery - maximum_version but not existing
  win_psmodule:
    name: "{{ powershell_module }}"
    maximum_version: "{{ powershell_module_ultra_low_version }}"
    state: present
  register: module_maximum_version_setup_3
  ignore_errors: yes

- name: test installing module from Powershell Gallery - maximum_version but not existing
  assert:
    that:
      - "module_maximum_version_setup_3 is not changed"
      - "module_maximum_version_setup_3 is failed"
      - "'Problems installing {{ powershell_module }} module: No match was found for the specified search criteria' in module_maximum_version_setup_3.msg"

- name: check installing module with allow_clobber not active
  win_psmodule:
    name: "{{ allow_clobber_module }}"
  register: fail_allow_clobber
  ignore_errors: yes

- name: test installing module with allow_clobber not active
  assert:
    that:
      - "fail_allow_clobber is failed"
      - "'The following commands are already available on this system' in fail_allow_clobber.msg"

- name: check installing module with allow_clobber active
  win_psmodule:
    name: "{{ allow_clobber_module }}"
    allow_clobber: yes
  register: ok_allow_clobber

- name: test installing module with allow_clobber active
  assert:
    that:
      - "ok_allow_clobber is changed"

- name: check installing module with skip_publisher_check not active
  win_psmodule:
    name: "{{ skip_publisher_check_module }}"
    #Adding a minimum version is required because the tested module
    # is bundled within OS
    minimum_version: "4.0.0"
  register: fail_skip_publisher_check
  ignore_errors: yes

- name: test installing module with skip_publisher_check not active
  assert:
    that:
      - "fail_skip_publisher_check is failed"
      - "'being installed is not catalog signed. Ensure that the version' in fail_skip_publisher_check.msg"

- name: check installing module with skip_publisher_check active
  win_psmodule:
    name: "{{ skip_publisher_check_module }}"
    #Adding a minimum version is required because the tested module
    # is bundled within OS
    minimum_version: "4.0.0"
    skip_publisher_check: yes
  register: ok_skip_publisher_check

- name: test installing module with skip_publisher_check active
  assert:
    that:
      - "ok_skip_publisher_check is changed"

- name: check installing module with allow_prerelease not active
  win_psmodule:
    name: "{{ allow_prerelease_module }}"
    required_version: "{{ allow_prerelease_version }}"
    allow_prerelease: no
  register: fail_allow_prerelease
  ignore_errors: yes

- name: test installing module with allow_prerelease not active
  assert:
    that:
      - "fail_allow_prerelease is failed"
      - "'parameter must be specified when using the Prerelease string in MinimumVersion' in fail_allow_prerelease.msg"

- name: check installing prerelease module with allow_prerelease active
  win_psmodule:
    name: "{{ allow_prerelease_module }}"
    required_version: "{{ allow_prerelease_version }}"
    allow_prerelease: yes
  register: ok_allow_prerelease

- name: test intstalling prerelease module with allow_prerelease active
  assert:
    that:
      - "ok_allow_prerelease is changed"

- name: check installing module with a wrong name
  win_psmodule:
    name: "{{ wrong_module }}"
    state: present
  ignore_errors: yes
  register: module_fail

- name: test installing module with a wrong name
  assert:
    that:
      - "module_fail is failed"
      - "'Problems installing {{ wrong_module }} module: No match was found for the specified search criteria' in module_fail.msg"

- name: check allow_clobber module is installed
  win_shell: (Get-Module -Name {{ allow_clobber_module }} -ListAvailable).Name
  register: allow_clobber_check

- name: test allow_clobber module is installed
  assert:
    that:
      - "allow_clobber_check.stdout_lines[0] == '{{ allow_clobber_module }}'"

- name: check uninstall powershell module - required_version
  win_psmodule:
    name: "{{ powershell_module }}"
    required_version: "{{ powershell_module_required_version }}"
    state: absent
  register: module_uninstall_required_version

- name: test powershell module uninstall - required_version
  assert:
    that:
      - "module_uninstall_required_version is changed"
      - "module_uninstall_required_version.output == 'The version {{ powershell_module_required_version }} of the module {{ powershell_module }} uninstalled.'"

- name: check uninstall powershell module - maximum_version
  win_psmodule:
    name: "{{ powershell_module }}"
    maximum_version: "{{ powershell_module_maximum_version_request }}"
    state: absent
  register: module_uninstall_maximum_version

- name: test powershell module uninstall - maximum_version
  assert:
    that:
      - "module_uninstall_maximum_version is changed"
      - "module_uninstall_maximum_version.output == 'The version {{ powershell_module_maximum_version_result }} of the module {{ powershell_module }} uninstalled.'"

- name: check uninstalling powershell module - without version
  win_psmodule:
    name: "{{ powershell_module }}"
    state: absent
  register: module_uninstall

- name: test uninstalling powershell module - without version
  assert:
    that:
      - "module_uninstall is changed"
      - "module_uninstall.output == 'The version {{ module_latest_version.stdout | trim }} of the module {{ powershell_module }} uninstalled.'"

- name: check module is uninstalled
  win_shell: (Get-Module -Name {{ powershell_module }} -ListAvailable).Name
  register: module_check

- name: test module is uninstalled
  assert:
    that:
      - "module_check.stdout == ''"

- name: check idempotency uninstalling powershell module - without version
  win_psmodule:
    name: "{{ powershell_module }}"
    state: absent
  register: module_uninstall_2

- name: test idempotency uninstalling powershell module - without version
  assert:
    that:
      - "module_uninstall_2 is not changed"
      - "module_uninstall_2.output == 'Module {{ powershell_module }} already absent.'"

- name: check installing module from Powershell Gallery - without_version 2
  win_psmodule:
    name: "{{ powershell_module }}"
    state: present
  register: module_without_version_setup_3

- name: check installing module from Powershell Gallery - required_version 2
  win_psmodule:
    name: "{{ powershell_module }}"
    required_version: "{{ powershell_module_required_version }}"
    state: present
  register: module_required_version_setup_4

- name: check installing module from Powershell Gallery - maximum_version 2
  win_psmodule:
    name: "{{ powershell_module }}"
    maximum_version: "{{ powershell_module_maximum_version_request }}"
    state: present
  register: module_maximum_version_setup_4

- name: test Powershell Gallery module setup - without_version 2, required_version 2, maximum_version 2
  assert:
    that:
      - "module_without_version_setup_3 is changed"
      - "module_without_version_setup_3.output == 'Module {{ powershell_module }} installed in the version {{ module_latest_version.stdout | trim }}.'"
      - "module_required_version_setup_4 is changed"
      - "module_required_version_setup_4.output == 'Module {{ powershell_module }} installed in the version {{ powershell_module_required_version }}.'"
      - "module_maximum_version_setup_4 is changed"
      - "module_maximum_version_setup_4.output == 'Module {{ powershell_module }} installed in the version {{ powershell_module_maximum_version_result }}.'"

- name: check uninstall powershell module - without version
  win_psmodule:
    name: "{{ powershell_module }}"
    state: absent
  register: module_uninstall_3

- name: check module is uninstalled - 2
  win_shell: (Get-Module -Name {{ powershell_module }} -ListAvailable).Name
  register: module_existance_check_2

- name: test module is no more present
  assert:
    that:
      - "module_existance_check_2.stdout == ''"

- name: check removing allow_clobber module
  win_psmodule:
    name: "{{ allow_clobber_module }}"
    state: absent
  register: module_uninstall_3

- name: test removing allow_clobber module
  assert:
    that:
      - "module_uninstall_3 is changed"

- name: check Powershell Gallery module setup - minimum_version
  win_psmodule:
    name: "{{ powershell_module }}"
    minimum_version: "{{ powershell_module_minimum_version_request }}"
    state: present
  register: module_minimum_version_setup_1

- name: test Powershell Gallery module setup - minimum_version
  assert:
    that:
      - "module_minimum_version_setup_1 is changed"
      - "module_minimum_version_setup_1.output == 'Module {{ powershell_module }} installed in the version {{ module_latest_version.stdout | trim }}.'"

- name: check idempotency reinstalling module - minimum_version
  win_psmodule:
    name: "{{ powershell_module }}"
    minimum_version: "{{ powershell_module_minimum_version_request }}"
    state: present
  register: module_minimum_version_setup_2

- name: test Powershell Gallery module setup - minimum_version
  assert:
    that:
      - "module_minimum_version_setup_2 is not changed"
      - "module_minimum_version_setup_2.output == 'Module {{ powershell_module }} already present in the version {{ module_latest_version.stdout | trim }}.'"

- name: check PowerShell Gallery module setup - other version for test minimum_version
  win_psmodule:
    name: "{{ powershell_module }}"
    required_version: "{{ powershell_module_required_version }}"
    state: present
  register: module_required_version_setup_5

- name: test PowerShell Gallery module setup - other version for test minimum_version
  assert:
    that:
      - "module_required_version_setup_5 is changed"
      - "module_required_version_setup_5.output == 'Module {{ powershell_module }} installed in the version {{ powershell_module_required_version }}.'"

- name: check uninstall powershell module - minimum_version
  win_psmodule:
    name: "{{ powershell_module }}"
    minimum_version: "{{ powershell_module_minimum_version_request }}"
    state: absent
  register: module_uninstall_minimum_version

- name: test Powershell Gallery module setup - minimum_version
  assert:
    that:
      - "module_uninstall_minimum_version is changed"
      - "module_uninstall_minimum_version.output == 'The version {{ module_latest_version.stdout | trim }} of the module {{ powershell_module }} uninstalled.'"

- name: check uninstall powershell module - minimum_version - ultra high version
  win_psmodule:
    name: "{{ powershell_module }}"
    minimum_version: "{{ powershell_module_ultra_high_version }}"
    state: absent
  register: module_uninstall_minimum_version

- name: test Powershell Gallery module setup - minimum_version - ultra high version
  assert:
    that:
      - "module_uninstall_minimum_version is not changed"
      - "module_uninstall_minimum_version.output == 'Module {{ powershell_module }} already absent.'"

- name: check fake custom ps repository registration attempt
  win_psmodule:
    name: "{{ wrong_module }}"
    repository: "{{ fake_repo_name }}"
  ignore_errors: yes
  register: fake_repo_fail

- name: test fake custom ps repository registration attempt
  assert:
    that:
      - "fake_repo_fail is failed"
      - "'The repository {{ fake_repo_name }} doesn' in fake_repo_fail.msg"
      - "'t exist.' in fake_repo_fail.msg"

- name: create repository path
  win_file:
    path: "{{custom_repo_path}}"
    state: directory

- name: check sample module is uninstalled
  win_psmodule:
    name: "{{ powershell_module }}"
    state: absent
  register: module_uninstall_4

- name: copy some module to custom repo
  win_shell: |
    $modName = "{{powershell_module}}"
    $temp = $env:Temp;

    Save-Module -Name $modName -Repository PSGallery -Path $temp | Out-Null

    $repoName = "{{custom_repo_name}}"
    $repoPath = "{{custom_repo_path}}"

    if(-not(Test-Path $repoPath)){
      New-Item -Type Directory $repoPath -Force | Out-Null
    }

    Register-PSRepository -Name $repoName -SourceLocation $repoPath -InstallationPolicy Trusted | Out-Null

    Publish-Module -Path "$temp\\$modName" -Repository $repoName -Force -Confirm:$false | Out-Null
    Get-ChildItem -Path "$repoPath\\*" | Where-Object { $_.Name -match "$modName.*.nupkg" } | ForEach { $_.Name }

  register: saved_package

- name: test sample module in custom repo
  assert:
    that:
      - "powershell_module in (saved_package.stdout_lines | last)"

- name: get the latest version of module in custom repo
  win_shell: ((Find-Module -Name {{ powershell_module }} -Repository {{custom_repo_name}}).Version).ToString()
  changed_when: false
  register: saved_module_latest_version

- name: check installing module from custom Powershell repository
  win_psmodule:
    name: "{{ powershell_module }}"
    state: present
    repository: "{{custom_repo_name}}"
  register: module_from_custom_repo

- name: test installing module from custom Powershell repository
  assert:
    that:
      - "module_from_custom_repo is changed"
      - "module_from_custom_repo.output == 'Module {{ powershell_module }} installed in the version {{ saved_module_latest_version.stdout | trim }}.'"

- name: test module was installed from custom repo
  win_shell: (Get-InstalledModule -Name "{{powershell_module}}").Repository
  register: is_package_customrepo

- name: test sample module is installed from custom repo
  assert:
    that:
      - "is_package_customrepo.stdout_lines[0] == custom_repo_name"

- name: check uninstalling saved module from custom PowerShell repository
  win_psmodule:
    name: "{{ powershell_module }}"
    state: absent
    repository: "{{custom_repo_name}}"
  register: saved_module_uninstall

- name: test uninstaling saved module from custom PowerShell repository
  assert:
    that:
      - "saved_module_uninstall is changed"
      - "saved_module_uninstall.output == 'The version {{ saved_module_latest_version .stdout | trim }} of the module {{ powershell_module }} uninstalled.'"

- name: check installing module that exists in more than one repository
  win_psmodule:
    name: "{{ powershell_module }}"
    state: present
  ignore_errors: yes
  register: install_module_existing_in_two_repositories

- name: test installing module that exists in more than one repository
  assert:
    that:
      - "install_module_existing_in_two_repositories is not changed"
      - "install_module_existing_in_two_repositories is failed"
      - "'Unable to install, multiple modules matched' in install_module_existing_in_two_repositories.msg"
      - "'Please specify a single -Repository' in install_module_existing_in_two_repositories.msg"

- name: unregister custom repo
  win_shell: 'Unregister-PSRepository {{ custom_repo_name }} -ErrorAction Ignore'
