# Test code for the ACI modules
# Copyright 2017, Jacob McGill <jmcgill298

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: test that we have an aci apic host, aci username and aci password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: ensure vlan pool does not exist for tests to kick off
  aci_encap_pool: &aci_pool_absent_static
    host: "{{ aci_hostname }}"
    username: "{{ aci_username }}"
    password: "{{ aci_password }}"
    validate_certs: no
    state: absent
    pool: anstest
    pool_type: vlan
    allocation_mode: static

- name: ensure vlan pool does not exist for tests to kick off
  aci_encap_pool: &aci_pool_absent_dynamic
    <<: *aci_pool_absent_static
    allocation_mode: dynamic

- name: create static vlan pool - check mode works
  aci_encap_pool: &aci_pool_present_static
    <<: *aci_pool_absent_static
    state: present
    descr: Ansible Test
  check_mode: yes
  register: create_check_mode

- name: create static vlan pool - creation works
  aci_encap_pool:
    <<: *aci_pool_present_static
  register: create_static

- name: create dynamic vlan pool - creation works
  aci_encap_pool: &aci_pool_present_dynamic
    <<: *aci_pool_absent_dynamic
    state: present
    descr: Ansible Test
  register: create_dynamic

- name: create static vlan pool again - idempotency works
  aci_encap_pool:
    <<: *aci_pool_present_static
  register: idempotent_static

- name: create dynamic vlan pool again - idempotency works
  aci_encap_pool:
    <<: *aci_pool_present_dynamic
  register: idempotent_dynamic

- name: update static vlan pool - update works
  aci_encap_pool:
    <<: *aci_pool_present_static
    descr: Ansible Test Change
  register: update_static

- name: update dynamic vlan pool - update works
  aci_encap_pool:
    <<: *aci_pool_present_dynamic
    descr: Ansible Test Change
  register: update_dynamic

- name: missing param - failure message works
  aci_encap_pool:
    <<: *aci_pool_present_dynamic
    allocation_mode: "{{ fake_var | default(omit) }}"
  ignore_errors: yes
  register: vlan_alloc_fail

- name: missing param - failure message works
  aci_encap_pool:
    <<: *aci_pool_present_dynamic
    pool: "{{ fake_var | default(omit) }}"
  ignore_errors: yes
  register: vlan_pool_fail

- name: missing param - failure message works
  aci_encap_pool:
    <<: *aci_pool_present_dynamic
    pool_type: "{{ fake_var | default(omit) }}"
  ignore_errors: yes
  register: vlan_pool_type_fail

- name: assertion test - present
  assert:
    that:
      - create_check_mode.changed == true
      - 'create_check_mode.config == {"fvnsVlanInstP": {"attributes": {"allocMode": "static", "descr": "Ansible Test", "name": "anstest"}}}'
      - create_static.changed == true
      - create_static.existing == []
      - create_static.config == create_check_mode.config
      - create_dynamic.changed == true
      - create_dynamic.existing == []
      - 'create_dynamic.config == {"fvnsVlanInstP": {"attributes": {"allocMode": "dynamic", "descr": "Ansible Test", "name": "anstest"}}}'
      - idempotent_static.changed == false
      - 'idempotent_static.existing == [{"fvnsVlanInstP": {"attributes": {"allocMode": "static", "descr": "Ansible Test", "dn": "uni/infra/vlanns-[anstest]-static", "name": "anstest", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
      - idempotent_static.config == {}
      - idempotent_dynamic.changed == false
      - 'idempotent_dynamic.existing == [{"fvnsVlanInstP": {"attributes": {"allocMode": "dynamic", "descr": "Ansible Test", "dn": "uni/infra/vlanns-[anstest]-dynamic", "name": "anstest", "nameAlias": "", "ownerKey": "", "ownerTag": ""}}}]'
      - idempotent_dynamic.config == {}
      - update_static.changed == true
      - 'update_static.config == {"fvnsVlanInstP": {"attributes": {"descr": "Ansible Test Change"}}}'
      - update_dynamic.changed == true
      - 'update_dynamic.config == {"fvnsVlanInstP": {"attributes": {"descr": "Ansible Test Change"}}}'
      - vlan_alloc_fail.failed == true
      - 'vlan_alloc_fail.msg == "ACI requires the \"allocation_mode\" for \"pool_type\" of \"vlan\" and \"vsan\" when the \"pool\" is provided"'
      - vlan_pool_fail.failed == true
      - 'vlan_pool_fail.msg == "state is present but the following are missing: pool"'
      - vlan_pool_type_fail.failed == true
      - 'vlan_pool_type_fail.msg == "missing required arguments: pool_type"'

- name: get all vlan pools - get class works
  aci_encap_pool:
    <<: *aci_pool_absent_static
    state: query
    pool: "{{ fake_var | default(omit) }}"
    allocation_mode: "{{ fake_var | default(omit) }}"
  register: get_all_pools

- name: get created static vlan pool - get mo works
  aci_encap_pool:
    <<: *aci_pool_absent_static
    state: query
  register: get_static_pool

- name: get created dynamic vlan pool - get mo works
  aci_encap_pool:
    <<: *aci_pool_absent_dynamic
    state: query
  register: get_dynamic_pool

- name: get created dynamic vlan pool - get mo works
  aci_encap_pool:
    <<: *aci_pool_absent_dynamic
    state: query
    pool_type: "{{ fake_var | default(omit) }}"
  ignore_errors: yes
  register: vlan_query_pool_type_fail

- name: assertion test - query
  assert:
    that:
      - get_all_pools.changed == false
      - get_all_pools.method == "GET"
      - get_all_pools.existing | length > 1
      - get_static_pool.changed == false
      - get_static_pool.method == "GET"
      - get_static_pool.existing | length == 1
      - get_static_pool.existing.0.fvnsVlanInstP.attributes.allocMode == "static"
      - get_static_pool.existing.0.fvnsVlanInstP.attributes.name == "anstest"
      - get_dynamic_pool.changed == false
      - get_dynamic_pool.method == "GET"
      - get_dynamic_pool.existing | length == 1
      - get_dynamic_pool.existing.0.fvnsVlanInstP.attributes.allocMode == "dynamic"
      - get_dynamic_pool.existing.0.fvnsVlanInstP.attributes.name == "anstest"
      - vlan_query_pool_type_fail.failed == true
      - 'vlan_query_pool_type_fail.msg == "missing required arguments: pool_type"'

- name: delete static vlan pool - deletion works
  aci_encap_pool:
    <<: *aci_pool_absent_static
  register: delete_static

- name: delete dynamic vlan pool - check mode works
  aci_encap_pool:
    <<: *aci_pool_absent_dynamic
  check_mode: yes
  register: delete_check_mode

- name: delete dynamic vlan pool - deletion works
  aci_encap_pool:
    <<: *aci_pool_absent_dynamic
  register: delete_dynamic

- name: delete static vlan pool again - idempotency works
  aci_encap_pool:
    <<: *aci_pool_absent_static
  register: idempotent_delete_static

- name: delete dynamic vlan pool again - idempotency works
  aci_encap_pool:
    <<: *aci_pool_absent_dynamic
  register: idempotent_delete_dynamic

- name: assertion test - absent
  assert:
    that:
      - delete_check_mode.changed == true
      - delete_static.changed == true
      - delete_static.method == "DELETE"
      - delete_static.existing.0.fvnsVlanInstP.attributes.allocMode == "static"
      - delete_static.existing.0.fvnsVlanInstP.attributes.name == "anstest"
      - delete_dynamic.changed == true
      - delete_dynamic.method == "DELETE"
      - delete_dynamic.existing.0.fvnsVlanInstP.attributes.allocMode == "dynamic"
      - delete_dynamic.existing.0.fvnsVlanInstP.attributes.name == "anstest"
      - idempotent_delete_static.changed == false
      - idempotent_delete_static.existing == []
      - idempotent_delete_dynamic.changed == false
      - idempotent_delete_dynamic.existing == []

- name: ensure vxlan pool does not exist for tests to kick off
  aci_encap_pool: &aci_vxlan_absent
    <<: *aci_pool_absent_static
    pool_type: vxlan
    allocation_mode: "{{ fake_var | default(omit) }}"

- name: create vxlan pool - check mode works
  aci_encap_pool: &aci_vxlan_present
    <<: *aci_vxlan_absent
    state: present
    descr: Ansible Test
  check_mode: yes
  register: create_vxlan_check_mode

- name: create vxlan pool - creation works
  aci_encap_pool:
    <<: *aci_vxlan_present
  register: create_vxlan

- name: create vxlan pool again - idempotency works
  aci_encap_pool:
    <<: *aci_vxlan_present
  register: idempotent_vxlan

- name: update vxlan pool - update works
  aci_encap_pool:
    <<: *aci_vxlan_present
    descr: Ansible Test Change
  register: update_vxlan

- name: create vxlan pool - used for query
  aci_encap_pool:
    <<: *aci_vxlan_present
    name: anstest_2
  register: create_vxlan_2

- name: assertion test - present
  assert:
    that:
      - create_vxlan_check_mode.changed == true
      - 'create_vxlan_check_mode.config == {"fvnsVxlanInstP": {"attributes": {"descr": "Ansible Test", "name": "anstest"}}}'
      - create_vxlan.changed == true
      - create_vxlan.existing == []
      - create_vxlan.config == create_vxlan_check_mode.config
      - idempotent_vxlan.changed == false
      - 'idempotent_vxlan.existing.0.fvnsVxlanInstP.attributes.name == "anstest"'
      - idempotent_vxlan.config == {}
      - update_vxlan.changed == true
      - 'update_vxlan.config == {"fvnsVxlanInstP": {"attributes": {"descr": "Ansible Test Change"}}}'
      - create_vxlan_2.changed == true

- name: get vxlan pool - get object works
  aci_encap_pool: &aci_vxlan_query
    <<: *aci_vxlan_present
    state: query
  register: query_vxlan

- name: get created static vlan pool - get class works
  aci_encap_pool:
    <<: *aci_vxlan_query
    pool: "{{ fake_var | default(omit) }}"
  register: query_vxlan_all

- name: assertion test - query
  assert:
    that:
      - query_vxlan.changed == false
      - query_vxlan.existing | length == 1
      - '"infra/vxlanns-anstest.json" in query_vxlan.url'
      - query_vxlan_all.changed == false
      - query_vxlan_all.existing | length > 1
      - '"class/fvnsVxlanInstP.json" in query_vxlan_all.url'

- name: delete vxlan pool - check mode works
  aci_encap_pool:
    <<: *aci_vxlan_absent
  check_mode: yes
  register: delete_vxlan_check_mode

- name: delete vxlan pool - deletion works
  aci_encap_pool:
    <<: *aci_vxlan_absent
  register: delete_vxlan

- name: delete vxlan pool again - idempotency works
  aci_encap_pool:
    <<: *aci_vxlan_absent
  register: delete_vxlan_idempotent

- name: missing param - failure message works
  aci_encap_pool:
    <<: *aci_vxlan_absent
    pool: "{{ fake_var | default(omit) }}"
  ignore_errors: yes
  register: delete_vxlan_pool_fail

- name: delete vxlan pool - cleanup
  aci_encap_pool:
    <<: *aci_vxlan_absent
    pool: anstest_2

- name: assertion test - absent
  assert:
    that:
      - delete_vxlan_check_mode.changed == true
      - delete_vxlan_check_mode.existing != []
      - delete_vxlan.changed == true
      - delete_vxlan.existing == delete_vxlan_check_mode.existing
      - delete_vxlan.existing.0.fvnsVxlanInstP.attributes.name == "anstest"
      - delete_vxlan_idempotent.changed == false
      - delete_vxlan_idempotent.existing == []
      - delete_vxlan_pool_fail.failed == true
      - 'delete_vxlan_pool_fail.msg == "state is absent but the following are missing: pool"'
