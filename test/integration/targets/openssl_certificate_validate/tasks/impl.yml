---
- debug:
    msg: "Executing tests with backend {{ select_crypto_backend }}"

- name: (Validate, {{select_crypto_backend}}) - Generate privatekey
  openssl_privatekey:
    path: '{{ output_dir }}/privatekey.pem'

- name: (Validate, {{select_crypto_backend}}) - Generate privatekey with password
  openssl_privatekey:
    path: '{{ output_dir }}/privatekeypw.pem'
    passphrase: hunter2
    cipher: auto
    select_crypto_backend: cryptography

- name: (Validate, {{select_crypto_backend}}) - Generate CSR (no extensions)
  openssl_csr:
    path: '{{ output_dir }}/csr_noext.csr'
    privatekey_path: '{{ output_dir }}/privatekey.pem'
    subject:
      commonName: www.example.com
    useCommonNameForSAN: no

- name: (Validate, {{select_crypto_backend}}) - Generate selfsigned certificate (no extensions)
  openssl_certificate:
    path: '{{ output_dir }}/cert_noext.pem'
    csr_path: '{{ output_dir }}/csr_noext.csr'
    privatekey_path: '{{ output_dir }}/privatekey.pem'
    provider: selfsigned
    selfsigned_digest: sha256
    select_crypto_backend: '{{ select_crypto_backend }}'

- name: (Validate, {{select_crypto_backend}}) - Assert that subject_alt_name is there (should fail)
  openssl_certificate_validate:
    path: '{{ output_dir }}/cert_noext.pem'
    subject_alt_name:
      - "DNS:example.com"
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: yes
  register: extension_missing_san

- name: (Validate, {{select_crypto_backend}}) - Assert that key_usage is there (should fail)
  openssl_certificate_validate:
    path: '{{ output_dir }}/cert_noext.pem'
    key_usage:
      - digitalSignature
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: yes
  register: extension_missing_ku

- name: (Validate, {{select_crypto_backend}}) - Assert that extended_key_usage is there (should fail)
  openssl_certificate_validate:
    path: '{{ output_dir }}/cert_noext.pem'
    extended_key_usage:
      - biometricInfo
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: yes
  register: extension_missing_eku

- assert:
    that:
      - extension_missing_san is failed
      - "'Found no subjectAltName extension' in extension_missing_san.msg"
      - extension_missing_ku is failed
      - "'Found no keyUsage extension' in extension_missing_ku.msg"
      - extension_missing_eku is failed
      - "'Found no extendedKeyUsage extension' in extension_missing_eku.msg"

- name: (Validate, {{select_crypto_backend}}) - Check private key passphrase fail 1
  openssl_certificate_validate:
    path: '{{ output_dir }}/cert_noext.pem'
    privatekey_path: '{{ output_dir }}/privatekey.pem'
    privatekey_passphrase: hunter2
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: yes
  register: passphrase_error_1

- name: (Validate, {{select_crypto_backend}}) - Check private key passphrase fail 2
  openssl_certificate_validate:
    path: '{{ output_dir }}/cert_noext.pem'
    privatekey_path: '{{ output_dir }}/privatekeypw.pem'
    privatekey_passphrase: wrong_password
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: yes
  register: passphrase_error_2

- name: (Validate, {{select_crypto_backend}}) - Check private key passphrase fail 3
  openssl_certificate_validate:
    path: '{{ output_dir }}/cert_noext.pem'
    privatekey_path: '{{ output_dir }}/privatekeypw.pem'
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: yes
  register: passphrase_error_3

- name: (Validate, {{select_crypto_backend}}) -
  assert:
    that:
      - passphrase_error_1 is failed
      - "'assphrase' in passphrase_error_1.msg or 'assword' in passphrase_error_1.msg"
      - passphrase_error_2 is failed
      - "'assphrase' in passphrase_error_1.msg or 'assword' in passphrase_error_2.msg"
      - passphrase_error_3 is failed
      - "'assphrase' in passphrase_error_1.msg or 'assword' in passphrase_error_3.msg"

- name: (Expired, {{select_crypto_backend}}) Generate privatekey
  openssl_privatekey:
    path: '{{ output_dir }}/has_expired_privatekey.pem'

- name: (Expired, {{select_crypto_backend}}) Generate CSR
  openssl_csr:
    path: '{{ output_dir }}/has_expired_csr.csr'
    privatekey_path: '{{ output_dir }}/has_expired_privatekey.pem'
    subject:
      commonName: www.example.com

- name: (Expired, {{select_crypto_backend}}) Generate expired selfsigned certificate
  openssl_certificate:
    path: '{{ output_dir }}/has_expired_cert.pem'
    csr_path: '{{ output_dir }}/has_expired_csr.csr'
    privatekey_path: '{{ output_dir }}/has_expired_privatekey.pem'
    provider: selfsigned
    selfsigned_digest: sha256
    selfsigned_not_after: "-1s"
    selfsigned_not_before: "-100s"
    select_crypto_backend: '{{ select_crypto_backend }}'
  when: select_crypto_backend == 'pyopenssl' # cryptography won't allow creating expired certificates

- name: (Expired, {{select_crypto_backend}}) Generate expired selfsigned certificate
  command: "openssl x509 -req -days -1 -in {{ output_dir }}/has_expired_csr.csr -signkey {{ output_dir }}/has_expired_privatekey.pem -out {{ output_dir }}/has_expired_cert.pem"
  when: select_crypto_backend == 'cryptography' # So we create it with 'command'

- name: "(Expired, {{select_crypto_backend}}) Check task fails because cert is expired (has_expired: false)"
  openssl_certificate_validate:
    path: "{{ output_dir }}/has_expired_cert.pem"
    has_expired: false
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: true
  register: expired_cert_check

- name: (Expired, {{select_crypto_backend}}) Ensure previous task failed
  assert:
    that: expired_cert_check is failed

- name: "(Expired, {{select_crypto_backend}}) Check expired cert check is ignored (has_expired: true)"
  openssl_certificate_validate:
    path: "{{ output_dir }}/has_expired_cert.pem"
    has_expired: true
    select_crypto_backend: '{{ select_crypto_backend }}'
  register: expired_cert_skip
