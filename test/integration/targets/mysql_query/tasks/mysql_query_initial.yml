# Test code for mysql_query module
# Copyright: (c) 2020, Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

###################
# Prepare for tests
#

# Prepare SQL script:
- name: Remove SQL script if exists
  become: yes
  file:
    path: '{{ test_script_path }}'
    state: absent
  ignore_errors: yes

- name: Create test sql script
  become: yes
  file:
    path: '{{ test_script_path }}'
    state: touch
    mode: 0644

- name: Prepare SQL script
  become: yes
  shell: 'echo "{{ item }}" >> {{ test_script_path }}'
  ignore_errors: yes
  loop:
  - 'INSERT INTO {{ test_table1 }} (id) VALUES (1), (2), (3);'

###############
# Do tests

- name: Create db {{ test_db }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    query: 'CREATE DATABASE {{ test_db }}'
  register: result

- assert:
    that:
    - result is changed
    - result.query == "CREATE DATABASE {{ test_db }}"

- name: Create table {{ test_table1 }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: 'CREATE TABLE {{ test_table1 }} (id int)'
  register: result

- assert:
    that:
    - result is changed
    - result.query == "CREATE TABLE {{ test_table1 }} (id int)"

- name: Run queries from sql script file
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    path_to_script: '{{ test_script_path }}'
  register: result

- assert:
    that: result is changed

- name: Check data in {{ test_table1 }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: 'SELECT * FROM {{ test_table1 }}'
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "SELECT * FROM {{ test_table1 }}"
    - result.rowcount == 3
    - result.query_result[0].id == 1
    - result.query_result[1].id == 2
    - result.query_result[2].id == 3

- name: Check data in {{ test_table1 }} using positional args
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: 'SELECT * FROM {{ test_table1 }} WHERE id = %s'
    positional_args:
    - 1
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "SELECT * FROM {{ test_table1 }} WHERE id = 1"
    - result.rowcount == 1
    - result.query_result[0].id == 1

- name: Check data in {{ test_table1 }} using named args
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: 'SELECT * FROM {{ test_table1 }} WHERE id = %(some_id)s'
    named_args:
      some_id: 1
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "SELECT * FROM {{ test_table1 }} WHERE id = 1"
    - result.rowcount == 1
    - result.query_result[0].id == 1

- name: Update data in {{ test_table1 }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "UPDATE {{ test_table1 }} SET id = %(new_id)s WHERE id = %(current_id)s"
    named_args:
      current_id: 1
      new_id: 0
  register: result

- assert:
    that:
    - result is changed
    - result.query == "UPDATE {{ test_table1 }} SET id = 0 WHERE id = 1"
    - result.rowcount == 1

- name: Check the prev update - row with value 1 does not exist anymore
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: 'SELECT * FROM {{ test_table1 }} WHERE id = %(some_id)s'
    named_args:
      some_id: 1
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "SELECT * FROM {{ test_table1 }} WHERE id = 1"
    - result.rowcount == 0

- name: Check the prev update - row with value - exist
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: 'SELECT * FROM {{ test_table1 }} WHERE id = %(some_id)s'
    named_args:
      some_id: 0
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "SELECT * FROM {{ test_table1 }} WHERE id = 0"
    - result.rowcount == 1

- name: Update data in {{ test_table1 }} again
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "UPDATE {{ test_table1 }} SET id = %(new_id)s WHERE id = %(current_id)s"
    named_args:
      current_id: 1
      new_id: 0
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "UPDATE {{ test_table1 }} SET id = 0 WHERE id = 1"
    - result.rowcount == 0

- name: Delete data from {{ test_table1 }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "DELETE FROM {{ test_table1 }} WHERE id = 0"
  register: result

- assert:
    that:
    - result is changed
    - result.query == "DELETE FROM {{ test_table1 }} WHERE id = 0"
    - result.rowcount == 1

- name: Check the prev delete - row with value 0 does not exist anymore
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "SELECT * FROM {{ test_table1 }} WHERE id = 0"
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "SELECT * FROM {{ test_table1 }} WHERE id = 0"
    - result.rowcount == 0

- name: Delete data from {{ test_table1 }} again
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "DELETE FROM {{ test_table1 }} WHERE id = 0"
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "DELETE FROM {{ test_table1 }} WHERE id = 0"
    - result.rowcount == 0

- name: Truncate {{ test_table1 }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "TRUNCATE {{ test_table1 }}"
  register: result

- assert:
    that:
    - result is changed
    - result.query == "TRUNCATE {{ test_table1 }}"
    - result.rowcount == 0

- name: Check the prev truncate
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "SELECT * FROM {{ test_table1 }}"
  register: result

- assert:
    that:
    - result is not changed
    - result.query == "SELECT * FROM {{ test_table1 }}"
    - result.rowcount == 0

- name: Truncate {{ test_table1 }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "RENAME TABLE {{ test_table1 }} TO {{ test_table2 }}"
  register: result

- assert:
    that:
    - result is changed
    - result.query == "RENAME TABLE {{ test_table1 }} TO {{ test_table2 }}"
    - result.rowcount == 0

- name: Check the prev rename
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "SELECT * FROM {{ test_table1 }}"
  register: result
  ignore_errors: yes

- assert:
    that:
    - result.failed == true

- name: Check the prev rename
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    login_db: '{{ test_db }}'
    query: "SELECT * FROM {{ test_table2 }}"
  register: result

- assert:
    that:
    - result.rowcount == 0

- name: Drop db {{ test_db }}
  mysql_query:
    login_unix_socket: '{{ mysql_socket }}'
    login_user: '{{ root_user }}'
    login_password: '{{ root_pass }}'
    query: 'DROP DATABASE {{ test_db }}'
  register: result

- assert:
    that:
    - result is changed
    - result.query == "DROP DATABASE {{ test_db }}"

# Clean up:
- name: Create test sql script
  become: yes
  file:
    path: '{{ test_script_path }}'
    state: absent
