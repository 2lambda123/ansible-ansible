# regular expression taken from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
- set_fact:
    version_re: '((?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)'

- name: test upgrading a collection and its dependencies
  block:
    - name: set up an upgradable collection and dependency
      command: ansible-galaxy collection install community.aws:1.0.0 amazon.aws:1.0.0 --no-deps --force
      register: result
      failed_when:
        - '"amazon.aws (1.0.0) was installed successfully" not in result.stdout_lines'
        - '"community.aws (1.0.0) was installed successfully" not in result.stdout_lines'

    - name: upgrade the collection and any dependencies
      command: ansible-galaxy collection install community.aws --upgrade
      register: result

    - assert:
        that:
          - "collection_line.endswith('was installed successfully')"
          - "dep_line.endswith('was installed successfully')"
          - "collection_version and collection_version != '1.0.0'"
          - "dep_version and dep_version != '1.0.0'"
      vars:
        # Hack to replace unicode characters for JMESPath filter https://github.com/ansible/ansible/issues/20379
        collection_line: "{{ result.stdout_lines | to_json | from_json | json_query(\"[?starts_with(@, 'community.aws')]\") | first }}"
        collection_version: "{{ collection_line | regex_search(version_re) }}"

        dep_line: "{{ result.stdout_lines | to_json | from_json | json_query(\"[?starts_with(@, 'amazon.aws')]\") | first }}"
        dep_version: "{{ dep_line | regex_search(version_re) }}"

    - name: upgrade the collection and any dependencies again
      command: ansible-galaxy collection install community.aws:>1.0.0 -U
      register: result

    - assert:
        that:
          - "\"Skipping 'community.aws' as it is already installed\" in result.stdout_lines"
          - "\"Skipping 'amazon.aws' as it is already installed\" in result.stdout_lines"

- name: test upgrading a collection with an inexact requirement and --no-deps
  block:
    - name: set up an upgradable collection and dependency
      command: ansible-galaxy collection install amazon.aws:1.0.0 community.aws:1.0.0 --no-deps --force
      register: result
      failed_when:
        - '"amazon.aws (1.0.0) was installed successfully" not in result.stdout_lines'
        - '"community.aws (1.0.0) was installed successfully" not in result.stdout_lines'

    - name: upgrade the collection with a non-specific version and --no-deps
      command: ansible-galaxy collection install community.aws:<=1.2.0 --no-deps --upgrade
      register: result

    - assert:
        that:
          - '"community.aws (1.2.0) was installed successfully" in result.stdout_lines'
          - '"amazon.aws" not in result.stdout'

    - name: upgrade the collection with the same version constraint and --no-deps again
      command: ansible-galaxy collection install community.aws:<=1.2.0 --no-deps --upgrade
      register: result

    - assert:
        that:
          - "\"Skipping 'community.aws' as it is already installed\" in result.stdout_lines"
          - '"amazon.aws" not in result.stdout'

- name: test upgrading dependencies of a collection when the collection matches the requirement already
  block:
    - name: set up an upgradable collection and dependency
      command: ansible-galaxy collection install amazon.aws:1.0.0 community.aws:1.1.0 --no-deps --force
      register: result
      failed_when:
        - '"amazon.aws (1.0.0) was installed successfully" not in result.stdout_lines'
        - '"community.aws (1.1.0) was installed successfully" not in result.stdout_lines'

    - name: upgrade the collection with an exact requirement (dep does not have an exact req)
      command: ansible-galaxy collection install community.aws:==1.1.0 --upgrade
      register: result

    - assert:
        that:
          - "\"Skipping 'community.aws' as it is already installed\" in result.stdout_lines"
          - "dep_line.endswith('was installed successfully')"
          - "dep_version != '1.0.0'"
      vars:
        dep_line: "{{ result.stdout_lines | to_json | from_json | json_query(\"[?starts_with(@, 'amazon.aws')]\") | first }}"
        dep_version: "{{ dep_line | regex_search(version_re) }}"

    - name: upgrade the collection with an exact version again
      command: ansible-galaxy collection install community.aws:==1.1.0 --upgrade
      register: result

    - assert:
        that:
          - "\"Skipping 'community.aws' as it is already installed\" in result.stdout_lines"
          - "\"Skipping 'amazon.aws' as it is already installed\" in result.stdout_lines"
