# Copyright: (c) 2019, Tobias Birkefeld (@tcraxs) <t@craxs.de>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# Preparation for tests.
- name: postgresql_sequence - create a user to be owner of a database
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_user:
    name: "{{ db_user1 }}"
    state: present
    encrypted: yes
    password: password
    role_attr_flags: LOGIN
    login_user: "{{ pg_user }}"

- name: postgresql_sequence - create DB
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_db:
    state: present
    name: "{{ db_name }}"
    owner: "{{ db_user1 }}"
    login_user: "{{ pg_user }}"

- name: postgresql_sequence - create a second user to be owner of a seqeunce
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_user:
    name: "{{ db_user2 }}"
    state: present
    encrypted: yes
    password: password
    role_attr_flags: LOGIN
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"

- name: postgresql_sequence - create a schema
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_schema:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    name: foobar_schema

####################
# Test: create sequence in checkmode
- name: postgresql_sequence - create a new seqeunce with name "foobar" in check_mode
  become_user: "{{ pg_user }}"
  become: yes
  check_mode: yes
  postgresql_sequence:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    name: foobar
  register: result

# Checks
- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.changed == True
      - result.sequence == 'foobar'
      - result.queries == ["CREATE SEQUENCE \"foobar\""]

# Real SQL check
- name: postgresql_sequence - check that the new seqeunce "foobar" not exists
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = 'foobar'"
  register: result

- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.rowcount == 0
      - result.statusmessage == 'SELECT 0'

####################
# Test: create sequence
- name: postgresql_sequence - create a new seqeunce with name "foobar"
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_sequence:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    name: foobar
  register: result

# Checks
- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.changed == True
      - result.sequence == 'foobar'
      - result.queries == ["CREATE SEQUENCE \"foobar\""]

# Real SQL check
- name: postgresql_sequence - check that the new seqeunce "foobar" exists
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = 'foobar'"
  register: result

- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.rowcount == 1

####################
# Test: drop sequence
- name: postgresql_sequence - drop a sequence called foobar
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_sequence:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    name: foobar
    state: absent
  register: result

# Checks
- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.changed == True
      - result.sequence == 'foobar'
      - result.queries == ["DROP SEQUENCE \"foobar\""]

# Real SQL check
- name: postgresql_sequence - check that the seqeunce "foobar" not exists
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = 'foobar'"
  register: result

- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.rowcount == 0

####################
# Test: create sequence with options
- name: postgresql_sequence - create an descending sequence called foobar_desc, starting at 101 and which cycle between 1 to 1000
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_sequence:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    name: foobar_desc
    increment: -1
    start: 101
    minvalue: 1
    maxvalue: 1000
    cycle: yes
  register: result

# Checks
- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.changed == True
      - result.sequence == 'foobar_desc'
      - result.increment == '-1'
      - result.minvalue == '1'
      - result.maxvalue == '1000'
      - result.cycle == 'YES'
      - result.queries == ["CREATE SEQUENCE \"foobar_desc\" INCREMENT BY -1 MINVALUE 1 MAXVALUE 1000 START WITH 101 CYCLE"]

# Real SQL check
- name: postgresql_sequence - check that the new seqeunce "foobar_desc" exists
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = 'foobar_desc'"
  register: result

- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.rowcount == 1

####################
# Test: rename a sequence
- name: postgresql_sequence - rename an existing sequence named foobar_desc to foobar_with_options
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_sequence:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    name: foobar_desc
    rename_to: foobar_with_options
  register: result

# Checks
- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.changed == True
      - result.sequence == 'foobar_desc'
      - result.newname == 'foobar_with_options'
      - result.queries == ["ALTER SEQUENCE \"foobar_desc\" RENAME TO \"foobar_with_options\""]

# Real SQL check
- name: postgresql_sequence - check that the renamed seqeunce "foobar_with_options" exists
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = 'foobar_with_options'"
  register: result

- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.rowcount == 1

####################
# Test: change schema of a sequence
- name: postgresql_sequence - change schema of an existing sequence from public to foobar_schema
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_sequence:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    name: foobar_with_options
    newschema: foobar_schema
  register: result

# Checks
- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.changed == True
      - result.sequence == 'foobar_with_options'
      - result.schema == 'public'
      - result.newschema == 'foobar_schema'
      - result.queries == ["ALTER SEQUENCE \"foobar_with_options\" SET SCHEMA \"foobar_schema\""]

# Real SQL check
- name: postgresql_sequence - check that the seqeunce "foobar_with_options" exists in new schema
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT sequence_name,sequence_schema FROM information_schema.sequences WHERE sequence_name = 'foobar_with_options' AND sequence_schema = 'foobar_schema'"
  register: result

- name: postgresql_sequence - check with assert the output
  assert:
    that:
      - result.rowcount == 1


# Cleanup
- name: postgresql_sequence - remove user
  postgresql_user:
    name: "{{ db_user2 }}"
    state: absent
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"

- name: postgresql_sequence - destroy DB
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_db:
    state: absent
    name: "{{ db_name }}"
    login_user: "{{ pg_user }}"

- name: postgresql_sequence - remove user
  postgresql_user:
    name: "{{ db_user2 }}"
    state: absent
    login_user: "{{ pg_user }}"
