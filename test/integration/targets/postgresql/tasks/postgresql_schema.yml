---

# Setup
- name: Create DB
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_db:
    state: present
    name: "{{ db_name }}"
    owner: "{{ db_user1 }}"
    login_user: "{{ pg_user }}"

- name: Create a user to be owner of a schema
  postgresql_user:
    name: "{{ db_user2 }}"
    state: present
    encrypted: yes
    password: password
    role_attr_flags: LOGIN
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"

# Test
- name: Create a new schema with name "acme"
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_schema:
    database: "{{ db_name }}"
    name: acme
    login_user: "{{ pg_user }}"
  register: result

# Checks
- assert:
    that:
      - result.changed == true
      - result.schema == 'acme'

- name: Check that the new schema "acme" exists
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'acme'"
  register: result

- assert:
    that:
      - result.rowcount == 1

# Test
- name: Drop schema "acme" with cascade
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_schema:
    database: "{{ db_name }}"
    name: acme
    state: absent
    login_user: "{{ pg_user }}"
  register: result

# Checks
- assert:
    that: result.changed == true

- name: Check that no schema "acme" exists
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'acme'"
  register: result
  ignore_errors: yes

- assert:
    that:
      - result.rowcount == 0

# Test
- name: Create a new schema "acme" with a user "{{ db_user2 }}" who will own it
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_schema:
    database: "{{ db_name }}"
    name: acme
    owner: "{{ db_user2 }}"
    login_user: "{{ pg_user }}"
  register: result

# Checks
- assert:
    that:
      - result.changed == true
      - result.schema == 'acme'

- name: Check that the new schema "acme" exists and "{{ db_user2 }}" own it
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT schema_name,schema_owner FROM information_schema.schemata WHERE schema_name = 'acme' AND schema_owner = '{{ db_user2 }}'"
  register: result

- assert:
    that:
      - result.rowcount == 1

# Test
- name: Drop schema "acme" with cascade
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_schema:
    database: "{{ db_name }}"
    name: acme
    state: absent
    cascade_drop: yes
    login_user: "{{ pg_user }}"
  register: result

# Checks
- assert:
    that: result.changed == true

- name: Check that no schema "acme" exists
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    query: "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'acme'"
  register: result
  ignore_errors: yes

- assert:
    that:
      - result.rowcount == 0

# Cleanup
- name: Remove user
  postgresql_user:
    name: "{{ db_user2 }}"
    state: absent
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"

- name: Destroy DB
  become_user: "{{ pg_user }}"
  become: yes
  postgresql_db:
    state: absent
    name: "{{ db_name }}"
    login_user: "{{ pg_user }}"
