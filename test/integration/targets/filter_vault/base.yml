- hosts: localhost
  gather_facts: false
  vars:
    dvault: '{{ "secret"|vault("test")}}'
    vaultedstring: "$ANSIBLE_VAULT;1.2;AES256;filter_default\n33370a34333734353636633035656232613935353432656132646533346233326431346232616261\n6133383034376566366261316365633931356133633337396363370a376664386236313834326561\n6338373864623763613165366636633031303739\n"
    password: test
    data: secret
    vault: !vault |
        $ANSIBLE_VAULT;1.1;AES256
        33323332333033383335333533383338333333303339333733323339333833303334333133313339
        33373339333133323331333833373335333933323338333633343338333133343334333733383334
        33333335333433383337333133303339333433353332333333363339333733363335333233303330
        3337333733353331333633313335333733373334333733320a373938666533366165653830313163
        62386564343438653437333564383664646538653364343138303831613039313232636437336530
        3438376662373764650a633366646563386335623161646262366137393635633464333265613938
        6661
    s_32: '{{(2**31-1)}}'
    s_64: '{{(2**63-1)}}'
    # TODO: make conditional on arch (do we test/care 32b?)
    salt: '{{s_64|random(seed=inventory_hostname)}}'

  tasks:
    - debug: msg={{data|vault(password, salt=salt)}}
    - name: check vaulting
      assert:
        that:
          - data|vault(password, salt=salt) == vaultedstring
          - "data|vault(password, salt=salt)|type_debug != 'AnsibleVaultEncryptedUnicode'"
          - "data|vault(password, salt=salt, wrap_object=True)|type_debug == 'AnsibleVaultEncryptedUnicode'"

    - name: check unvaulting
      assert:
        that:
          - vaultedstring|unvault(password) == data
          - vault|unvault(password) == data
