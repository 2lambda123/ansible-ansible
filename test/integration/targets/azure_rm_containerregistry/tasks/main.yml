- name: Prepare random number
  set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
  run_once: yes

- name: Create an container registry
  azure_rm_containerregistry:
    name: "acr{{ rpfx }}"
    resource_group: "{{ resource_group }}"
    location: eastus2
    state: present
    admin_user_enabled: true
    sku: Premium
    tags:
        Release: beta1
        Environment: Production
  register: output

- name: Assert the container registry instance is well created
  assert:
    that:
      - output.changed
      - output.admin_user_enabled
      - output.location == 'eastus2'
      - output.sku == 'Premium'
      - output.tags['Environment'] == 'Production'
      - output.tags['Release'] == 'beta1'
      - output.provisioning_state == 'Succeeded'
      - output.credentials['password'] is defined
      - output.credentials['password2'] is defined

- name: Update the ACR instance sku, tags and admin_user_enabled
  azure_rm_containerregistry:
    name: "acr{{ rpfx }}"
    resource_group: "{{ resource_group }}"
    location: eastus2
    admin_user_enabled: false
    sku: Standard
    tags:
        NewTag: newtag
        Release: beta1
        Environment: Production
  register: output

- name: Create second container registry (to test facts)
  azure_rm_containerregistry:
    name: "acr{{ rpfx }}sec"
    resource_group: "{{ resource_group }}"
    location: eastus2
    state: present
    admin_user_enabled: false
    sku: Premium
    tags:
        Release: beta1
        Environment: Production

- name: Assert the ACR instance is well updated
  assert:
    that:
      - output.changed == True
      - output.admin_user_enabled == False
      - output.sku == 'Standard'
      - output.tags['NewTag'] == 'newtag'
      - output.credentials | length == 0
      - output.credentials['password'] is not defined
      - output.credentials['password2'] is not defined

- name: Gather facts for single Container Registry
  azure_rm_containerregistry_facts:
    resource_group: "{{ resource_group }}"
    name: "acr{{ rpfx }}"
  register: output 

- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.registries[0]['name'] != None
      - output.registries[0]['location'] != None
      - output.registries[0]['admin_user_enabled'] != None
      - output.registries[0]['sku'] != None
      - output.registries[0]['provisioning_state'] != None
      - output.registries[0]['login_server'] != None
      - output.registries[0]['id'] != None
      - output.registries[0]['credentials'] != None

- name: Gather facts for all Container Registries in the resource group
  azure_rm_containerregistry_facts:
    resource_group: "{{ resource_group }}"
  register: output

- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.registries[0]['name'] != None
      - output.registries[0]['location'] != None
      - output.registries[0]['admin_user_enabled'] != None
      - output.registries[0]['sku'] != None
      - output.registries[0]['provisioning_state'] != None
      - output.registries[0]['login_server'] != None
      - output.registries[0]['id'] != None
      - output.registries[0]['credentials'] != None
      - output.registries[1]['name'] != None
      - output.registries[1]['location'] != None
      - output.registries[1]['admin_user_enabled'] != None
      - output.registries[1]['sku'] != None
      - output.registries[1]['provisioning_state'] != None
      - output.registries[1]['login_server'] != None
      - output.registries[1]['id'] != None
      - output.registries[1]['credentials'] != None

#
# azure_rm_containerregistrywebhook
#

- name: Create instance of Webhook -- check mode
  azure_rm_containerregistrywebhook:
    resource_group: "{{ resource_group }}"
    registry_name: acr{{ rpfx }}
    name: webhook{{ rpfx }}
    location: eastus2
    service_uri: http://serviceuri.com
    actions:
      - push
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of Webhook
  azure_rm_containerregistrywebhook:
    resource_group: "{{ resource_group }}"
    registry_name: acr{{ rpfx }}
    name: webhook{{ rpfx }}
    location: eastus2
    service_uri: http://serviceuri.com
    actions:
      - push
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create again instance of Webhook
  azure_rm_containerregistrywebhook:
    resource_group: "{{ resource_group }}"
    registry_name: acr{{ rpfx }}
    name: webhook{{ rpfx }}
    location: eastus2
    service_uri: http://serviceuri.com
    actions:
      - push
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false

- name: Delete instance of Webhook -- check mode
  azure_rm_containerregistrywebhook:
    resource_group: "{{ resource_group }}"
    registry_name: acr{{ rpfx }}
    name: webhook{{ rpfx }}
    state: absent
  check_mode: yes
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete instance of Webhook
  azure_rm_containerregistrywebhook:
    resource_group: "{{ resource_group }}"
    registry_name: acr{{ rpfx }}
    name: webhook{{ rpfx }}
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete unexisting instance of Webhook
  azure_rm_containerregistrywebhook:
    resource_group: "{{ resource_group }}"
    registry_name: acr{{ rpfx }}
    name: webhook{{ rpfx }}
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed == false

#
# clean up
#

- name: Delete first container registry
  azure_rm_containerregistry:
    name: "acr{{ resource_group | hash('md5') | truncate(7, True, '') }}"
    resource_group: "{{ resource_group }}"
    state: absent

- name: Delete second container registry
  azure_rm_containerregistry:
    name: "acr{{ resource_group | hash('md5') | truncate(7, True, '') }}sec"
    resource_group: "{{ resource_group }}"
    state: absent
