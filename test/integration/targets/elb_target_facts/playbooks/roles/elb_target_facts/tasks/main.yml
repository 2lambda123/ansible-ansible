---
  - name: set up elb_target_facts test prerequisites

    block:

    - name:
      debug: msg="********** Setting up elb_target_facts test dependencies **********"
    # ============================================================

    - name: set up aws connection info
      set_fact:
        aws_connection_info: &aws_connection_info
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          security_token: "{{ security_token }}"
          region: "{{ aws_region }}"
      no_log: yes

    # ============================================================

    - name: set up testing VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: present
        cidr_block: 20.0.0.0/16
        <<: *aws_connection_info
        tags:
          Name: "{{ resource_prefix }}-vpc"
          Description: "Created by ansible-test"
      register: vpc

    - name: set up testing internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
        <<: *aws_connection_info
      register: igw

    - name: set up testing subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.0.0/18
        az: "{{ aws_region }}a"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
        <<: *aws_connection_info
      register: subnet_1

    - name: set up testing subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.64.0/18
        az: "{{ aws_region }}b"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
        <<: *aws_connection_info
      register: subnet_2

    - name: create routing rules
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          created: "{{ resource_prefix }}-route"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
        <<: *aws_connection_info
      register: route_table

    - name: create testing security group
      ec2_group:
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        <<: *aws_connection_info
      register: sg

    - name: set up testing target group (type=instance)
      register: alb_target_group
      elb_target_group:
        name: "{{ tg_name }}-inst"
        health_check_port: 80
        protocol: http
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        target_type: instance
        # set this to 30 to test polling for changes, instead of having everything go out immediately
        deregistration_delay_timeout: 30
        tags:
          Description: "Created by {{ resource_prefix }}"
        <<: *aws_connection_info

    - name: set up testing target group (type=ip)
      register: nlb_target_group
      elb_target_group:
        name: "{{ tg_name }}-ip"
        health_check_port: 80
        protocol: tcp
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        # set this to 30 to test polling for changes, instead of having everything go out immediately
        target_type: ip 
        tags:
          Description: "Created by {{ resource_prefix }}"
        <<: *aws_connection_info

    - name: set up testing target group which will not be associated with any load balancers
      register: idle_target_group
      elb_target_group:
        name: "{{ tg_name }}-idle"
        health_check_port: 80
        protocol: tcp
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        target_type: instance 
        tags:
          Description: "Created by {{ resource_prefix }}"
        <<: *aws_connection_info

    - name: set up ec2 instance to use as a target
      ec2:
        group_id: "{{ sg.group_id }}"
        instance_type: t2.micro
        image: "{{ ec2_ami_image[aws_region] }}"
        vpc_subnet_id: "{{ subnet_2.subnet.id }}"
        instance_tags:
          Name: "{{ resource_prefix }}-inst"
        exact_count: 1
        count_tag:
          Name: "{{ resource_prefix }}-inst"
        assign_public_ip: true
        volumes: []
        wait: true
        ebs_optimized: false
        user_data: |
          #cloud-config
          package_upgrade: true
          package_update: true
          packages:
            - httpd
          runcmd:
            - "service httpd start"
            - echo "HELLO ANSIBLE" > /var/www/html/index.html
        <<: *aws_connection_info
      register: ec2

    - name: create an application load balancer
      elb_application_lb:
        name: "{{ lb_name }}-alb"
        security_groups:
          - "{{ sg.group_id }}"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}-inst"
        state: present
        <<: *aws_connection_info


    - name: create a network load balancer
      elb_network_lb:
        name: "{{ lb_name }}-nlb"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
        listeners:
          - Protocol: TCP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}-ip"
        state: present
        <<: *aws_connection_info
 
    - name: register with the ALB
      elb_target:
        target_group_name: "{{ tg_name }}-inst"
        target_id: "{{ ec2.instance_ids[0] }}"
        state: present
        target_status: "initial" 
        <<: *aws_connection_info

    - name: register with the NLB IP target group
      elb_target:
        target_group_name: "{{ tg_name }}-ip"
        target_id: "{{ ec2.instances[0].private_ip }}" 
        state: present
        target_status: "initial"
        <<: *aws_connection_info

    # ============================================================

    - debug: msg="********** Running elb_target_facts integration tests **********"

    # ============================================================
    - name: gather facts
      elb_target_facts:
        instance_id: "{{ ec2.instance_ids[0]}}"
        <<: *aws_connection_info

    - assert:
        that: "{{ alb_target_group.target_group_arn in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "found alb target group arn in ec2_tgs"

    - assert:
        that: "{{ nlb_target_group.target_group_arn in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "found nlb target group arn in ec2_tgs"

    - assert:
        that: "{{ idle_target_group.target_group_arn not in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "did not find idle target group arn in ec2_tgs"

    # tests that no cruft got in there
    - assert:
        that: (ec2_tgs | length) == 2
        msg: "only two target groups were returned" 


    - name: register with unused target group
      elb_target:
        target_group_name: "{{ tg_name }}-idle"
        target_id: "{{ ec2.instance_ids[0]}}"
        state: present
        target_status: "unused"
        <<: *aws_connection_info

    - name: gather facts again, including the idle group
      elb_target_facts:
        instance_id: "{{ ec2.instance_ids[0]}}"
        <<: *aws_connection_info

    - assert:
        that: "{{ alb_target_group.target_group_arn in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "found alb target group arn in ec2_tgs fact"

    - assert:
        that: "{{ nlb_target_group.target_group_arn in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "found nlb target group arn in ec2_tgs fact"

    - assert:
        that: "{{ idle_target_group.target_group_arn in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "found idle target group arn in ec2_tgs fact"

    - assert:
        that: (ec2_tgs | length) == 3
        msg: "only three target groups were returned" 

    - name: gather facts again, this time excluding the idle group
      elb_target_facts:
        instance_id: "{{ ec2.instance_ids[0]}}"
        get_unused_target_groups: false
        <<: *aws_connection_info

    - assert:
        that: "{{ alb_target_group.target_group_arn in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "found alb target group arn in ec2_tgs fact"

    - assert:
        that: "{{ nlb_target_group.target_group_arn in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "found nlb target group arn in ec2_tgs fact"

    - assert:
        that: "{{ idle_target_group.target_group_arn not in (ec2_tgs | map(attribute='target_group_arn')) }}"
        msg: "did not find idle target group arn in ec2_tgs fact"

    - assert:
        that: (ec2_tgs | length) == 2
        msg: "only two target groups were returned" 
        
    - set_fact:
        original_target_groups: "{{ ec2_tgs }}"

    # test the usage of this module in deregistering and reregistering instances
    - name: deregister from all target groups
      elb_target:
        target_group_arn: "{{ original_target_group.0.target_group_arn }}" 
        target_port: "{{ original_target_group.1.target_port }}"
        target_az: "{{ original_target_group.1.target_az }}"
        target_id: "{{ original_target_group.1.target_id }}"
        state: absent 
        target_status: "unused"
        target_status_timeout: 600
        <<: *aws_connection_info
      async: 1000
      poll: 0
      register: deregistration_results
      loop_control:
        loop_var: original_target_group
      with_subelements:
        - "{{ original_target_groups}}"
        - "targets"

    - name: wait for deregistration
      async_status:
          jid: "{{ each.ansible_job_id }}"
      register: job_results
      until: job_results.finished
      loop: "{{ deregistration_results.results }}"
      loop_control:
        loop_var: each
      retries: 61
      delay: 10

    - name: reregister
      elb_target:
        target_group_arn: "{{ original_target_group.0.target_group_arn }}" 
        target_port: "{{ original_target_group.1.target_port }}"
        target_az: "{{ original_target_group.1.target_az }}"
        target_id: "{{ original_target_group.1.target_id }}"
        state: present
        target_status: "healthy"
        target_status_timeout: 600
        <<: *aws_connection_info
      register: register_results
      async: 1000
      poll: 0
      loop_control:
        loop_var: original_target_group
      with_subelements:
        - "{{ original_target_groups }}"
        - "targets"

    - name: wait for registration
      async_status:
          jid: "{{ item.ansible_job_id }}"
      register: job_results
      until: job_results.finished
      loop: "{{ register_results.results }}"
      retries: 61
      delay: 10

    always:

    - name:
      debug: msg="********** Tearing down elb_target_facts test dependencies **********"

    - name: remove ec2 instance
      ec2:
        group_id: "{{ sg.group_id }}"
        instance_type: t2.micro
        image: "{{ ec2_ami_image[aws_region] }}"
        vpc_subnet_id: "{{ subnet_2.subnet.id }}"
        instance_tags:
          Name: "{{ resource_prefix }}-inst"
        exact_count: 0
        count_tag:
          Name: "{{ resource_prefix }}-inst"
        assign_public_ip: true
        volumes: []
        wait: true
        ebs_optimized: false
        <<: *aws_connection_info
      ignore_errors: true

    - name: remove application load balancer
      elb_application_lb:
        name: "{{ lb_name }}-alb"
        security_groups:
          - "{{ sg.group_id }}"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}-inst"
        state: absent
        wait: true
        wait_timeout: 200
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove NLB
      ignore_errors: true
      elb_network_lb:
        name: "{{ lb_name }}-nlb"
        state: absent
        <<: *aws_connection_info

    - name: remove testing target groups
      elb_target_group:
        name: "{{ item }}"
        health_check_port: 80
        protocol: http
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: absent
        target_type: instance
        tags:
          Description: "Created by {{ resource_prefix }}"
        wait: true
        wait_timeout: 200
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed
      with_items:
        - "{{ tg_name }}-idle"
        - "{{ tg_name }}-ip"
        - "{{ tg_name }}-inst"
      ignore_errors: true

    - name: remove testing security group
      ec2_group:
        state: absent
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove routing rules
      ec2_vpc_route_table:
        state: absent
        lookup: id
        route_table_id: "{{ route_table.route_table.id }}"
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing subnet
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.0.0/18
        az: "{{ aws_region }}a"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing subnet
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.64.0/18
        az: "{{ aws_region }}b"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: absent
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: absent
        cidr_block: 20.0.0.0/16
        tags:
          Name: "{{ resource_prefix }}-vpc"
          Description: "Created by ansible-test"
        <<: *aws_connection_info
      register: removed
      retries: 10
      until: removed is not failed

    # ============================================================
