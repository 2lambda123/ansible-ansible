- block:

    - name: Create instance with termination protection (check mode)
      ec2_instance:
        name: "{{ resource_prefix }}-instance-termination-protection-check-mode"
        image_id: "{{ ec2_ami_image }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
      check_mode: yes
      register: create_instance_check_mode_results

    - name: Check the returned value for the earlier task
      assert:
        that:
          - "{{ create_instance_check_mode_results.changed }}"
          - "{{ create_instance_check_mode_results.spec.DisableApiTermination }}"

    - name: Get info on instances created in the earlier task
      ec2_instance_info:
        filters:
          "tag:Name": "{{ resource_prefix }}-instance-termination-protection-check-mode"
      register: ec2_instance_info_results

    - name: Confirm check mode does not actually create the instance
      assert:
        that:
          - "{{ ec2_instance_info_results.instances | length }} == 0"

    - name: Create instance with termination protection
      ec2_instance:
        name: "{{ resource_prefix }}-instance-termination-protection"
        image_id: "{{ ec2_ami_image }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: yes
      register: create_instance_results

    - name: Check return values of the create instance task
      assert:
        that:
          - "{{ create_instance_results.instances | length }} > 0"
          - "'{{ create_instance_results.instances.0.state.name }}' in ['running', 'pending']"
          - "'{{ create_instance_results.spec.DisableApiTermination }}'"

    - name: Set termination protection to false for the instance
      ec2_instance:
        name: "{{ resource_prefix }}-instance-termination-protection"
        image_id: "{{ ec2_ami_image }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
      register: alter_instance_results

    - name: Terminate the instance
      ec2_instance:
        filters:
          tag:TestId: "{{ resource_prefix }}"
        state: absent

  always:
    - name: Terminate instance
      ec2_instance:
        filters:
          tag:TestId: "{{ resource_prefix }}"
        state: absent
        wait: false
      ignore_errors: yes
