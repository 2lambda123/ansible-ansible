---
# A Note about ec2 environment variable name preference:
#  - EC2_URL -> AWS_URL
#  - EC2_ACCESS_KEY -> AWS_ACCESS_KEY_ID -> AWS_ACCESS_KEY
#  - EC2_SECRET_KEY -> AWS_SECRET_ACCESS_KEY -> AWX_SECRET_KEY
#  - EC2_REGION -> AWS_REGION
#

# - include: ../../setup_ec2/tasks/common.yml module_name: ec2_instance

- block:

    # ============================================================
    - name: set connection information for all tasks
      set_fact:
        aws_connection_info: &aws_connection_info
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          security_token: "{{ security_token }}"
          region: "{{ aws_region }}"
      no_log: true

    - name: Create VPC for use in testing
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        cidr_block: 10.22.32.0/23
        tags:
          Name: Ansible ec2_instance Testing VPC
        tenancy: default
        <<: *aws_connection_info
      register: testing_vpc

    - name: Create internet gateway for use in testing
      ec2_vpc_igw:
        vpc_id: "{{ testing_vpc.vpc.id }}"
        state: present
        <<: *aws_connection_info
      register: igw

    - name: Create default subnet in zone A
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ testing_vpc.vpc.id }}"
        cidr: 10.22.32.0/24
        az: "{{ aws_region }}a"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet-a"
        <<: *aws_connection_info
      register: testing_subnet_a

    - name: Create secondary subnet in zone B
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ testing_vpc.vpc.id }}"
        cidr: 10.22.33.0/24
        az: "{{ aws_region }}b"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet-b"
        <<: *aws_connection_info
      register: testing_subnet_b

    - name: create routing rules
      ec2_vpc_route_table:
        vpc_id: "{{ testing_vpc.vpc.id }}"
        tags:
          created: "{{ resource_prefix }}-route"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ testing_subnet_a.subnet.id }}"
          - "{{ testing_subnet_b.subnet.id }}"
        <<: *aws_connection_info

    - name: create a security group with the vpc
      ec2_group:
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ testing_vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        <<: *aws_connection_info
      register: sg

    - name: Make termination-protected instance in the testing subnet created in the test VPC
      ec2_instance:
        name: "{{ resource_prefix }}-test-protected-instance-in-vpc"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: t2.micro
        <<: *aws_connection_info
      register: in_test_vpc
    - name: Try to terminate the instance
      ec2_instance:
        state: absent
        name: "{{ resource_prefix }}-test-protected-instance-in-vpc"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: t2.micro
        <<: *aws_connection_info
      register: bad_terminate
      ignore_errors: yes
    - name: Cannot terminate protected instance
      assert:
        that:
          - bad_terminate is failed
    - name: Try to terminate the instance
      ec2_instance:
        name: "{{ resource_prefix }}-test-protected-instance-in-vpc"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: false
        instance_type: t2.micro
        <<: *aws_connection_info
    - name: Try to terminate the instance
      ec2_instance:
        name: "{{ resource_prefix }}-test-protected-instance-in-vpc"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        instance_type: t2.micro
        state: absent
        <<: *aws_connection_info

    - name: Make instance in the testing subnet created in the test VPC
      ec2_instance:
        name: "{{ resource_prefix }}-test-basic-vpc-create"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        user_data: |
          #cloud-config
          package_upgrade: true
          package_update: true
        tags:
          TestId: "{{ resource_prefix }}"
          Something: else
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        instance_type: t2.micro
        <<: *aws_connection_info
      register: in_test_vpc

    - name: Try to re-make the instance, hopefully this shows changed=False
      ec2_instance:
        name: "{{ resource_prefix }}-test-basic-vpc-create"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        user_data: |
          #cloud-config
          package_upgrade: true
          package_update: true
        tags:
          TestId: "{{ resource_prefix }}"
          Something: else
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        instance_type: t2.micro
        <<: *aws_connection_info
      register: remake_in_test_vpc
    - name: "Remaking the same instance resulted in no changes"
      assert:
        that: not remake_in_test_vpc.changed
    - name: check that instance IDs match anyway
      assert:
        that: 'remake_in_test_vpc.instance_ids[0] == in_test_vpc.instance_ids[0]'

    - name: Alter it by adding tags
      ec2_instance:
        name: "{{ resource_prefix }}-test-basic-vpc-create"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        tags:
          TestId: "{{ resource_prefix }}"
          Another: thing
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        instance_type: t2.micro
        <<: *aws_connection_info
      register: add_another_tag

    - ec2_instance_facts:
        instance_ids: "{{ add_another_tag.instance_ids }}"
        <<: *aws_connection_info
      register: check_tags
    - name: "Remaking the same instance resulted in no changes"
      assert:
        that:
          - check_tags.instances[0].tags.Another == 'thing'
          - check_tags.instances[0].tags.Something == 'else'

    - name: Purge a tag
      ec2_instance:
        name: "{{ resource_prefix }}-test-basic-vpc-create"
        image_id: "{{ ec2_ami_image[aws_region] }}"
        purge_tags: true
        tags:
          TestId: "{{ resource_prefix }}"
          Another: thing
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        instance_type: t2.micro
        <<: *aws_connection_info
    - ec2_instance_facts: instance_ids={{ add_another_tag.instance_ids }}
      register: check_tags
    - name: "Remaking the same instance resulted in no changes"
      assert:
        that:
          - "'Something' not in check_tags.instances[0].tags"

    - name: Terminate instance
      ec2_instance:
        filters:
          tag:TestId: "{{ resource_prefix }}"
        state: absent
        <<: *aws_connection_info
      register: result
    - assert:
        that: result.changed
    - name: Terminate instance
      ec2_instance:
        instance_ids: "{{ in_test_vpc.instance_ids }}"
        state: absent
        <<: *aws_connection_info
      register: result
    - assert:
        that: not result.changed

    - name: check that subnet-default public IP rule was followed
      assert:
        that:
          - in_test_vpc.instances[0].public_dns_name == ""
          - in_test_vpc.instances[0].private_ip_address.startswith("10.22.33")
          - in_test_vpc.instances[0].subnet_id == testing_subnet_b.subnet.id
    - name: check that tags were applied
      assert:
        that:
          - in_test_vpc.instances[0].tags.Name.startswith(resource_prefix)
          - in_test_vpc.instances[0].state.name == 'running'

    - name: Make instance in a default subnet of the VPC
      ec2_instance:
        name: "{{ resource_prefix }}-test-default-vpc"
        network:
          assign_public_ip: true
        image_id: "{{ ec2_ami_image[aws_region] }}"
        tags:
          TestId: "{{ resource_prefix }}"
        user_data: |
          #cloud-config
          package_upgrade: true
          package_update: true
          packages:
            - git
        security_groups: "{{ sg.group_id }}"
        instance_type: t2.micro
        <<: *aws_connection_info
      register: in_default_vpc
    - name: Terminate instance
      ec2:
        instance_ids: "{{ in_default_vpc.instance_ids }}"
        state: absent
        <<: *aws_connection_info


    # ============================================================

  always:
    - name: remove any instances in the test VPC
      ec2_instance:
        filters:
          vpc_id: "{{ testing_vpc.vpc.id }}"
        state: absent
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
    - name: remove the security group
      ec2_group:
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ testing_vpc.vpc.id }}"
        state: absent
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10

    - name: remove routing rules
      ec2_vpc_route_table:
        state: absent
        vpc_id: "{{ testing_vpc.vpc.id }}"
        tags:
          created: "{{ resource_prefix }}-route"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ testing_subnet_a.subnet.id }}"
          - "{{ testing_subnet_b.subnet.id }}"
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10

    - name: remove internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ testing_vpc.vpc.id }}"
        state: absent
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10

    - name: remove subnet A
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ testing_vpc.vpc.id }}"
        cidr: 10.22.32.0/24
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10

    - name: remove subnet B
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ testing_vpc.vpc.id }}"
        cidr: 10.22.33.0/24
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10

    - name: remove the VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        cidr_block: 10.22.32.0/23
        state: absent
        tags:
          Name: Ansible Testing VPC
        tenancy: default
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
