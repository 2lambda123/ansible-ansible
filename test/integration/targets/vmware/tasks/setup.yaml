---

- when: vcsim is defined
  block:
  - name: start vcsim
    uri:
      url: http://{{ vcsim }}:5000/spawn?cluster=2
    register: vcsim_instance
  
  - set_fact:
      vcenter_hostname: "{{ vcsim }}"
      vcenter_username: "{{ vcsim_instance.json.username }}"
      vcenter_password: "{{ vcsim_instance.json.password }}"
  
  - debug:
      var: vcsim_instance
  
  - name: get a list of hosts from vcsim
    uri:
      url: http://{{ vcsim }}:5000/govc_find?filter=H
    register: hosts
  
  - name: get a host
    set_fact:
      host1: "{{ hosts.json[0] | basename }}"
  
  - debug: var=host1
  
  - name: get a list of Cluster from vcsim
    uri:
      url: http://{{ vcsim }}:5000/govc_find?filter=CCR
    register: clusters
  
  - name: get a cluster
    set_fact:
      ccr1: "{{ clusters.json[0] | basename }}"
  
  - debug: var=ccr1
  
  - name: get a list of datacenter
    uri:
      url: http://{{ vcsim }}:5000/govc_find?filter=DC
    register: datacenters
  
  - name: get a datacenter
    set_fact:
      dc1: "{{ datacenters.json[0] | basename }}"
  
  - debug: var=dc1
  
  - name: get a list of Datastores from vcsim
    uri:
      url: http://{{ vcsim }}:5000/govc_find?filter=D
    register: datastores
  - debug: var=datastores
  
  - set_fact:
      ds1: "{{ datastores['json'][0]|basename }}"
  - debug: var=ds1
  
  - name: get a list of distributed vswitch from vcsim after adding
    uri:
      url: "{{ 'http://' + vcsim + ':5000/govc_find?filter=DVS' }}"
    register: new_dvs_0001
  
  - set_fact:
      switch1: "{{ new_dvs_0001['json'][0] | basename }}"
  
  - name: get a list of VMS from vcsim
    uri:
      url: http://{{ vcsim }}:5000/govc_find?filter=VM
    register: vmlist
  
  - name: get a guest
    set_fact:
      guest1: "{{ vmlist.json[0]|basename }}"
      vm1: "{{ vmlist['json'][0] }}"
  
  - name: get a list of resource pools from vcsim
    uri:
      url: http://{{ vcsim }}:5000/govc_find?filter=RP
    register: res_pools

- when: vcsim is not defined
  block:
  - name: Create Datacenter
    vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ dc1 }}'
      state: present
      validate_certs: no
  
  # fetch_ssl_thumbprint needs to be disabled because the host only exists in vcsim
  - name: Create Cluster
    vmware_cluster:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ dc1 }}'
      cluster_name: '{{ ccr1 }}'
      validate_certs: no    
