$parent_folder = '{{win_output_dir}}\win_find'
$small_text = "a"
$blank_text = "this is filler text`r`n"
$large_text = "abcdefghijklmnopqrstuvwxyz" * 10000
$base_date = Get-Date -Year 2016 -Month 11 -Day 1 -Hour 7 -Minute 10 -Second 5 -Millisecond 0
$adate = $base_date
$mdate = $base_date
$cdate = $base_date

$objects = @(
    @{'type'='folder'; 'path'="$parent_folder\nested"}
    @{'type'='folder'; 'path'="$parent_folder\single"}
    @{'type'='folder'; 'path'="$parent_folder\link-dest"}
    @{'type'='folder'; 'path'="$parent_folder\link-dest\sub-link"}
    @{'type'='folder'; 'path'="$parent_folder\hard-link-dest"}
    @{'type'='folder'; 'path'="$parent_folder\junction-link-dest"}
    @{'type'='folder'; 'path'="$parent_folder\broken-link-dest"}
    @{'type'='folder'; 'path'="$parent_folder\nested\sub-nest"}
    @{'type'='folder'; 'path'="$parent_folder\shared"}
    @{'type'='folder'; 'path'="$parent_folder\shared\folder"; "shared"="folder-share"}
    @{'type'='folder'; 'path'="$parent_folder\hidden"; "hidden"=$true}
    @{'type'='folder'; 'path'="$parent_folder\date"; "hidden"=$true}
    @{'type'='file'; 'path'="$parent_folder\nested\file.ps1"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\nested\test.ps1"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\nested\out.log"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\nested\archive.log"; 'text'=$blank_text; "archive"=$true}
    @{'type'='file'; 'path'="$parent_folder\nested\sub-nest\test.ps1"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\nested\sub-nest\readonly.txt"; 'text'=$blank_text; "readonly"=$true}
    @{'type'='file'; 'path'="$parent_folder\link-dest\link.ps1"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\single\large.ps1"; 'text'=$large_text}
    @{'type'='file'; 'path'="$parent_folder\single\small.ps1"; 'text'=$small_text}
    @{'type'='file'; 'path'="$parent_folder\single\test.ps1"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\single\hidden.ps1"; 'text'=$blank_text; "hidden"=$true}
    @{'type'='file'; 'path'="$parent_folder\date\new.ps1"; 'text'='random text for new date';}
    @{'type'='file'; 'path'="$parent_folder\date\old.ps1"; 'text'='random text for old date';}
    @{'type'='file'; 'path'="$parent_folder\single\out_20161101-091005.log"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\hidden\out_20161101-091005.log"; 'text'=$blank_text}
    @{'type'='file'; 'path'="$parent_folder\hard-link-dest\file-abc.log"; 'text'=$blank_text}
    @{'type'='link'; 'path'="$parent_folder\nested\link"; 'target'="$parent_folder\link-dest"; 'link_type'='soft'},
    @{'type'='link'; 'path'="$parent_folder\broken-link"; 'target'="$parent_folder\broken-link-dest"; 'link_type'='soft'},
    @{'type'='link'; 'path'="$parent_folder\hard-link-dest\hard-link.log"; 'target'="$parent_folder\hard-link-dest\file-abc.log"; 'link_type'='hard'},
    @{'type'='link'; 'path'="$parent_folder\junction-link"; 'target'="$parent_folder\junction-link-dest"; 'link_type'='junction'}
)

Function Create-Folder($path) {
    New-Item -Path $path -ItemType Directory | Out-Null
    $folder = Get-Item -Path $path
}

Function Create-File($path, $text) {
    New-Item -Path $path -ItemType File | Out-Null
    Set-Content -Path $path -Value $text | Out-Null
    $file = Get-Item -Path $path
}

Function Create-Link($path, $target, $type) {
    If (Test-Path $path) {
        cmd.exe /c rmdir $path        
    }

    If ($type -eq 'soft') {
        cmd.exe /c mklink /D $path $target
    } ElseIf ($type -eq 'hard') {
        cmd.exe /c mklink /H $path $target
    } ElseIf ($type -eq 'junction') {
        cmd.exe /c mklink /J $path $target
    }
}

Function Delete($file) {
    $filepath = $file.FullName
    If ( $file.Attributes.ToString().contains("ReparsePoint") ) {
        cmd.exe /c rmdir $filepath
    } ElseIf ( $file.PsIsContainer ) {
        Delete-Directory -directory $filepath | Out-Null
    } Else {
        Remove-Item -Force $filepath | Out-Null
    }
}

Function Delete-Directory($directory) {
    ForEach ( $file in Get-ChildItem $directory ) {
        Delete -file $file
    }
    Remove-Item -Recurse -Force $directory | Out-Null
}

If (Test-Path $parent_folder) {
    Delete-Directory -directory $parent_folder
}

foreach ($object in $objects) {
    If ($object.type -eq 'folder') {
        Create-Folder -path $object.path
        If ($object.shared -ne $null) {
            Remove-SmbShare -Force -Name $object.shared -ErrorAction 'SilentlyContinue' | Out-Null
            New-SmbShare -Name $object.shared -Path $object.path | Out-Null
        }
    } ElseIf ($object.type -eq 'file') {
        Create-File -path $object.path -text $object.text
    } ElseIf ($object.type -eq 'link') {
        Create-Link -path $object.path -target $object.target -type $object.link_type
    }


    If ($object.type -eq 'folder' -or $object.type -eq 'file') {
        $attributes = ((Get-Item $object.path).Attributes) -split ','
        If ($object.hidden -ne $null -and $attributes -notcontains 'Hidden') {
            $attributes += 'Hidden'
        }
        If ($object.readonly -ne $null -and $attributes -notcontains 'ReadOnly') {
            $attributes += 'ReadOnly'
        }
        If ($object.archive -ne $null -and $attributes -notcontains 'Archive') {
            $attributes += 'Archive'
        }

        (Get-Item $object.path).Attributes = ($attributes -join ',')
    }
}

foreach ($file in (Get-ChildItem -Path $parent_folder -Recurse -Force)) {
    If ($file.Attributes -like '*ReadOnly*') {
        Set-ItemProperty $file.FullName -Name IsReadOnly -Value $false
        $file.CreationTime = $cdate
        $file.LastAccessTime = $adate
        $file.LastWriteTime = $mdate
        Set-ItemProperty $file.FullName -Name IsReadOnly -Value $true       
    } ElseIf ($file.Attributes -notlike '*ReparsePoint*') {
        $file.CreationTime = $cdate
        $file.LastAccessTime = $adate
        $file.LastWriteTime = $mdate
    }
}

$date_file = Get-Item "$parent_folder\date\new.ps1"
$date_file.CreationTime = Get-Date
$date_file.LastAccessTime = Get-Date
$date_file.LastWriteTime = Get-Date

If (Test-Path "$parent_folder\broken-link-dest") {
    Remove-Item "$parent_folder\broken-link-dest" -Force -Recurse | Out-Null
}