---
# Create a local user account with a home directory
- name: Create local user with a home directory
  user:
    name: ansibulluser2
    state: present
    local: yes
    home: "{{ user_home_prefix[ansible_facts.system] }}/ansibulluser2"
  register: create_home_ownership_check_local_1
  tags:
    - user_test_local_ownership_check

- name: Check the created home directory
  stat:
    path: "{{ user_home_prefix[ansible_facts.system] }}/ansibulluser2"
  register: create_home_ownership_check_local_stat_1
  tags:
    - user_test_local_ownership_check

- name: validate that ownership is correct
  assert:
    that:
      - create_home_ownership_check_local_stat_1.stat.uid == create_home_ownership_check_local_1.uid
      - create_home_ownership_check_local_stat_1.stat.gr_name == default_user_group[ansible_facts.distribution] | default('ansibulluser2')

  tags:
    - user_test_local_ownership_check

- name: Cleanup test account
  user:
    name: ansibulluser2
    home: "{{ user_home_prefix[ansible_facts.system] }}/ansibulluser2"
    state: absent
    local: yes
    remove: yes
  tags:
    - user_test_local_ownership_check

# Create a user account with a home directory with a non existing parent
- name: Create user with a home directory with a non existing parent
  user:
    name: ansibulluser2
    state: present
    home: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/ansibulluser2"
  register: create_home_ownership_check_local_3
  tags:
    - user_test_local_ownership_check

- name: Check the created home directory
  stat:
    path: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/ansibulluser2"
  register: create_home_ownership_check_local_stat_3
  tags:
    - user_test_local_ownership_check

- name: validate that ownership is correct
  assert:
    that:
      - create_home_ownership_check_local_stat_3.stat.uid == create_home_ownership_check_local_3.uid
      - create_home_ownership_check_local_stat_3.stat.gr_name == default_user_group[ansible_facts.distribution] | default('ansibulluser2')

  tags:
    - user_test_local_ownership_check

- name: Cleanup test account
  user:
    name: ansibulluser2
    home: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/ansibulluser2"
    state: absent
    remove: yes
  tags:
    - user_test_local_ownership_check

- name: Remove testing dir
  file:
    path: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/"
    state: absent
  tags:
    - user_test_local_ownership_check

# Create a local user account with a home directory with a non existing parent
- name: Create local user with a home directory with a non existing parent
  user:
    name: ansibulluser2
    state: present
    local: yes
    home: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/ansibulluser2"
  register: create_home_ownership_check_local_2
  tags:
    - user_test_local_ownership_check

- name: Check the created home directory
  stat:
    path: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/ansibulluser2"
  register: create_home_ownership_check_local_stat_2
  tags:
    - user_test_local_ownership_check

- name: validate that ownership is correct
  assert:
    that:
      - create_home_ownership_check_local_stat_2.stat.uid == create_home_ownership_check_local_2.uid
      - create_home_ownership_check_local_stat_2.stat.gr_name == default_user_group[ansible_facts.distribution] | default('ansibulluser2')

  tags:
    - user_test_local_ownership_check

- name: Cleanup test account
  user:
    name: ansibulluser2
    home: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/ansibulluser2"
    state: absent
    local: yes
    remove: yes
  tags:
    - user_test_local_ownership_check

- name: Remove testing dir
  file:
    path: "{{ user_home_prefix[ansible_facts.system] }}/in2deep/"
    state: absent
  tags:
    - user_test_local_ownership_check

