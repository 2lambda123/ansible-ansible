- name: Set mongodb_user user for redhat
  set_fact:
    mongodb_user: "mongod"
  when: ansible_os_family == "RedHat"

- name: Create directories for mongod processes
  file:
    path: "{{ remote_tmp_dir }}/mongod{{ item }}"
    state: directory
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_user }}"
    mode: 0755
    recurse: yes
  with_items: "{{ mongodb_nodes }}"

- name: Ensure {{ remote_tmp_dir }}/config dir exists
  file:
    path: "{{ remote_tmp_dir }}/config"
    state: directory
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_user }}"
    mode: 0755

- name: Create keyfile
  copy:
    dest: "{{ remote_tmp_dir }}/my.key"
    content: |
      fd2CUrbXBJpB4rt74A6F
    owner: "{{ mongodb_user }}"
    group: "{{ mongodb_user }}"
    mode: 0600
  when: mongod_auth == True

- name: generate openssl keys
  openssl_privatekey:
    path: "{{ remote_tmp_dir }}/{{item}}_key.pem"
  with_items:
    - ca
    - mongo
    - mongo-client
  when: mongo_ssl == True

- name: Generate CSRs
  openssl_csr:
    path: "{{ remote_tmp_dir }}/{{item}}.csr"
    privatekey_path: "{{ remote_tmp_dir }}/{{item}}_key.pem"
    country_name: US
    organization_name: Ansible
    email_address: integration-tests@ansible.com
    common_name: localhost"
  with_items:
    - ca
    - mongo
    - mongo-client
  when: mongo_ssl == True

- name: Generate a Self Signed OpenSSL CA certificate
  openssl_certificate:
    path: "{{ remote_tmp_dir }}/ca.pem"
    privatekey_path: "{{ remote_tmp_dir }}/ca_key.pem"
    csr_path: "{{ remote_tmp_dir }}/ca.csr"
    provider: selfsigned
  when: mongo_ssl == True

- name: Generate an OpenSSL certificate signed with your own CA certificate
  openssl_certificate:
    path: "{{ remote_tmp_dir }}/{{item}}.pem"
    csr_path: "{{ remote_tmp_dir }}/{{item}}.csr"
    ownca_path: "{{ remote_tmp_dir }}/ca.pem"
    ownca_privatekey_path: "{{ remote_tmp_dir }}/ca_key.pem"
    provider: ownca
  with_items:
    - mongo
    - mongo-client
  when: mongo_ssl == True

- name: create cert chains
  shell: "cat {{ item }}.pem {{ item }}_key.pem > {{ item }}-chain.pem"
  args:
    chdir: "{{remote_tmp_dir}}"
  with_items:
    - mongo
    - mongo-client
  when: mongo_ssl == True

- name: Spawn mongod process without auth
  command: mongod --shardsvr --smallfiles {{ mongod_storage_engine_opts }} --dbpath mongod{{ item }} --port {{ item }} --replSet {{ current_replicaset }} --logpath mongod{{ item }}/log.log --fork
  args:
    chdir: "{{ remote_tmp_dir }}"
  with_items: "{{ mongodb_nodes | sort }}"
  when: mongod_auth == False and mongo_ssl == False

- name: Spawn mongod process with auth
  command: mongod --shardsvr --smallfiles {{ mongod_storage_engine_opts }} --dbpath mongod{{ item }} --port {{ item }} --replSet {{ current_replicaset }} --logpath mongod{{ item }}/log.log --fork --auth --keyFile my.key
  args:
    chdir: "{{ remote_tmp_dir }}"
  with_items: "{{ mongodb_nodes | sort }}"
  when: mongod_auth == True  and mongo_ssl == False

- name: Spawn mongod process without auth and with SSL
  command: mongod --sslMode requireSSL --sslAllowConnectionsWithoutCertificates --sslCAFile {{ remote_tmp_dir }}/ca.pem --sslPEMKeyFile  {{ remote_tmp_dir }}/mongo-chain.pem --sslAllowInvalidHostnames --shardsvr --smallfiles {{ mongod_storage_engine_opts }} --dbpath mongod{{ item }} --port {{ item }} --replSet {{ current_replicaset }} --logpath mongod{{ item }}/log.log --fork
  args:
    chdir: "{{ remote_tmp_dir }}"
  with_items: "{{ mongodb_nodes | sort }}"
  when: mongod_auth == False and mongo_ssl == True

- name: Spawn mongod process with auth and with SSL
  command: mongod --sslMode requireSSL --sslAllowConnectionsWithoutCertificates --sslCAFile {{ remote_tmp_dir }}/ca.pem --sslPEMKeyFile  {{ remote_tmp_dir }}/mongo-chain.pem --sslAllowInvalidHostnames --shardsvr --smallfiles {{ mongod_storage_engine_opts }} --dbpath mongod{{ item }} --port {{ item }} --replSet {{ current_replicaset }} --logpath mongod{{ item }}/log.log --fork --auth --keyFile my.key
  args:
    chdir: "{{ remote_tmp_dir }}"
  with_items: "{{ mongodb_nodes | sort }}"
  when: mongod_auth == True and mongo_ssl == True

- name: Wait for mongod to start responding
  wait_for:
    port: "{{ item }}"
  with_items: "{{ mongodb_nodes }}"
