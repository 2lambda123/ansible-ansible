# Test code for the vmware_dvswitch module.
# Copyright: (c) 2017, Abhijeet Kasurde <akasurde@redhat.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: store the vcenter container ip
  set_fact:
    vcsim: "{{ lookup('env', 'vcenter_host') }}"

- debug: var=vcsim

- name: Wait for Flask controller to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 5000
    state: started

- name: kill vcsim
  uri:
    url: http://{{ vcsim }}:5000/killall

- name: start vcsim
  uri:
    url: http://{{ vcsim }}:5000/spawn?cluster=2
  register: vcsim_instance

- name: Wait for vcsim server to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 443
    state: started

- name: get a list of Datacenter from vcsim
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=DC
  register: datacenters

- debug: var=vcsim_instance
- debug: var=datacenters

# Testcase 0001: Add Distributed vSwitch
- name: add distributed vSwitch
  vmware_dvswitch:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: "{{ item | basename }}"
    state: present
    switch_name: dvswitch_0001
    mtu: 9000
    uplink_quantity: 2
    discovery_proto: lldp
    discovery_operation: both
  register: dvs_result_0001
  with_items:
    - "{{ datacenters['json'] }}"

- name: ensure distributed vswitch is present
  assert:
    that:
        - "{{ dvs_result_0001.changed == true }}"

- name: get a list of distributed vswitch from vcsim after adding
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=DVS
  register: new_dvs_0001

- debug:
    msg: "{{ item | basename }}"
  with_items: "{{ new_dvs_0001['json'] }}"

- set_fact: new_dvs_name="{% for dvs in new_dvs_0001['json'] %} {{ True if (dvs | basename) == 'dvswitch_0001' else False }}{% endfor %}"

- debug: var=new_dvs_name
- assert:
    that:
      - "{{ 'True' in new_dvs_name }}"


# Testcase 0002: Add Distributed vSwitch again
- name: add distributed vSwitch again
  vmware_dvswitch:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: "{{ item | basename }}"
    state: present
    switch_name: dvswitch_0001
    mtu: 9000
    uplink_quantity: 2
    discovery_proto: lldp
    discovery_operation: both
  register: dvs_result_0002
  with_items:
    - "{{ datacenters['json'] }}"

- name: ensure distributed vswitch is present
  assert:
    that:
        - "{{ dvs_result_0002.changed == false }}"

# Testcase 0003: Add Distributed vSwitch
- name: add distributed vSwitch
  vmware_dvswitch:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: "{{ item | basename }}"
    state: absent
    switch_name: dvswitch_0001
  with_items:
    - "{{ datacenters['json'] }}"
  register: dvs_result_0003

- name: ensure distributed vswitch is absent
  assert:
    that:
        - "{{ dvs_result_0003.changed == true }}"

- name: get a list of dvs from vcsim after deleting dvs
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=DVS
  register: del_dvs

- debug:
    msg: "{{ item | basename }}"
  with_items: "{{ del_dvs['json'] }}"

- set_fact: del_dvs_name="{% for i in del_dvs['json'] %} {{ True if (i | basename) == 'dvswitch_0001' else False }}{% endfor %}"

- debug: var=del_dvs_name
- assert:
    that:
      - "{{ 'True' not in del_dvs_name }}"

- name: add distributed vSwitch with wrong mtu
  vmware_dvswitch:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: "{{ item | basename }}"
    state: present
    switch_name: dvswitch_0004
    mtu: 8
    uplink_quantity: 2
    discovery_proto: lldp
    discovery_operation: both
  register: dvs_result_0004
  ignore_errors: True
  with_items:
    - "{{ datacenters['json'] }}"

- assert:
    that:
      - "{{ not dvs_result_0004.changed }}"

- name: add distributed vSwitch with wrong Switch version
  vmware_dvswitch:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: "{{ item | basename }}"
    state: present
    switch_name: dvswitch_0005
    switch_version: '1.0.0'
    mtu: 9000
    uplink_quantity: 2
    discovery_proto: lldp
    discovery_operation: both
  register: dvs_result_0005
  ignore_errors: True
  with_items:
    - "{{ datacenters['json'] }}"

- assert:
    that:
      - "{{ not dvs_result_0005.changed }}"
