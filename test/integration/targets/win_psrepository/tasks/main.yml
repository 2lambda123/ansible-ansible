# This file is part of Ansible

# Copyright: (c) 2018, Wojciech Sciesinski <wojciech[at]sciesinski[dot]net>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

---

- name: get PowerShell version
  win_shell: '$PSVersionTable.PSVersion.Major'
  register: powershell_major_version

- name: update PackageManagement and PowerShellGet when PowerShell < 5.0
  when: powershell_major_version.stdout | int < 5
  block:
    - name: get the TEMP path
      win_shell: '$env:TEMP'
      register: temp_path

    - name: download PackageManagement
      win_get_url:
        url: https://download.microsoft.com/download/C/4/1/C41378D4-7F41-4BBE-9D0D-0E4F98585C61/PackageManagement_x64.msi
        dest: '{{ temp_path.stdout | trim }}\PackageManagement_x64.msi'

    - name: install PackageManagement
      win_package:
        path: '{{ temp_path.stdout | trim }}\PackageManagement_x64.msi'
        state: present
        creates_path: 'C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\PowerShellGet.psd1'

    - name: create the required folder
      win_file:
        path: 'C:\Program Files\PackageManagement\ProviderAssemblies'
        state: directory

    - name: download nuget
      win_get_url:
        url: https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
        dest: 'C:\Program Files\PackageManagement\ProviderAssemblies\NuGet-anycpu.exe'

    - name: update NuGet provider
      win_shell: 'Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies'

    - name: get a random folder path name
      win_shell: "([System.IO.Path]::GetTempPath()+([System.IO.Path]::GetRandomFileName())).Split('.')[0]"
      register: random_folder

    - name: create a random folder
      win_shell: 'New-Item -Path {{ random_folder.stdout | trim }} -ItemType Directory | Out-Null'

    - name: download and save the nevest version of the PackageManagement module from PowerShell Gallery
      win_shell: 'Save-Module -Name PackageManagement, PowerShellGet -Path {{ random_folder.stdout | trim }} -Force'

    - name: unload PackageManagement and PowerShellGet modules
      win_shell: 'Remove-Module -Name PackageManagement,PowerShellGet -Force -ErrorAction Ignore'
      ignore_errors: yes

    - name: get PSModulePath
      win_shell: "$($Env:PSModulePath -Split ';')[0]"
      register: psmodulepath

    - name: remove older versions of the PackageManagement and PowerShellGet
      win_shell: "Get-ChildItem -Path {{ psmodulepath.stdout | trim }} -Directory | Where { @('PackageManagement','PowerShellGet') -contains $_.Name }  | Remove-Item -Recurse -Force -ErrorAction Ignore"
      ignore_errors: yes

    - name: create required folder
      win_shell: 'if ( -not $(Test-Path {{ psmodulepath.stdout | trim }}) ) { New-Item -Path {{ psmodulepath.stdout | trim }} -ItemType Directory | Out-Null }'

    - name: update PowerShellGet and PackageManagement modules
      win_shell: 'Copy-Item -Path {{ random_folder.stdout | trim }}\* -Destination {{ psmodulepath.stdout | trim }}\ -Recurse -Force'

- name: update NuGet version
  when: powershell_major_version.stdout | int >= 5
  win_shell: |
    $nuget_exists = (Get-PackageProvider | Where-Object { $_.Name -eq 'Nuget' } | Measure-Object).Count -eq 1

    if ( $nuget_exists ) {
      $nuget_outdated = (Get-PackageProvider -Name NuGet -ErrorAction Ignore).Version -lt [Version]"2.8.5.201"
    }

    if ( -not $nuget_exists -or $nuget_outdated ) {
      Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies -Force
    }

- name: unregister the repository
  win_shell: 'Unregister-PSRepository {{ repository_name | quote }} -ErrorAction Ignore'
  changed_when: false

- name: run all tests
  include_tasks: tests.yml
