# This file is part of Ansible

# Copyright: (c) 2018, Wojciech Sciesinski <wojciech[at]sciesinski[dot]net>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

---

- name: "check setting of InstallationPolicy - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: PSGallery
    source: "{{ PSGallery_url }}"
    installation_policy: trusted
  check_mode: "{{ in_check_mode }}"
  register: change_installation_policy_1

- name: "get result of setting of InstallationPolicy - check mode: {{ in_check_mode }}"
  win_shell: '(Get-PSRepository -Name PSGallery).InstallationPolicy'
  changed_when: false
  register: result_change_installation_policy_1

- name: "test setting of InstallationPolicy - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "change_installation_policy_1 is changed"
      - "'{{ result_change_installation_policy_1.stdout | trim }}' == 'Trusted'"
  when: not in_check_mode

- name: "test setting of InstallationPolicy - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "change_installation_policy_1 is changed"
      - "'{{ result_change_installation_policy_1.stdout | trim }}' == 'Untrusted'"
  when: in_check_mode

- name: "check idempotency setting of InstallationPolicy - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: PSGallery
    source: "{{ PSGallery_url }}"
    installation_policy: trusted
  register: change_installation_policy_2
  when: not in_check_mode

- name: "test idempotency setting of InstallationPolicy - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "change_installation_policy_2 is not changed"
  when: not in_check_mode

- name: "check adding of repository 1 - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: "{{ repository_name }}"
    source: "{{ repository_sourcelocation }}"
    state: present
  check_mode: "{{ in_check_mode }}"
  register: adding_repository_1

- name: "get result of adding of repository 1 - check mode: {{ in_check_mode }}"
  win_shell: |
    $repo = Get-PSRepository -Name {{ repository_name | quote }} -ErrorAction Ignore
    ($repo | Measure-Object).Count
    $repo.SourceLocation
    $repo.InstallationPolicy
  changed_when: false
  register: result_adding_repository_1

- name: "test adding of repository 1 - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "adding_repository_1 is changed"
      - "'{{ result_adding_repository_1.stdout_lines[0] }}' == '1'"
      - "'{{ result_adding_repository_1.stdout_lines[1] }}' == '{{ repository_sourcelocation }}'"
      - "'{{ result_adding_repository_1.stdout_lines[2] }}' == 'Trusted'"
  when: not in_check_mode

- name: "test adding of repository 1 - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "adding_repository_1 is changed"
      - "'{{ result_adding_repository_1.stdout_lines[0] }}' == '0'"
  when: in_check_mode

- name: "check idempotency adding of repository - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: "{{ repository_name }}"
    source: "{{ repository_sourcelocation }}"
    state: present
  register: adding_repository_2
  when: not in_check_mode

- name: "test idempotency adding of repository - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "adding_repository_2 is not changed"
  when: not in_check_mode

- name: "check removing of repository - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: "{{ repository_name }}"
    state: absent
  register: removing_repository_1
  when: not in_check_mode

- name: "get result removing of repository - check mode: {{ in_check_mode }}"
  win_shell: '((Get-PSRepository -Name {{ repository_name }} -ErrorAction Ignore | Measure-Object).Count -eq 0)'
  changed_when: false
  register: result_removing_repository_1
  when: not in_check_mode

- name: "test removing of repository - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "removing_repository_1 is changed"
      - "'{{ result_removing_repository_1.stdout | trim }}' == 'True'"
  when: not in_check_mode

- name: "check removing of repository - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: "PSGallery"
    state: absent
  check_mode: "{{ in_check_mode }}"
  register: removing_repository_2
  when: in_check_mode

- name: "get result removing  of repository - check mode: {{ in_check_mode }}"
  win_shell: '((Get-PSRepository -Name PSGallery -ErrorAction Ignore | Measure-Object).Count -eq 1)'
  changed_when: false
  register: result_removing_repository_2
  when: in_check_mode

- name: "test removing of repository - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "removing_repository_2 is changed"
      - "'{{ result_removing_repository_2.stdout | trim }}' == 'True'"
  when: in_check_mode

- name: "check idempotency removing of repository - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: "{{ repository_name }}"
    state: absent
  register: removing_repository_3
  when: not in_check_mode

- name: "test idempotency removing of repository - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "removing_repository_3 is not changed"
  when: not in_check_mode

- name: "check adding of repository - 3 - check mode: {{ in_check_mode }}"
  win_psrepository:
    name: "{{ repository_name }}"
    source: "{{ repository_sourcelocation }}"
    installation_policy: untrusted
    state: present
  check_mode: "{{ in_check_mode }}"
  register: adding_repository_3

- name: "get result of adding of repository 3 - check mode: {{ in_check_mode }}"
  win_shell: |
    $repo = Get-PSRepository -Name {{ repository_name|quote }} -ErrorAction Ignore
    ($repo | Measure-Object).Count
    $repo.SourceLocation
    $repo.InstallationPolicy
  changed_when: false
  register: result_adding_repository_3
  when: not in_check_mode

- name: "test adding of repository - check mode: {{ in_check_mode }}"
  assert:
    that:
      - "adding_repository_3 is changed"
      - "'{{ result_adding_repository_3.stdout_lines[0] }}' == '1'"
      - "'{{ result_adding_repository_3.stdout_lines[1] }}' == '{{ repository_sourcelocation }}'"
      - "'{{ result_adding_repository_3.stdout_lines[2] }}' == 'Untrusted'"
  when: not in_check_mode
