- name: Get IP address for ansible.http.tests
  command: >-
    {{ ansible_python_interpreter }} -c 'import socket; print(socket.gethostbyname("{{ httpbin_host }}"))'
  register: httpbin_ip

- name: Get groups
  ansible.builtin.getent:
    database: group

- name: Set var for nobody/nogroup group
  set_fact:
    nobody_group: '{{ ansible_facts.getent_group|list|select("match", "no(group|body)")|first }}'

- name: Allow nobody to traverse remote_tmp_dir
  file:
    path: '{{ remote_tmp_dir }}'
    mode: '0755'

- name: Create log dir
  file:
    path: '{{ remote_tmp_dir }}/proxy-logs'
    state: directory
    owner: nobody
    group: '{{ nobody_group }}'

- name: Install tinyproxy config
  copy:
    dest: '{{ remote_tmp_dir }}/tinyproxy.conf'
    content: |
      User nobody
      Group {{ nobody_group }}
      Port 8080
      Listen 127.0.0.1
      Timeout 10
      LogLevel Info
      MaxClients 1
      StartServers 1
      Allow 127.0.0.1
      Allow ::1
      Allow ::
      ViaProxyName "tinyproxy"
      LogFile "{{ remote_tmp_dir }}/proxy-logs/tinyproxy.log"

- name: Start tinyproxy
  command: tinyproxy -d -c "{{ remote_tmp_dir }}/tinyproxy.conf"
  async: 30
  poll: 0
  register: tinyproxy

- name: Ensure tinyproxy started
  async_status:
    jid: '{{ tinyproxy.ansible_job_id }}'

- name: Test http over http proxy
  uri:
    url: http://{{ httpbin_host }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
  register: http_over_http
  failed_when: http_over_http.via is undefined

- name: Test https over http proxy
  uri:
    url: https://{{ httpbin_host }}/get
  environment:
    https_proxy: http://127.0.0.1:8080
  register: https_over_http
  # failed_when:
  # failure checking is handled by the assert at the bottom comparing logs
  # because we aren't running a proxy that can inspect the https stream
  # there won't be added headers

- name: Test request without a proxy
  uri:
    url: http://{{ httpbin_host }}/get
  register: request_without_proxy
  failed_when: request_without_proxy.via is defined

- name: Test request with proxy and no_proxy=hostname
  uri:
    url: http://{{ httpbin_host }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
    no_proxy: '{{ httpbin_host }}'
  register: no_proxy_hostname
  failed_when: no_proxy_hostname.via is defined

- name: Test request with proxy and no_proxy=ip
  uri:
    url: http://{{ httpbin_ip.stdout }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
    no_proxy: '{{ httpbin_ip.stdout }}'
  register: no_proxy_ip
  failed_when: no_proxy_ip.via is defined

- name: Test request with proxy and no_proxy=cidr/32
  uri:
    url: http://{{ httpbin_ip.stdout }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
    no_proxy: '{{ httpbin_ip.stdout }}/32'
  register: no_proxy_cidr_32
  failed_when: no_proxy_cidr_32.via is defined

- name: Test request with proxy and no_proxy=cidr/24
  uri:
    url: http://{{ httpbin_ip.stdout }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
    no_proxy: '{{ httpbin_cidr }}'
  register: no_proxy_cidr_24
  vars:
    httpbin_cidr: "{{ httpbin_ip.stdout.split('.')[:3]|join('.') }}.0/24"
  failed_when: no_proxy_cidr_24.via is defined

- name: Test request with proxy and non-matching no_proxy=cidr
  uri:
    url: http://{{ httpbin_ip.stdout }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
    no_proxy: 1.2.3.0/24
  register: no_proxy_non_matching_cidr
  failed_when: no_proxy_non_matching_cidr.via is undefined

- name: Test request with proxy and no_proxy=cidr:port
  uri:
    url: http://{{ httpbin_ip.stdout }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
    no_proxy: '{{ httpbin_ip.stdout }}/32:80'
  register: no_proxy_cidr_port
  failed_when: no_proxy_cidr_port.via is defined

- name: Test request with proxy and non-matching no_proxy=cidr:port
  uri:
    url: http://{{ httpbin_ip.stdout }}/get
  environment:
    http_proxy: http://127.0.0.1:8080
    no_proxy: '{{ httpbin_ip.stdout }}/32:8080'
  register: no_proxy_non_matching_cidr_port
  failed_when: no_proxy_non_matching_cidr_port.via is undefined

- slurp:
    path: "{{ remote_tmp_dir }}/proxy-logs/tinyproxy.log"
  register: tinyproxy_logs

- assert:
    that:
      - >-
        log_content is contains "CONNECT " ~ httpbin_host ~ ":443"
      # https over http
      - >-
        log_content|regex_findall(": CONNECT ")|length == 1
      # 3 http over http
      - >-
        log_content|regex_findall(': GET')|length == 3
  vars:
    log_content: '{{ tinyproxy_logs.content|b64decode }}'
