- name: Ensure zip binaries are absent
  package:
    state: absent
    name:
      - zip
      - unzip
  when: ansible_pkg_mgr in ('yum', 'dnf', 'apt', 'pkgng')
  notify: restore packages

- name: Ensure zstd is absent, if available
  ignore_errors: true
  package:
    state: absent
    name:
      - zstd
  when: ansible_pkg_mgr in ('yum', 'dnf', 'apt', 'pkgng')
  notify: restore packages

- name: create unarchive destinations
  file:
    path: '{{ remote_tmp_dir }}/test-unarchive-{{ item }}'
    state: directory
  loop:
    - zip
    - tar

# With the zip binaries absent and tar still present, this task should work
- name: unarchive a tar file
  unarchive:
    src: '{{remote_tmp_dir}}/test-unarchive.tar'
    dest: '{{remote_tmp_dir}}/test-unarchive-tar'
    remote_src: yes
  register: tar

- name: unarchive a zip file
  unarchive:
    src: '{{remote_tmp_dir}}/test-unarchive.zip'
    dest: '{{remote_tmp_dir}}/test-unarchive-zip'
    list_files: True
    remote_src: yes
  register: zip_fail
  ignore_errors: yes

- name: Ensure tasks did the expected thing
  assert:
    that:
      - tar is success
      - zip_fail is failed
      - zip_fail.msg is search('Unable to find required')

- name: remove unarchive destinations
  file:
    path: '{{ remote_tmp_dir }}/test-unarchive-{{ item }}'
    state: absent
  loop:
    - zip
    - tar

- meta: flush_handlers
