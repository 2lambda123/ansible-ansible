- name: Get coverage version
  pip:
    name: coverage
  check_mode: true
  register: pip_coverage

- name: create a virtualenv for use without packaging or setuptools
  pip:
    name:
      # coverage is needed when ansible-test is invoked with --coverage
      # and using a custom ansible_python_interpreter below
      - '{{ pip_coverage.stdout_lines|select("match", "coverage==")|first }}'
    virtualenv: "{{ remote_tmp_dir }}/no_package_parsing"

- name: Remove packaging and setuptools
  pip:
    name:
      - packaging
      - setuptools
      - pkg_resources  # This shouldn't be a thing, but ubuntu 20.04...
    virtualenv: "{{ remote_tmp_dir }}/no_package_parsing"
    state: absent

- name: Ensure pkg_resources is gone
  command: "{{ remote_tmp_dir }}/no_setuptools/bin/python -c 'import pkg_resources'"
  register: result
  failed_when: result.rc == 0

- vars:
    ansible_python_interpreter: "{{ remote_tmp_dir }}/no_package_parsing/bin/python"
  block:
    - name: Checkmode install packaging
      pip:
        name: packaging
        virtualenv: "{{ remote_tmp_dir }}/no_package_parsing"
      check_mode: true
      register: packaging_check_mode

    - assert:
        that:
          - packaging_check_mode is changed
          - packaging_check_mode.stdout is not contains "packaging=="

    - name: install packaging
      pip:
        name: packaging
        virtualenv: "{{ remote_tmp_dir }}/no_package_parsing"
      register: installed_packaging
      failed_when: installed_packaging is not changed
