---
###################################################################
# 1st string tests

- name: First string tests block
  block:

    - name: deploy the test file for lineinfile string
      copy:
        src: teststring.txt
        dest: "{{ output_dir }}/teststring.txt"
      register: result

    - name: assert that the test file was deployed
      assert:
        that:
          - result is changed
          - "result.checksum == '418fb335843de684c5c78e8edf5442a4ee282635'"
          - "result.state == 'file'"

    - name: insert a line at the beginning of the file, and back it up
      lineinfile:
        dest: "{{ output_dir }}/teststring.txt"
        state: present
        line: "New line at the beginning"
        insertbefore: "BOF"
        backup: yes
      register: result1

    - name: insert a line at the beginning of the file again
      lineinfile:
        dest: "{{ output_dir }}/teststring.txt"
        state: present
        line: "New line at the beginning"
        insertbefore: "BOF"
      register: result2

    - name: Replace a line using string
      lineinfile:
        dest: "{{ output_dir }}/teststring.txt"
        state: present
        line: "Thi$ i^ [ine 3"
        search_string: "REF this is a line to be replaced REF"
      register: backrefs_result1

    - name: Replace a line again using string
      lineinfile:
        dest: "{{ output_dir }}/teststring.txt"
        state: present
        line: "Thi$ i^ [ine 3"
        search_string: "REF this is a line to be replaced REF"
      register: backrefs_result2

    - command: cat {{ output_dir }}/teststring.txt

    - name: assert that the line with backrefs was changed
      assert:
        that:
          - backrefs_result1 is changed
          - backrefs_result2 is not changed
          - "backrefs_result1.msg == 'line replaced'"

    - name: stat the test after the backref line was replaced
      stat:
        path: "{{ output_dir }}/teststring.txt"
      register: result

    - name: assert test checksum matches after backref line was replaced
      assert:
        that:
          - "result.stat.checksum == '642e1c13a8453a42fa5035b5f4f14937b6904fab'"

    - name: remove the middle line using string
      lineinfile:
        dest: "{{ output_dir }}/teststring.txt"
        state: absent
        search_string: "Thi$ i^ [ine 3"
      register: result

    - name: assert that the line was removed
      assert:
        that:
          - result is changed
          - "result.msg == '1 line(s) removed'"

    - name: stat the test after the middle line was removed
      stat:
        path: "{{ output_dir }}/teststring.txt"
      register: result

    - name: assert test checksum matches after the middle line was removed
      assert:
        that:
          - "result.stat.checksum == '87af6beb4be7ec9f68f7accd2f20367cb6eca934'"

    - name: run a validation script that succeeds using string
      lineinfile:
        dest: "{{ output_dir }}/teststring.txt"
        state: absent
        search_string: "This is line 5"
        validate: "true %s"
      register: result

    - name: assert that the file validated after removing a line
      assert:
        that:
          - result is changed
          - "result.msg == '1 line(s) removed'"

    - name: stat the test after the validation succeeded
      stat:
        path: "{{ output_dir }}/teststring.txt"
      register: result

    - name: assert test checksum matches after the validation succeeded
      assert:
        that:
          - "result.stat.checksum == 'ba9600b34febbc88bfb3ca99cd6b57f1010c19a4'"

    - name: run a validation script that fails using string
      lineinfile:
        dest: "{{ output_dir }}/teststring.txt"
        state: absent
        search_string: "This is line 1"
        validate: "/bin/false %s"
      register: result
      ignore_errors: yes

    - name: assert that the validate failed
      assert:
        that:
          - "result.failed == true"

    - name: stat the test after the validation failed
      stat:
        path: "{{ output_dir }}/teststring.txt"
      register: result

    - name: assert test checksum matches the previous after the validation failed
      assert:
        that:
          - "result.stat.checksum == 'ba9600b34febbc88bfb3ca99cd6b57f1010c19a4'"

  when: stage == "first"

# End of string tests
###################################################################

###################################################################
# 2nd string tests

- name: Second string tests block
  block:

    - name: Deploy the teststring.conf file
      copy:
        src: teststring.conf
        dest: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the teststring.conf file was deployed
      assert:
        that:
          - result is changed
          - result.checksum == '6037f13e419b132eb3fd20a89e60c6c87a6add38'
          - result.state == 'file'

    # Test instertafter
    - name: Insert lines after with string
      lineinfile:
        path: "{{ output_dir }}/teststring.conf"
        search_string: "{{ item.regexp }}"
        line: "{{ item.line }}"
        insertafter: "{{ item.after }}"
      with_items: "{{ test_befaf_regexp }}"
      register: _multitest_5

    - name: Do the same thing again and check for changes
      lineinfile:
        path: "{{ output_dir }}/teststring.conf"
        search_string: "{{ item.regexp }}"
        line: "{{ item.line }}"
        insertafter: "{{ item.after }}"
      with_items: "{{ test_befaf_regexp }}"
      register: _multitest_6

    - name: Assert that the file was changed the first time but not the second time
      assert:
        that:
          - item.0 is changed
          - item.1 is not changed
      with_together:
        - "{{ _multitest_5.results }}"
        - "{{ _multitest_6.results }}"

    - name: Stat the file
      stat:
        path: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the file contents match what is expected
      assert:
        that:
          - result.stat.checksum == '06e2c456e5028dd7bcd0b117b5927a1139458c82'

    - name: Do the same thing a third time without string and check for changes
      lineinfile:
        path: "{{ output_dir }}/teststring.conf"
        line: "{{ item.line }}"
        insertafter: "{{ item.after }}"
      with_items: "{{ test_befaf_regexp }}"
      register: _multitest_7

    - name: Stat the file
      stat:
        path: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the file was changed when no string was provided
      assert:
        that:
          - item is not changed
      with_items: "{{ _multitest_7.results }}"

    - name: Stat the file
      stat:
        path: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the file contents match what is expected
      assert:
        that:
          - result.stat.checksum == '06e2c456e5028dd7bcd0b117b5927a1139458c82'

    # Test insertbefore
    - name: Deploy the test.conf file
      copy:
        src: teststring.conf
        dest: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the teststring.conf file was deployed
      assert:
        that:
          - result is changed
          - result.checksum == '6037f13e419b132eb3fd20a89e60c6c87a6add38'
          - result.state == 'file'

    - name: Insert lines before with string
      lineinfile:
        path: "{{ output_dir }}/teststring.conf"
        search_string: "{{ item.regexp }}"
        line: "{{ item.line }}"
        insertbefore: "{{ item.before }}"
      with_items: "{{ test_befaf_regexp }}"
      register: _multitest_8

    - name: Do the same thing again and check for changes
      lineinfile:
        path: "{{ output_dir }}/teststring.conf"
        search_string: "{{ item.regexp }}"
        line: "{{ item.line }}"
        insertbefore: "{{ item.before }}"
      with_items: "{{ test_befaf_regexp }}"
      register: _multitest_9

    - name: Assert that the file was changed the first time but not the second time
      assert:
        that:
          - item.0 is changed
          - item.1 is not changed
      with_together:
        - "{{ _multitest_8.results }}"
        - "{{ _multitest_9.results }}"

    - name: Stat the file
      stat:
        path: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the file contents match what is expected
      assert:
        that:
          - result.stat.checksum == 'c3be9438a07c44d4c256cebfcdbca15a15b1db91'

    - name: Do the same thing a third time without string and check for changes
      lineinfile:
        path: "{{ output_dir }}/teststring.conf"
        line: "{{ item.line }}"
        insertbefore: "{{ item.before }}"
      with_items: "{{ test_befaf_regexp }}"
      register: _multitest_10

    - name: Stat the file
      stat:
        path: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the file was changed when no string was provided
      assert:
        that:
          - item is not changed
      with_items: "{{ _multitest_10.results }}"

    - name: Stat the file
      stat:
        path: "{{ output_dir }}/teststring.conf"
      register: result

    - name: Assert that the file contents match what is expected
      assert:
        that:
          - result.stat.checksum == 'c3be9438a07c44d4c256cebfcdbca15a15b1db91'

  when: stage == "second"

# End of string tests
###################################################################
