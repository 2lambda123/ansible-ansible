---
# Setup
- name: ensure IIS features are installed
  win_feature:
    name: Web-Server
    state: present
    includ_sub_features: True
    include_management_tools: True
  register: feature_result

- name: reboot after feature install
  win_reboot:
  when: feature_result.reboot_required

- name: ensure pool is deleted as a baseline
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: absent

# Tests
- name: create default pool check
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: started
  register: create_default_check
  check_mode: yes

- name: get actual of create default pool check
  win_command: powershell.exe "Import-Module WebAdministration; Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}"
  register: create_default_actual_check
  failed_when: False

- name: assert create default pool check
  assert:
    that:
    - create_default_check|changed
    - create_default_actual_check.rc == 1

- name: create default pool
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: present
  register: create_default

- name: get actual of create default pool
  win_command: powershell.exe "Import-Module WebAdministration; Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}"
  register: create_default_actual
  failed_when: False

- name: assert create default pool
  assert:
    that:
    - create_default|changed
    - create_default.info.attributes.name == test_iis_webapppool_name
    - create_default.info.attributes.startMode == 'OnDemand'
    - create_default.info.attributes.state == 'Started'
    - create_default_actual.rc == 0

- name: change attributes of pool check
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: present
    attributes:
      managedPipelineMode: 1 # Using an enum value
      startMode: AlwaysRunning # Using the enum itself
      cpu.limit: 95 # Nested values
      processModel.identityType: SpecificUser # Changing of Identity
      processModel.userName: "{{ansible_user}}"
      processModel.password: "{{ansible_password}}"
      processModel.loadUserProfile: True
  register: change_pool_attributes_check
  check_mode: yes

- name: assert change attributes of pool check
  assert:
    that:
    - change_pool_attributes_check|changed
    - change_pool_attributes_check.info == create_default.info

- name: change attributes of pool
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: present
    attributes:
      managedPipelineMode: 1 # Using an enum value
      startMode: AlwaysRunning # Using the enum itself
      cpu.limit: 95 # Nested values
      processModel.identityType: SpecificUser # Changing of Identity
      processModel.userName: "{{ansible_user}}"
      processModel.password: "{{ansible_password}}"
      processModel.loadUserProfile: True
  register: change_pool_attributes

- name: assert change attributes of pool
  assert:
    that:
    - change_pool_attributes|changed
    - change_pool_attributes.info.attributes.managedPipelineMode == 'Classic'
    - change_pool_attributes.info.attributes.startMode == 'AlwaysRunning'
    - change_pool_attributes.info.cpu.limit == 95
    - change_pool_attributes.info.processModel.identityType == 'SpecificUser'
    - change_pool_attributes.info.processModel.userName == ansible_user
    - change_pool_attributes.info.processModel.password == ansible_password
    - change_pool_attributes.info.processModel.loadUserProfile == True

- name: change attributes of pool again
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: present
    attributes:
      managedPipelineMode: 1 # Using an enum value
      startMode: AlwaysRunning # Using the enum itself
      cpu.limit: 95 # Nested values
      processModel.identityType: SpecificUser # Changing of Identity
      processModel.userName: "{{ansible_user}}"
      processModel.password: "{{ansible_password}}"
      processModel.loadUserProfile: True
  register: change_pool_attributes_again

- name: assert change attributes of pool again
  assert:
    that:
    - not change_pool_attributes_again|changed
    - change_pool_attributes_again.info == change_pool_attributes.info

- name: change attributes of pool (old style) check
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: present
    attributes: "managedPipelineMode:0|startMode:OnDemand|cpu.limit:0|processModel.identityType:LocalSystem"
  register: change_pool_attributes_deprecated_check
  check_mode: yes

- name: assert change attributes of pool (old style) check
  assert:
    that:
    - change_pool_attributes_deprecated_check|changed
    - change_pool_attributes_deprecated_check.info == change_pool_attributes_again.info

- name: change attributes of pool (old style)
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: present
    attributes: "managedPipelineMode:0|startMode:OnDemand|cpu.limit:10|processModel.identityType:LocalSystem"
  register: change_pool_attributes_deprecated

- name: assert change attributes of pool (old style)
  assert:
    that:
    - change_pool_attributes_deprecated|changed
    - change_pool_attributes_deprecated.info.attributes.managedPipelineMode == 'Integrated'
    - change_pool_attributes_deprecated.info.attributes.startMode == 'OnDemand'
    - change_pool_attributes_deprecated.info.cpu.limit == 10
    - change_pool_attributes_deprecated.info.processModel.identityType == 'LocalSystem'

- name: change attributes of pool (old style) again
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: present
    attributes: "managedPipelineMode:0|startMode:OnDemand|cpu.limit:10|processModel.identityType:LocalSystem"
  register: change_pool_attributes_deprecated_again

- name: assert change attributes of pool (old style) again
  assert:
    that:
    - not change_pool_attributes_deprecated_again|changed
    - change_pool_attributes_deprecated_again.info == change_pool_attributes_deprecated.info

- name: stop web pool check
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: stopped
  register: stop_pool_check
  check_mode: yes

- name: get actual status of pool check
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: stop_pool_actual_check

- name: assert stop web pool check
  assert:
    that:
    - stop_pool_check|changed
    - stop_pool_actual_check.stdout == 'Started\r\n'

- name: stop web pool
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: stopped
  register: stop_pool

- name: get actual status of pool
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: stop_pool_actual

- name: assert stop web pool
  assert:
    that:
    - stop_pool|changed
    - stop_pool_actual.stdout == 'Stopped\r\n'

- name: stop web pool again
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: stopped
  register: stop_pool_again

- name: get actual status of pool again
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: stop_pool_actual_again

- name: assert stop web pool again
  assert:
    that:
    - not stop_pool_again|changed
    - stop_pool_actual_again.stdout == 'Stopped\r\n'

- name: start web pool check
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: started
  register: start_pool_check
  check_mode: yes

- name: get actual status of pool check
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: start_pool_actual_check

- name: assert start web pool check
  assert:
    that:
    - start_pool_check|changed
    - start_pool_actual_check.stdout == 'Stopped\r\n'

- name: start web pool
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: started
  register: start_pool

- name: get actual status of pool
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: start_pool_actual

- name: assert start web pool
  assert:
    that:
    - start_pool|changed
    - start_pool_actual.stdout == 'Started\r\n'

- name: start web pool again
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: started
  register: start_pool_again

- name: get actual status of pool again
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: start_pool_actual_again

- name: assert start web pool again
  assert:
    that:
    - not start_pool_again|changed
    - start_pool_actual_again.stdout == 'Started\r\n'

- name: restart web pool
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: restarted
  register: restart_pool

- name: get actual status of pool
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: restart_pool_actual

- name: assert restart web pool
  assert:
    that:
    - restart_pool|changed
    - restart_pool_actual.stdout == 'Started\r\n'

- name: stop pool before restart on stop test
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: stopped

- name: restart from stopped web pool check
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: restarted
  register: restart_from_stop_pool_check
  check_mode: yes

- name: get actual status of pool check
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: restart_from_stop_pool_actual_check

- name: assert restart from stopped web pool check
  assert:
    that:
    - restart_from_stop_pool_check|changed
    - restart_from_stop_pool_actual_check.stdout == 'Stopped\r\n'

- name: restart from stopped web pool
  win_iis_webapppool:
    name: '{{test_iis_webapppool_name}}'
    state: restarted
  register: restart_from_stop_pool

- name: get actual status of pool
  win_command: powershell.exe "Import-Module WebAdministration; (Get-Item -Path IIS:\AppPools\{{test_iis_webapppool_name}}).state"
  register: restart_from_stop_pool_actual

- name: assert restart from stopped web pool
  assert:
    that:
    - restart_from_stop_pool|changed
    - restart_from_stop_pool_actual.stdout == 'Started\r\n'

# Cleanup
- name: remove IIS features after test
  win_feature:
    name: Web-Server
    state: absent
    includ_sub_features: True
    include_management_tools: True
