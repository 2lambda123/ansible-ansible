---
# tasks file for  test_ec2_eip

- name: Set up AWS connection info
  set_fact:
    aws_connection_info: &aws_connection_info
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token }}"
      region: "{{ aws_region }}"
  no_log: true

- block:

  # ============================================================
  # Preparing environment, an ec2 and a VPC needed
  # ============================================================

    - ec2_ami_facts:
        <<: *aws_connection_info
        filters:
          architecture: x86_64
          virtualization-type: hvm
          root-device-type: ebs
          name: "amzn-ami-hvm-2018.*"
      register: amis

    - name: create a VPC to work in
      ec2_vpc_net:
        cidr_block: 19.41.53.0/24
        state: present
        name: '{{ resource_prefix }}_ansible_ec2_eip_test'
        tags:
          'Name': '{{ resource_prefix }}_ansible_ec2_eip_test'
        <<: *aws_connection_info
      register: test_vpc

    - name: create a subnet to use
      ec2_vpc_subnet:
        az: '{{ aws_region }}a'
        tags:
          'Name': '{{ resource_prefix }}_ansible_ec2_eip_test'
        vpc_id: '{{ test_vpc.vpc.id }}'
        cidr: 19.41.53.0/24
        state: present
        <<: *aws_connection_info
      register: test_subnet

    - name: provision ec2 instance INSIDE VPC to associate eip
      ec2:
        instance_type: t2.micro
        state: present
        image: "{{ (amis.images | sort(attribute='creation_date') | last).image_id }}"
        wait: yes
        instance_tags:
          'Name': '{{resource_prefix}}_ansible_ec2_eip_test'
        vpc_subnet_id: '{{ test_subnet.subnet.id }}'
        <<: *aws_connection_info
      register: test_vpc_instance

    - name: provision ec2 instance OUTSIDE VPC to associate eip
      ec2:
        instance_type: t2.micro
        state: present
        image: "{{ (amis.images | sort(attribute='creation_date') | last).image_id }}"
        wait: yes
        instance_tags:
          'Name': '{{resource_prefix}}_ansible_ec2_eip_test'
        <<: *aws_connection_info
      register: test_instance

  # ============================================================
  # Start EIP tests - VPC
  # ============================================================

    - name: allocate a new elastic IP in VPC
      ec2_eip:
        in_vpc: yes
        state: present
        <<: *aws_connection_info
      register: allocated_vpc_eip

    - name: assert eip exists
      assert:
        that:
          - allocated_vpc_eip.changed == True

    - name:  associate it with the VPC instance
      ec2_eip:
        device_id: '{{ test_vpc_instance.instances[0].id }}'
        public_ip: '{{ allocated_vpc_eip.public_ip }}'
        in_vpc: yes
        <<: *aws_connection_info
      register: result

    - name: assert association
      assert:
        that:
          - result.changed == True

    - name:  disassociate it from the VPC instance and release
      ec2_eip:
        device_id: '{{ test_vpc_instance.instances[0].id }}'
        public_ip: '{{ allocated_vpc_eip.public_ip }}'
        in_vpc: yes
        state: absent
        release_on_disassociation: yes
        <<: *aws_connection_info
      register: result

    - name: assert disassociation
      assert:
        that:
          - result.changed == True

  # ============================================================
  # Start EIP tests - NO VPC
  # ============================================================

    - name: allocate a new elastic IP
      ec2_eip:
        state: present
        <<: *aws_connection_info
      register: allocated_eip

    - name: assert eip exists
      assert:
        that:
          - allocated_eip.changed == True

    - name:  associate it with the instance
      ec2_eip:
        device_id: '{{ test_instance.instances[0].id }}'
        public_ip: '{{ allocated_eip.public_ip }}'
        <<: *aws_connection_info
      register: result

    - name: assert association
      assert:
        that:
          - result.changed == True

    - name:  disassociate it from the instance and release
      ec2_eip:
        device_id: '{{ test_instance.instances[0].id }}'
        public_ip: '{{ allocated_eip.public_ip }}'
        state: absent
        release_on_disassociation: yes
        <<: *aws_connection_info
      register: result

    - name: assert disassociation
      assert:
        that:
          - result.changed == True

  always:
    # ============================================================
    # Teardown starts here
    # ============================================================

    - name: remove allocated eips if any
      ec2_eip:
        release_on_disassociation: yes
        state: absent
        ip: '{{ item }}'
        in_vpc: yes
        <<: *aws_connection_info
      loop:
        - '{{ allocated_vpc_eip.public_ip }}'
        - '{{ allocated_eip.public_ip }}'
      ignore_errors: yes


    - name: remove test ec2 instances
      ec2:
        instance_ids: '{{ item }}'
        state: absent
        wait: yes
        <<: *aws_connection_info
      loop:
        - '{{ test_vpc_instance.instances[0].id }}'
        - '{{ test_instance.instances[0].id }}'

    - name: remove test subnet
      ec2_vpc_subnet:
        az: '{{ aws_region }}a'
        tags:
          'Name': '{{resource_prefix}}_ansible_ec2_eip_test'
        vpc_id: '{{ test_subnet.subnet.vpc_id }}'
        cidr: 19.41.53.0/24
        state: absent
        <<: *aws_connection_info

    - name: remove test VPC
      ec2_vpc_net:
        cidr_block: 19.41.53.0/24
        state: absent
        name: '{{ resource_prefix }}_ansible_ec2_eip_test'
        tags:
          'Name': '{{ resource_prefix }}_ansible_ec2_eip_test'
        <<: *aws_connection_info
