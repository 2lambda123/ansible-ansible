# Test code for the vmware_dvswitch_nioc_resource module.
# Copyright: (c) 2018, VMware, Inc.
# SPDX-License-Identifier: GPL-3.0-or-later
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: store the vcenter container ip
  set_fact:
    vcsim: "{{ lookup('env', 'vcenter_host') }}"

- debug: var=vcsim

- name: Wait for Flask controller to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 5000
    state: started

- name: kill vcsim
  uri:
    url: http://{{ vcsim }}:5000/killall

- name: start vcsim
  uri:
    url: http://{{ vcsim }}:5000/spawn?cluster=2
  register: vcsim_instance

- name: Wait for vcsim server to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 443
    state: started

- name: get a list of Datacenter from vcsim
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=DC
  register: datacenters

- debug: var=vcsim_instance
- debug: var=datacenters

- name: Create dvswitch
  vmware_dvswitch:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: "{{ item | basename }}"
    switch_name: dvSwitch
    uplink_quantity: 2
    discovery_proto: lldp
    discovery_operation: both
    mtu: 9000
    state: present
  register: dvswitch
  with_items:
    - "{{ datacenters['json'] }}"

#- name: Enable NIOC using version2
#  vmware_dvswitch_nioc:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    switch_name: dvSwitch
#    version: version2
#    state: present
#  with_items:
#    - "{{ datacenters['json'] }}"

# FIXME: Uncomment these testcases once vcsim supports DVS NIOC methods

# Testcase 0001: Configure management resource
#- name: Configure management & vsan resources
#  vmware_dvswitch_nioc_resource:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    resources:
#        - name: management
#          limit: -1
#          shares_level: high
#        - name: vsan
#          limit: -1
#          shares_level: custom
#          shares: 99
#  register: nioc_result_0001

#- name: Configure management & vsan resources
#  assert:
#    that:
#        - "{{ nioc_result_0001.changed == true }}"

# Testcase 0002: Ensure management & vsan resources are configured
#- name: Ensure NIOC management & vsan resources are still configured
#  vmware_dvswitch_nioc_resource:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    resources:
#        - name: management
#          limit: -1
#          shares_level: high
#        - name: vsan
#          limit: -1
#          shares_level: custom
#          shares: 99
#  register: nioc_result_0002

#- name: Configure management & vsan resources
#  assert:
#    that:
#        - "{{ nioc_result_0002.changed == false }}"

#- name: Enable NIOC using version3
#  vmware_dvswitch_nioc:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    switch_name: dvSwitch
#    version: version3
#    state: present
#  with_items:
#    - "{{ datacenters['json'] }}"

# Testcase 0003: Configure management resource
#- name: Configure management & vsan resources with reservation
#  vmware_dvswitch_nioc_resource:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    resources:
#        - name: management
#          reservation: 128
#          limit: 256
#          shares_level: high
#        - name: vsan
#          limit: -1
#          reservation: 128
#          shares_level: custom
#          shares: 99
#  register: nioc_result_0003

#- name: Configure management & vsan resources
#  assert:
#    that:
#        - "{{ nioc_result_0003.changed == true }}"

# Testcase 0004: Ensure management & vsan resources are configured
#- name: Ensure NIOC management & vsan resources are still configured
#  vmware_dvswitch_nioc_resource:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    resources:
#        - name: management
#          reservation: 128
#          limit: 256
#          shares_level: high
#        - name: vsan
#          limit: -1
#          reservation: 128
#          shares_level: custom
#          shares: 99
#  register: nioc_result_0004

#- name: Configure management & vsan resources
#  assert:
#    that:
#        - "{{ nioc_result_0004.changed == false }}"
