# Copyright: (c) 2019, Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Integration tests for jboss module.
#
# Module's note section contains:
# "- The JBoss standalone deployment-scanner has to be enabled in standalone.xml"
#
# Also from https://docs.jboss.org/author/display/WFLY10/Application+deployment?_sscc=t
# "Deployment content (for example, war, ear, jar, and sar files) can be placed
# in the standalone/deployments directory of the WildFly distribution,
# in order to be automatically deployed into the server runtime.
# For this to work the deployment-scanner subsystem must be present.
# The scanner periodically checks the contents of the deployments directory
# and reacts to changes by updating the server."
# Regarding the information above JBoss server must be installed and running for full test suite.
# Without that it is possible to check check_mode only.

- vars:
    jboss_root: /var/lib/jbossas
    deploy_dir: '{{ jboss_root }}/standalone/deployments'
    war_src_dir: '{{ jboss_root }}/standalone/war_src_dir'
    war_file_1: '{{ war_src_dir }}/hello-0.war'
    war_file_2: '{{ war_src_dir }}/hello-1.war'
    test_deployment: hello-2.war
    task_parameters: &task_parameters
      become_user: root
      become: yes
      register: result

  block:
  - name: Create test directories
    <<: *task_parameters
    file:
      path: '{{ item }}'
      state: directory
      recurse: yes
    loop:
    - '{{ deploy_dir }}'
    - '{{ war_src_dir }}'

  - name: Create test files
    <<: *task_parameters
    file:
      path: '{{ item }}'
      state: touch
    loop:
    - '{{ war_file_1 }}'
    - '{{ war_file_2 }}'

  - name: Add lines in war_file_2 to make it different from war_file_1
    <<: *task_parameters
    lineinfile:
      line: 'hello'
      path: '{{ war_file_2 }}'

  ##################
  # Start the tests:

  # Test if state=present and not deployed:
  - name: jboss - deploy war to default path in check_mode
    <<: *task_parameters
    jboss:
      deployment: '{{ test_deployment }}'
      src: '{{ war_file_1 }}'
    check_mode: yes

  - assert:
      that:
      - result is changed

  # Check (it makes sense while JBoss is not installed and running).
  # Remove this test after it is installed:
  - name: check that nothing changed after the previous step
    <<: *task_parameters
    file:
      path: '{{ deploy_dir }}/{{ test_deployment }}'
    ignore_errors: yes

  - assert:
      that:
      - result is failed

  # Check, if JBoss is running and has enabled deployment-scanner,
  # it creates a new file called like the war file with .deployed extension automatically,
  # so, we must check that:
  - name: check that nothing changed after the previous step
    <<: *task_parameters
    file:
      path: '{{ deploy_dir }}/{{ test_deployment }}.deployed'
    ignore_errors: yes

  - assert:
      that:
      - result is failed

  # (Remove this after JBoss is installed and running)
  - name: copy war file to deployment directory
    <<: *task_parameters
    copy:
      remote_src: yes
      src: '{{ war_file_1 }}'
      dest: '{{ deploy_dir }}/{{ test_deployment }}'

  # (Remove this after JBoss is installed and running)
  - name: add deployment file to emulate deployment-scanner activity
    <<: *task_parameters
    file:
      path: '{{ deploy_dir }}/{{ test_deployment }}.deployed'
      state: touch

  # Test if state=present and deployed:
  - name: jboss - deploy war to default path in check_mode, war is deployed now
    <<: *task_parameters
    jboss:
      deployment: '{{ test_deployment }}'
      src: '{{ war_file_1 }}'
    check_mode: yes

  - assert:
      that:
      - result is not changed

  # Test if state=absent and deployed:
  - name: jboss - undeploy war in check_mode, war is deployed already
    <<: *task_parameters
    jboss:
      deployment: '{{ test_deployment }}'
      deploy_path: '{{ deploy_dir }}'
      state: absent
    check_mode: yes

  - assert:
      that:
      - result is changed

  - name: check that nothing actually changed after the previous step
    <<: *task_parameters
    file:
      path: '{{ deploy_dir }}/{{ test_deployment }}.deployed'

  - assert:
      that:
      - result.state == 'file'

  # Test if state=present and another file is deployed:
  - name: jboss - deploy war to default path in check_mode
    <<: *task_parameters
    jboss:
      deployment: '{{ test_deployment }}'
      src: '{{ war_file_2 }}'
    check_mode: yes

  - assert:
      that:
      - result is changed

  # Remove deployed file for the next test:
  - name: jboss - remove deployed file
    <<: *task_parameters
    file:
      path: '{{ deploy_dir }}/{{ test_deployment }}.deployed'
      state: absent

  # Test if state=absent and not deployed:
  - name: jboss - undeploy war in check_mode, war is deployed already
    <<: *task_parameters
    jboss:
      deployment: '{{ test_deployment }}'
      deploy_path: '{{ deploy_dir }}'
      state: absent
    check_mode: yes

  - assert:
      that:
      - result is not changed

  always:
  # Clean up:
  - name: Remove jboss test directory
    <<: *task_parameters
    file:
      path: '{{ jboss_root }}'
      state: absent
