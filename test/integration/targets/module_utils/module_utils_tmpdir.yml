- hosts: localhost
  gather_facts: no
  tasks:
  - name: run module utils tmpdir test
    test_tmpdir:
    register: result

  - name: get module tmpdir stat for first module invocation
    stat:
      path: '{{result.invoke1.tmpdir}}'
    register: result1_stat

  - name: get module tmpdir stat for second module invocation
    stat:
      path: '{{result.invoke2.tmpdir}}'
    register: result2_stat

  - name: assert module tmpdir result
    assert:
      that:
      # initial tmpdir value should be the same as remote_tmp (before it is created)
      - result.invoke1._tmpdir == result.remote_tmp
      - result.invoke2._tmpdir == result.remote_tmp
      # once tmpdir is created it should not be the same as result.remote_tmp
      - result.invoke1.tmpdir != result.remote_tmp
      - result.invoke2.tmpdir != result.remote_tmp
      - result.invoke1.tmpdir.startswith(result.remote_tmp|expanduser ~ '/ansible-moduletmp-')
      - result.invoke2.tmpdir.startswith(result.remote_tmp|expanduser ~ '/ansible-moduletmp-')
      # each module invocation should have a separate module tmpdir
      - result.invoke1.tmpdir != result.invoke2.tmpdir
      # make sure the module tmpdir does not exist anymore
      - not result1_stat.stat.exists
      - not result2_stat.stat.exists

  - name: create custom remote tmp
    file:
      path: ~/ansible-testing-tmp
      state: directory
    register: custom_remote_tmp

  - block:
    - name: run module utls tmpdir test with overridden remote_tmp
      test_tmpdir:
      vars:
        ansible_remote_tmp: ~/ansible-testing-tmp
      register: result

    - name: get module tmpdir stat for first module invocation with overridden remote_tmp
      stat:
        path: '{{result.invoke1.tmpdir}}'
      register: result1_stat

    - name: get module tmpdir stat for first module invocation with overridden remote_tmp
      stat:
        path: '{{result.invoke2.tmpdir}}'
      register: result2_stat

    - name: assert module tmpdir result with overridden remote_tmp
      assert:
        that:
        - result.invoke1._tmpdir == '~/ansible-testing-tmp'
        - result.invoke2._tmpdir == '~/ansible-testing-tmp'
        - result.invoke1.tmpdir != result.remote_tmp
        - result.invoke2.tmpdir != result.remote_tmp
        - result.invoke1.tmpdir.startswith(custom_remote_tmp.path ~ '/ansible-moduletmp-')
        - result.invoke2.tmpdir.startswith(custom_remote_tmp.path ~ '/ansible-moduletmp-')
        - result.invoke1.tmpdir != result.invoke2.tmpdir
        - not result1_stat.stat.exists
        - not result2_stat.stat.exists

    always:
    - name: delete custom remote tmp
      file:
        path: ~/ansible-testing-tmp
        state: absent

  - name: call module with fail_json
    test_tmpdir:
      action: fail_json
    register: result_fail_json

  - name: get module tmpdir stat for first module invocation with fail_json
    stat:
      path: '{{result_fail_json.invoke1.tmpdir}}'
    register: result1_stat

  - name: get module tmpdir stat for second module invocation with fail_json
    stat:
      path: '{{result_fail_json.invoke2.tmpdir}}'
    register: result2_stat

  - name: assert module tmpdir does not exist after failing with fail_json
    assert:
      that:
      - not result1_stat.stat.exists
      - not result2_stat.stat.exists

  - name: call module with exception
    test_tmpdir:
      action: exception
    register: result_fail_json

  - name: get module tmpdir stat for first module invocation with exception
    stat:
      path: '{{result_fail_json.invoke1.module_stderr.split("Exception: ")[1]|trim}}'
    register: result1_stat

  - name: get module tmpdir stat for second module invocation with exception
    stat:
      path: '{{result_fail_json.invoke2.module_stderr.split("Exception: ")[1]|trim}}'
    register: result2_stat

  - name: assert module tmpdir does not exist after failing with exception
    assert:
      that:
      - not result1_stat.stat.exists
      - not result2_stat.stat.exists
