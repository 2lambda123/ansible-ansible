- name: Retrieve vms facts (all vms of the resource group)
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
  register: results

- name: Get the amount of vms the resource group has
  set_fact:
    vms_total: "{{ results.ansible_facts.azure_virtualmachines | length }}"

- name: Create random names
  set_fact:
    vn_name: "{{ 'vn' | hash('md5') | truncate(16, True, '') + (65535 | random | string) }}"
    vm1_name: "{{ 'vm1' | hash('md5') | truncate(16, True, '') + (65535 | random | string) }}"
    vm2_name: "{{ 'vm2' | hash('md5') | truncate(16, True, '') + (65535 | random | string) }}"
    vm3_name: "{{ 'vm3' | hash('md5') | truncate(16, True, '') + (65535 | random | string) }}"
    tag_value: "{{ 'tag' | hash('md5') | truncate(16, True, '') + (65535 | random | string) }}"

- name: Get facts for all virtual networks
  azure_rm_virtualnetwork_facts:
    resource_group: "{{ resource_group }}"
  register: results
  when: vms_total | int == 0

- name: Create a virtual network, if there is no one in the resource group
  azure_rm_virtualnetwork:
    resource_group: "{{ resource_group }}"
    name: "{{ vn_name }}"
    address_prefixes_cidr:
      - "10.0.0.0/16"
  register: vn_results
  when: vms_total | int == 0 and results.ansible_facts.azure_virtualnetworks | length == 0

- name: Create a subnet, and associate it to the new virtual network
  azure_rm_subnet:
    resource_group: "{{ resource_group }}"
    virtual_network_name: "{{ vn_name }}"
    name: default
    address_prefix_cidr: "10.0.0.0/24"
  when: vn_results.changed

- name: Create the first vm
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm1_name }}"
    admin_username: ubuntu
    admin_password: Ubuntu@123
    vm_size: Standard_A0
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: '16.04-LTS'
      version: 16.04.201801220
    tags:
      role: "{{ tag_value }}"

- name: Create the second vm
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm2_name }}"
    admin_username: ubuntu
    admin_password: Ubuntu@123
    vm_size: Standard_A0
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: '16.04-LTS'
      version: 16.04.201801220

- name: Retrieve vms facts (all vms of the resource group)
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
  register: results

- name: Assert that facts module returned more 2 vms
  assert:
    that: 
      - not results.changed
      - results.ansible_facts.azure_virtualmachines | length == vms_total | int + 2

- name: Retrieve vms facts (filtering by tag)
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
    tags:
      - "role:{{ tag_value }}"
  register: results

- name: Assert that facts module returned the first vm
  assert:
    that: 
      - not results.changed
      - results.ansible_facts.azure_virtualmachines | length == 1
      - results.ansible_facts.azure_virtualmachines[0].name == vm1_name

- name: Retrieve vms facts (filtering by name)
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm2_name }}"
  register: results

- name: Assert that facts module returned the second vm
  assert:
    that: 
      - not results.changed
      - results.ansible_facts.azure_virtualmachines | length == 1
      - results.ansible_facts.azure_virtualmachines[0].name == vm2_name

- name: Retrieve vms facts (filtering by wrong name)
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm3_name }}"
  register: results

- name: Assert that facts module returned no vm
  assert:
    that: 
      - not results.changed
      - results.ansible_facts.azure_virtualmachines | length == 0

- name: Delete the vms previously created
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ item }}"
    state: absent
    remove_on_absent:
      - all
  loop:
    - "{{ vm1_name }}"
    - "{{ vm2_name }}"

- name: Delete the virtual network, if created previously
  azure_rm_virtualnetwork:
    resource_group: "{{ resource_group }}"
    name: "{{ vn_name }}"
    state: absent
  when: vn_results.changed
