---
- debug: msg="START connection={{ ansible_connection }} nxos_interface sanity test"
- debug: msg="Using provider={{ connection.transport }}"
  when: ansible_connection == "local"

- set_fact:
    testint: "{{ nxos_int1 }}"
    features:
      - interface-vlan
      - bfd
      - hsrp

- set_fact:
    bfd_enable: enable
    bfd_disable: disable
  when: platform is not search('N5K|N6K')

- set_fact:
    hsrp_bfd_enable: enable
    hsrp_bfd_disable: disable
  when: platform is not search('N35')

- name: Setup - Disable features
  # 'no feature interface-vlan' also removes vlan interfaces
  nxos_feature:
    feature: "{{ item }}"
    provider: "{{ connection }}"
    state: disabled
  ignore_errors: yes
  loop: "{{ features }}"

- name: Setup - Enable features
  nxos_feature:
    feature: "{{ item }}"
    provider: "{{ connection }}"
    state: enabled
  ignore_errors: yes
  loop: "{{ features }}"

- name: "Setup: Put interface {{ testint }} into a default state"
  nxos_config: &intcleanup
    lines:
      - "default interface {{ testint }}"
    provider: "{{ connection }}"
  ignore_errors: yes

- block:
  - name: "Configure layer3 params"
    nxos_interface: &l3config
      interface: "{{ testint }}"
      mode: layer3
      description: 'Configured by Ansible - Layer3'
      admin_state: up
      provider: "{{ connection }}"
      state: present
    register: result

  - assert: &true
      that:
        - "result.changed == true"

  - name: "Check Idempotence"
    nxos_interface: *l3config
    register: result

  - assert: &false
      that:
        - "result.changed == false"

  - name: BFD toggle part 1
    nxos_interface: &bfd_test_1
      interface: "{{ testint }}"
      mode: layer3
      bfd: "{{ bfd_disable|default(omit)}}"
      bfd_echo: disable
      hsrp_bfd: "{{ hsrp_bfd_enable|default(omit)}}"
    register: result

  - assert:
      that:
        - "result.changed == true"
        - "{{ 'no bfd echo' in result.commands }}"
      msg: "Assert failed. 'result.commands': {{ result.commands }}"
  - assert:
      that:
        - "{{ 'no bfd' in result.commands }}"
      msg: "Assert failed. 'result.commands': {{ result.commands }}"
    when: bfd_enable is defined
  - assert:
      that:
        - "{{ 'hsrp bfd' in result.commands }}"
      msg: "Assert failed. 'result.commands': {{ result.commands }}"
    when: hsrp_bfd_enable is defined

  - name: "Check Idempotence"
    nxos_interface: *bfd_test_1
    register: result

  - assert:
      <<: *false
      msg: "Assert failed. 'result.commands': {{ result.commands }}"

  - name: BFD toggle part 2
    nxos_interface: &bfd_test_2
      interface: "{{ testint }}"
      mode: layer3
      bfd: "{{ bfd_enable|default(omit)}}"
      bfd_echo: enable
      hsrp_bfd: "{{ hsrp_bfd_disable|default(omit)}}"
    register: result

  - assert:
      that:
        - "result.changed == true"
        - "{{ 'bfd echo' in result.commands }}"
      msg: "Assert failed. 'result.commands': {{ result.commands }}"
  - assert:
      that:
        - "{{ 'bfd' in result.commands }}"
      msg: "Assert failed. 'result.commands': {{ result.commands }}"
    when: bfd_enable is defined
  - assert:
      that:
        - "{{ 'no hsrp bfd' in result.commands }}"
      msg: "Assert failed. 'result.commands': {{ result.commands }}"
    when: hsrp_bfd_disable is defined

  - name: "Check Idempotence"
    nxos_interface: *bfd_test_2
    register: result

  - assert:
      <<: *false
      msg: "Assert failed. 'result.commands': {{ result.commands }}"

  - name: "Configure layer2 params"
    nxos_interface: &l2config
      interface: "{{ testint }}"
      mode: layer2
      description: 'Configured by Ansible - Layer2'
      admin_state: down
      provider: "{{ connection }}"
      state: present
    register: result

  - assert: *true

  - name: "Check Idempotence"
    nxos_interface: *l2config
    register: result

  - assert: *false

  - name: Create VLAN Interfaces
    nxos_interface: &createvlans
      interface: "{{ item.os_svi_int }}"
      description: "{{ item.os_svi_desc }}"
      provider: "{{ connection }}"
    with_items: &vlanitems
      - {os_svi_int: vlan2, os_svi_desc: SVI_VLAN2}
      - {os_svi_int: vlan710, os_svi_desc: SVI_VLAN710}
      - {os_svi_int: vlan711, os_svi_desc: SVI_VLAN711}
      - {os_svi_int: vlan712, os_svi_desc: SVI_VLAN712}
    register: result

  - assert: *true

  - name: Configure Required SVI
    nxos_l3_interface: &addips
      aggregate:
        - {name: vlan2, ipv4: 192.168.2.1/24}
        - {name: vlan710, ipv4: 192.168.3.1/24}
        - {name: vlan711, ipv4: 192.168.4.1/24}
        - {name: vlan712, ipv4: 192.168.5.1/24}
      provider: "{{ connection }}"
    register: result

  - assert: *true

  - name: Create VLAN Interfaces Idempotence Check
    nxos_interface: *createvlans
    with_items: *vlanitems
    register: result

  - assert: *false

  - name: Configure Required SVI Idempotence Check
    nxos_l3_interface: *addips
    register: result

  - assert: *false

  always:
  - name: "Set interface back to default"
    nxos_config: *intcleanup
    ignore_errors: yes

  - name: Teardown - Disable features
    nxos_feature:
      feature: "{{ item }}"
      provider: "{{ connection }}"
      state: disabled
    ignore_errors: yes
    loop: "{{ features }}"

  - debug: msg="END connection={{ ansible_connection }} nxos_interface sanity test"
