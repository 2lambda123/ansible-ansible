---
- block:
  - name: set up aws connection info
    set_fact:
      aws_connection_info: &aws_connection_info
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
        region: "{{ aws_region }}"
    no_log: yes
  
  # ============================================================
  - name: create a VPC
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      state: present
      cidr_block: "10.232.232.128/26"
      <<: *aws_connection_info
      tags:
        Name: "{{ resource_prefix }}-vpc"
        Description: "Created by ansible-test"
    register: vpc_result
  
  # ============================================================
  - name: create subnet 
    ec2_vpc_subnet:
      cidr: "10.232.232.128/28"
      vpc_id: "{{ vpc_result.vpc.id }}"
      <<: *aws_connection_info
      state: present
    register: vpc_subnet_created

  # ============================================================
  - name: create NAT gateway (expected changed=true)
    ec2_vpc_nat_gateway:
      state: present
      subnet_id: "{{ vpc_subnet_created.subnet.id }}"
      if_exist_do_not_create: 'no'
      <<: *aws_connection_info
    register: vpc_nat_gateway_created
  
  - name: assert creation happened (expected changed=true)
    assert:
      that:
          - 'vpc_nat_gateway_created'
          - 'vpc_nat_gateway_created.nat_gateway_id.startswith("nat-")'
          - 'vpc_nat_gateway_created.vpc_id == vpc_result.vpc.id'
          - 'vpc_nat_gateway_created.tags == {}'
  
  # ============================================================
  - name: attempt to recreate nat_gateway with if_exist_do_not_create=true (expected changed=false)
    ec2_vpc_nat_gateway:
      state: present
      subnet_id: "{{ vpc_subnet_created.subnet.id }}"
      <<: *aws_connection_info
      if_exist_do_not_create: 'yes'
    register: vpc_nat_gateway_recreated
  
  - name: assert recreation did nothing (expected changed=false)
    assert:
      that:
          - 'vpc_nat_gateway_recreated.changed == False'
          - 'vpc_nat_gateway_recreated.nat_gateway_id == vpc_nat_gateway_created.nat_gateway_id'
          - 'vpc_nat_gateway_recreated.subnet_id == vpc_nat_gateway_created.subnet_id'

  # ============================================================
  - name: Add tags to nat-gateway
    ec2_vpc_nat_gateway:
      if_exist_do_not_create: 'yes'
      tags:
        Name: "{{ resource_prefix }}-nat"
      subnet_id: "{{ vpc_subnet_created.subnet.id }}"
      nat_gateway_id: "{{ vpc_nat_gateway_created.nat_gateway_id }}"
      <<: *aws_connection_info
    register: vpc_nat_gateway_tagged
  
  - name: assert tag is added
    assert:
      that:
          - 'vpc_nat_gateway_tagged.changed == True'
  
  # ============================================================
  - name: Collect nat-gateway facts to check tags
    ec2_vpc_nat_gateway_info:
      nat_gateway_ids: "{{ vpc_nat_gateway_created.nat_gateway_id }}"
      <<: *aws_connection_info
    register: vpc_nat_gateway_facts
    until: vpc_nat_gateway_facts | json_query('result[].tags[].Name') | count == 1
    retries: 10
    delay: 5
  
  - name: assert tag is added
    assert:
      that:
          - 'vpc_nat_gateway_facts.result.0.tags.Name == "{{ resource_prefix }}-nat"'
  
  # ============================================================
  - name: Add tags with purge_tags=yes
    ec2_vpc_nat_gateway:
      if_exist_do_not_create: 'yes'
      purge_tags: 'yes'
      tags:
        Tag1: "{{ resource_prefix }}-nat"
      subnet_id: "{{ vpc_subnet_created.subnet.id }}"
      nat_gateway_id: "{{ vpc_nat_gateway_created.nat_gateway_id }}"
      <<: *aws_connection_info
    register: vpc_nat_gateway_tagged
  
  - name: assert tag is added (expected changed=true)
    assert:
      that:
          - 'vpc_nat_gateway_tagged.changed == True'

  # ============================================================
  - name: Collect nat-gateway facts to check tags (purge_tags=yes)
    ec2_vpc_nat_gateway_info:
      nat_gateway_ids: "{{ vpc_nat_gateway_created.nat_gateway_id }}"
      <<: *aws_connection_info
    register: vpc_nat_gateway_facts
    until: vpc_nat_gateway_facts | json_query('result[].tags[].Tag1') | count == 1
    retries: 10
    delay: 5
  
  - name: assert new tag is added and old purged (purge_tags=yes)
    assert:
      that:
          - '"Name" not in vpc_nat_gateway_facts.result.0.tags'
          - '"Tag1" in vpc_nat_gateway_facts.result.0.tags'
          - 'vpc_nat_gateway_facts.result.0.tags.Tag1 == "{{ resource_prefix }}-nat"'

  # ============================================================
  - name: Add tags with purge_tags=no
    ec2_vpc_nat_gateway:
      if_exist_do_not_create: 'yes'
      purge_tags: 'no'
      tags:
        Tag2: "{{ resource_prefix }}-nat"
      subnet_id: "{{ vpc_subnet_created.subnet.id }}"
      nat_gateway_id: "{{ vpc_nat_gateway_created.nat_gateway_id }}"
      <<: *aws_connection_info
    register: vpc_nat_gateway_tagged
  
  - name: assert tag is added (expected changed=true)
    assert:
      that:
          - 'vpc_nat_gateway_tagged.changed == True'

  # ============================================================
  - name: Collect nat-gateway facts to check tags (purge_tags=no)
    ec2_vpc_nat_gateway_info:
      nat_gateway_ids: "{{ vpc_nat_gateway_created.nat_gateway_id }}"
      <<: *aws_connection_info
    register: vpc_nat_gateway_facts
    until: vpc_nat_gateway_facts | json_query('result[].tags[].Tag1') | count == 1
    retries: 10
    delay: 5
  
  - name: assert new tag is added and old is kept (purge_tags=no)
    assert:
      that:
          - '"Tag1" in vpc_nat_gateway_facts.result.0.tags'
          - 'vpc_nat_gateway_facts.result.0.tags.Tag1 == "{{ resource_prefix }}-nat"'
          - '"Tag2" in vpc_nat_gateway_facts.result.0.tags'
          - 'vpc_nat_gateway_facts.result.0.tags.Tag2 == "{{ resource_prefix }}-nat"'

  always:
    # ============================================================
    - name: tidy up nat-gateway
      ec2_vpc_nat_gateway:
        state: absent
        release_eip: 'yes'
        subnet_id: "{{ vpc_subnet_created.subnet.id }}"
        nat_gateway_id: "{{ vpc_nat_gateway_created.nat_gateway_id }}"
        wait: 'yes'
        <<: *aws_connection_info
      ignore_errors: yes

    # need approximately 25 retries for the subnet dependency to be removed
    # ============================================================
    - name: tidy up subnet
      ec2_vpc_subnet:
        state: absent
        cidr: "10.232.232.128/28"
        vpc_id: "{{ vpc_result.vpc.id }}"
        wait: 'yes'
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 30

    # ============================================================
    - name: ensure EIP is actually released
      ec2_eip:
        state: absent
        device_id: "{{ item.network_interface_id }}"
        in_vpc: yes
        <<: *aws_connection_info
      with_items: "{{ vpc_nat_gateway_facts.result.0.nat_gateway_addresses }}"
      ignore_errors: yes

    # ============================================================
    - name: tidy up VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: absent
        cidr_block: "10.232.232.128/26"
        <<: *aws_connection_info
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
