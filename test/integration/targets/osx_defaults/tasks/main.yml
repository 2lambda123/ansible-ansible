# Test code for the osx_defaults module.
# Copyright: (c) 2019, Abhijeet Kasurde <akasurde@redhat.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---

- debug:
    msg: "Ansible Python Version: {{ ansible_python_version }}"

# TEST: Required 'value' argument When 'state' is present

- name: Define state present without providing value argument
  osx_defaults:
    domain: com.ansible.fake
    key: StatePresentRequiredValueTest
    type: string
    state: present
  register: state_present_required_value_test_result
  ignore_errors: yes

- name: Should fail with appropriate error message When value arguments is NOT provided while state argument is present
  assert:
    that:
    - "'following are missing: value' in '{{ state_present_required_value_test_result['msg'] }}'"

# TEST: Verify ansible check_mode behaving correctly When creating a new value (non existing initialy)

- name: Ensure that fake setting expected for check_mode test is NOT already defined
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    state: absent

- name: Define value for CheckModeTest key in check_mode
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    type: string
    value: Hello World
    state: present
  register: check_mode_test_result
  check_mode: yes

- name: Should return CHANGED status When CheckModeTest key does NOT already exist
  assert:
    that:
    - check_mode_test_result.changed

- name: Find the current value of CheckModeTest
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    state: list
  register: check_mode_test_result

- name: Should be none When value previously inserted in check_mode
  assert:
    that:
    - check_mode_test_result.value is none


# TEST: Verify ansible check_mode behaving correctly When modifying an existing value

- name: Ensure that fake setting expected for check_mode test is initialized with "Hello World" value
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    value: Hello World
    state: present

- name: Define value for CheckModeTest key in check_mode
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    type: string
    value: Hello World
    state: present
  register: check_mode_test_result
  check_mode: yes

- name: Should return OK status When CheckModeTest key already exists
  assert:
    that:
    - not check_mode_test_result.changed

# TEST: Verify ansible check_mode behaving correctly When deleting an existing value

- name: Ensure that fake setting expected for check_mode test is initialized with "Hello World" value
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    value: Hello World
    state: present

- name: Delete value for CheckModeTest key in check_mode
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    type: string
    state: absent
  register: check_mode_test_result
  check_mode: yes

- name: Should return CHANGED status When CheckModeTest key already exists
  assert:
    that:
    - check_mode_test_result.changed

# TEST: Verify ansible check_mode behaving correctly When deleting a value that does NOT exist

- name: Ensure that fake setting expected for check_mode test does NOT already exist
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    state: absent

- name: Delete value for CheckModeTest key in check_mode
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    type: string
    state: absent
  register: check_mode_test_result
  check_mode: yes

- name: Should return OK status When CheckModeTest key already exists
  assert:
    that:
    - not check_mode_test_result.changed

- name: Clean fake setting after test
  osx_defaults:
    domain: com.ansible.fake
    key: CheckModeTest
    state: absent

# TEST: Module 'state' list return none When trying to find an unexisting key

- name: Ensure that fake setting expected for state list test is NOT already defined
  osx_defaults:
    domain: com.ansible.fake
    key: StateListTest
    state: absent

- name: Find the current value of StateListTest
  osx_defaults:
    domain: com.ansible.fake
    key: StateListTest
    state: list
  register: state_list_test_result

- name: Should return none When StateListTest key does NOT exists
  assert:
    that:
    - state_list_test_result.value is none

# TEST: Module 'state' list return STRING value When trying to find a properly defined key

- name: Ensure that fake setting expected for state list test is initialized with "Hello World" STRING value
  osx_defaults:
    domain: com.ansible.fake
    key: StateListStringTest
    type: string
    value: Hello World
    state: present

- name: Find the current value of StateListStringTest
  osx_defaults:
    domain: com.ansible.fake
    key: StateListStringTest
    state: list
  register: state_list_string_test_result

- name: Should return "Hello World" When STRING value previously defined
  assert:
    that:
    - state_list_string_test_result.value == 'Hello World'

- name: Clean fake setting after test
  osx_defaults:
    domain: com.ansible.fake
    key: StateListStringTest
    state: absent

# TEST: Module 'state' list return ARRAY value When trying to find a properly defined key

- name: Ensure that fake setting expected for state list test is initialized with "Hello World" ARRAY value
  osx_defaults:
    domain: com.ansible.fake
    key: StateListArrayTest
    type: array
    value:
      - Hello
      - World
    state: present

- name: Find the current value of StateListArrayTest
  osx_defaults:
    domain: com.ansible.fake
    key: StateListArrayTest
    state: list
  register: state_list_array_test_result

- name: Should return "Hello World" When ARRAY value previously defined
  assert:
    that:
    - state_list_array_test_result.value == ['Hello','World']

- name: Clean fake setting after test
  osx_defaults:
    domain: com.ansible.fake
    key: StateListArrayTest
    state: absent

# TEST: Result status should be changed When value does not already exist

- name: Ensure that fake setting expected for module status test is NOT already defined
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    state: absent

- name: Define value for ModuleStatusTest key
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    type: string
    value: Hello World
    state: present
  register: module_status_test_result

- name: Should return CHANGED status When ModuleStatusTest key does NOT already exist
  assert:
    that:
    - module_status_test_result.changed

- name: Find the current value of ModuleStatusTest
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    state: list
  register: module_status_query_result

- name: Should return "Hello World" previously defined
  assert:
    that:
    - module_status_query_result.value == 'Hello World'

# TEST: Result status should be ok When creating value that already exists

- name: Define AGAIN the same value for ModuleStatusTest key
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    type: string
    value: Hello World
    state: present
  register: module_status_test_result

- name: Should return OK status When ModuleStatusTest key already exists
  assert:
    that:
    - not module_status_test_result.changed

# TEST: Result status should be changed When modifying value with an accented value

- name: Define accented value "Hellô Wôrld" for ModuleStatusTest key
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    type: string
    value: Hellô Wôrld
    state: present
  register: module_status_test_result

- name: Should return CHANGED status When ModuleStatusTest has different value already in it
  assert:
    that:
    - module_status_test_result.changed

- name: Find the current value of ModuleStatusTest
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    state: list
  register: module_status_query_result

- name: Should return "Hellô Wôrld" modified value
  assert:
    that:
    - module_status_query_result.value == 'Hellô Wôrld'

# TEST: Result status should be ok When accented value already exists

- name: Define AGAIN the same accented value "Hellô Wôrld" for ModuleStatusTest key
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    type: string
    value: Hellô Wôrld
    state: present
  register: module_status_test_result

- name: Should return OK status When ModuleStatusTest has already accented value in it
  assert:
    that:
    - not module_status_test_result.changed

# TEST: Result status should be changed When deleting value for a key that already exists

- name: Delete value for ModuleStatusTest key
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    type: string
    state: absent
  register: module_status_test_result

- name: Should return CHANGED status When ModuleStatusTest key already exists
  assert:
    that:
    - module_status_test_result.changed

- name: Find the current value of ModuleStatusTest
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    state: list
  register: module_status_query_result

- name: Should return undefined When ModuleStatusTest key already deleted
  assert:
    that:
    - module_status_query_result.value is none

# TEST: Result status should be ok When deleting value for a key that does NOT already exist

- name: Delete value for ModuleStatusTest key
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    type: string
    state: absent
  register: module_status_test_result

- name: Should return OK status When ModuleStatusTest key does NOT already exist
  assert:
    that:
    - not module_status_test_result.changed

- name: Clean fake setting after test
  osx_defaults:
    domain: com.ansible.fake
    key: ModuleStatusTest
    state: absent

# TEST: Validate usage exhaustively for all data types supported by osx_defaults

- name: Define all supported type of data
  osx_defaults:
    domain: com.ansible.fake
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items: &data_type
    - { type: 'int', value: 1, key: 'sample_int'}
    - { type: 'integer', value: 1, key: 'sample_int_2'}
    - { type: 'bool', value: True, key: 'sample_bool'}
    - { type: 'boolean', value: True, key: 'sample_bool_2'}
    - { type: 'date', value: "2019-02-19 10:10:10", key: 'sample_date'}
    - { type: 'float', value: 1.2, key: 'sample_float'}
    - { type: 'string', value: 'sample', key: 'sample_string'}
    - { type: 'array', value: ['1', '2'], key: 'sample_array'}
  register: all_supported_data_types_test_result

- name: Should return CHANGED status for each of them
  assert:
    that: "{{ item.changed }}"
  with_items: "{{ all_supported_data_types_test_result.results }}"

- name: Define all previously defined data
  osx_defaults:
    domain: com.ansible.fake
    key: "{{ item.key }}"
    value: "{{ item.value }}"
    type: "{{ item.type }}"
    state: absent
  with_items: *data_type
  register: all_supported_data_types_test_result

- name: Should return CHANGED status for each of them
  assert:
    that: "{{ item.changed }}"
  with_items: "{{ all_supported_data_types_test_result.results }}"
