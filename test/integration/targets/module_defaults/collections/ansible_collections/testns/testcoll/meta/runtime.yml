plugin_routing:
  action:
    # Test for action plugin redirects for module_defaults.
    # Each module_defaults entry is first resolved as an action plugin, and if it does not exist, it is resolved as a module.
    # If multiple modules use the same action plugin redirect, module defaults for any of the modules as redirected actions will apply.
    # Since they will all resolve to the same thing, last defined wins.
    module_uses_action_defaults:
      redirect: testns.testcoll.eos
  modules:
    # Any module_defaults for testns.testcoll.module will not apply to a module_uses_action_defaults task:
    #
    # module_defaults:
    #   testns.testcoll.module:
    #     option: value
    #
    # But defaults for testns.testcoll.module_uses_action_defaults or testns.testcoll.eos will:
    #
    # module_defaults:
    #   testns.testcoll.module_uses_action_defaults:
    #     option: value
    #   testns.testcoll.eos:
    #     option: defined_last_i_win
    module_uses_action_defaults:
      redirect: testns.testcoll.module

    # Not "eos_facts" to ensure TE is not finding handler via prefix
    # eosfacts tasks should not get eos module_defaults (or defaults for other modules that use eos action plugin)
    eosfacts:
      action_plugin: testns.testcoll.eos

    # iosfacts/ios_facts tasks should get iosfacts/ios_facts module_defaults (not ios defaults)
    iosfacts:
      # No "action_plugin: ios" here to test the resolved module name is used by TE to find handler using prefix
      redirect: testns.testcoll.ios_facts

action_groups:
  testgroup:
    # Test metadata 'extend_group' feature does not get stuck in a recursive loop
    - metadata:
        extend_group: othergroup
    - metadata
    - ping
    - testns.testcoll.echo1
    - testns.testcoll.echo2
# note we can define defaults for an action
    - testns.testcoll.echoaction
# note we can define defaults in this group for actions/modules in another collection
    - testns.othercoll.other_echoaction
    - testns.othercoll.other_echo1
  othergroup:
    - metadata:
        extend_group:
          - testgroup
  empty_metadata:
    - metadata: {}
  bad_metadata_format:
    - unexpected_key:
        key: value
      metadata:
        extend_group: testgroup
  multiple_metadata:
    - metadata:
        extend_group: testgroup
    - metadata:
        extend_group: othergroup
  bad_metadata_options:
    - metadata:
        unexpected_key: testgroup
  bad_metadata_type:
    - metadata: [testgroup]
  bad_metadata_option_type:
    - metadata:
        extend_group:
          name: testgroup
