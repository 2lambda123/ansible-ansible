- include_vars: "{{ lookup('first_found', search) }}"
  vars:
    search:
      files:
        - 'cron.{{ ansible_distribution | lower }}.yml'
        - 'cron.{{ ansible_distribution_file_variety | lower }}.yml'
      paths:
        - '../defaults/'

- vars:
    remote_dir: "{{ lookup('env', 'OUTPUT_DIR') }}"
  block:
    - name: install cron package
      package:
        name: '{{ cron_pkg }}'
      register: cron_package_installed
      until: cron_package_installed is success

    - when: faketime_pkg|default(false, true)
      block:
        - name: create directory for cron drop-in file
          file:
            path: '/etc/systemd/system/{{ cron_service }}.service.d'
            state: directory
            owner: root
            group: root
            mode: 0755

        - name: install cron and faketime packages
          package:
            name: '{{ faketime_pkg }}'
          register: faketime_package_installed
          until: faketime_package_installed is success

        - name: Find libfaketime path
          shell: '{{ list_pkg_files }} {{ faketime_pkg }} | grep -F libfaketime.so.1'
          args:
            warn: false
          register: libfaketime_path

        - name: Use faketime with cron service
          copy:
            content: |-
              [Service]
              Environment=LD_PRELOAD={{ libfaketime_path.stdout_lines[0] }}
              Environment="FAKETIME=+0y x10"
              Environment=RANDOM_DELAY=0
            dest: '/etc/systemd/system/{{ cron_service }}.service.d/faketime.conf'
            owner: root
            group: root
            mode: 0644

    - name: enable cron service
      service:
        daemon-reload: "{{ (ansible_service_mgr == 'systemd')|ternary(true, omit) }}"
        name: '{{ cron_service }}'
        state: restarted

    - name: add cron task
      cron:
        name: test cron task
        job: 'date > {{ remote_dir }}/cron_canary1'

    - block:
        - name: wait for canary creation
          wait_for:
            path: '{{ remote_dir }}/cron_canary1'
            timeout: '{{ 20 if faketime_pkg else 70 }}'
          register: wait_canary
      always:
        - name: display some logs in case of failure
          command: 'journalctl -u {{ cron_service }}'
          when: wait_canary is failed and ansible_service_mgr == 'systemd'

    - debug:
        msg: 'elapsed time waiting for canary: {{ wait_canary.elapsed }}'
