# Copyright: (c) 2019, Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- vars:
    task_parameters: &task_parameters
      become_user: '{{ pg_user }}'
      become: yes
      register: result
    pg_parameters: &pg_parameters
      login_user: '{{ pg_user }}'
      login_db: '{{ test_db }}'

  block:

  ####################
  # Test mode: present
  ####################
  - name: Create subscription
    <<: *task_parameters
    postgresql_subscription:
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      pubname: '{{ test_pub }}'
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'

  - assert:
      that:
      - result is changed
      - result.name == '{{ test_subscription }}'
      - result.queries == ["CREATE SUBSCRIPTION test CONNECTION 'host=127.0.0.1 port={{ master_port }} user={{ replication_role }} password={{ replication_pass }} dbname={{ test_db }}' PUBLICATION {{ test_pub }}"]
      - result.exists == true
      - result.initial_state == {}
      - result.final_state.owner == '{{ pg_user }}'
      - result.final_state.enabled == true
      - result.final_state.publications == ["{{ test_pub }}"]
      - result.final_state.synccommit == true
      - result.final_state.slotname == '{{ test_subscription }}'
      - result.final_state.conninfo.dbname == '{{ test_db }}'
      - result.final_state.conninfo.host == '127.0.0.1'
      - result.final_state.conninfo.port == '{{ master_port }}'
      - result.final_state.conninfo.user == '{{ replication_role }}'
      - result.final_state.conninfo.password == '{{ replication_pass }}'

  #################
  # Test mode: stat
  #################

  - name: Stat mode in check mode
    <<: *task_parameters
    postgresql_subscription: 
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat
    check_mode: yes

  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
      - result.final_state == result.initial_state
      - result.final_state.owner == '{{ pg_user }}'
      - result.final_state.enabled == true
      - result.final_state.publications == ["{{ test_pub }}"]
      - result.final_state.synccommit == true
      - result.final_state.slotname == '{{ test_subscription }}'
      - result.final_state.conninfo.dbname == '{{ test_db }}'
      - result.final_state.conninfo.host == '127.0.0.1'
      - result.final_state.conninfo.port == '{{ master_port }}'
      - result.final_state.conninfo.user == '{{ replication_role }}'
      - result.final_state.conninfo.password == '{{ replication_pass }}'

  - name: Stat mode
    <<: *task_parameters
    postgresql_subscription: 
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat

  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true
      - result.final_state == result.initial_state
      - result.final_state.owner == '{{ pg_user }}'
      - result.final_state.enabled == true
      - result.final_state.publications == ["{{ test_pub }}"]
      - result.final_state.synccommit == true
      - result.final_state.slotname == '{{ test_subscription }}'
      - result.final_state.conninfo.dbname == '{{ test_db }}'
      - result.final_state.conninfo.host == '127.0.0.1'
      - result.final_state.conninfo.port == '{{ master_port }}'
      - result.final_state.conninfo.user == '{{ replication_role }}'
      - result.final_state.conninfo.password == '{{ replication_pass }}'

  ###################
  # Test mode: absent
  ###################

  - name: Drop subscription in check mode
    <<: *task_parameters
    postgresql_subscription:
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
    check_mode: yes

  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }}"]
      - result.final_state == result.initial_state

  - name: Check the subscription exists
    <<: *task_parameters
    postgresql_subscription: 
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat

  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true

  - name: Drop subscription
    <<: *task_parameters
    postgresql_subscription:
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent

  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }}"]
      - result.final_state != result.initial_state

  - name: Check the subscription doesn't exist
    <<: *task_parameters
    postgresql_subscription: 
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat

  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == false

  ####################
  # Test cascade param
  ####################

  - name: Create subscription for further tests
    <<: *task_parameters
    postgresql_subscription:
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: present
      pubname: '{{ test_pub }}'
      connparams:
        host: 127.0.0.1
        port: '{{ master_port }}'
        user: '{{ replication_role }}'
        password: '{{ replication_pass }}'
        dbname: '{{ test_db }}'


  - name: Drop subscription cascade in check mode
    <<: *task_parameters
    postgresql_subscription:
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
      cascade: yes
    check_mode: yes

  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }} CASCADE"]
      - result.final_state == result.initial_state

  - name: Check the subscription exists
    <<: *task_parameters
    postgresql_subscription: 
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat

  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == true

  - name: Drop subscription cascade
    <<: *task_parameters
    postgresql_subscription:
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: absent
      cascade: yes

  - assert:
      that:
      - result is changed
      - result.queries == ["DROP SUBSCRIPTION {{ test_subscription }} CASCADE"]
      - result.final_state != result.initial_state

  - name: Check the subscription doesn't exist
    <<: *task_parameters
    postgresql_subscription: 
      <<: *pg_parameters
      login_port: '{{ replica_port }}'
      name: '{{ test_subscription }}'
      state: stat

  - assert:
      that:
      - result is not changed
      - result.name == '{{ test_subscription }}'
      - result.exists == false
