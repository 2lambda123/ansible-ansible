---
- hosts: testhost
  vars:
    - ansible_hostname: "BAD!"
    - ansible_nodename: "nodename_from_play_vars"
    - vars_var: "vars_var"
    - param_var: "BAD!"
    - vars_files_var: "BAD!"
    - extra_var_override_once_removed: "{{ extra_var_override }}"
    - from_inventory_once_removed: "{{ inven_var | default('BAD!') }}"
    - set_fact_cacheable_var: "set_fact_cacheable_from_play_vars"

  vars_files:
    - vars/test_var_precedence.yml
  roles:
    - { role: test_var_precedence, param_var: "param_var" }
  tasks:
    - name: register a result
      command: echo 'BAD!'
      register: registered_var
    - name: use set_fact to override the registered_var
      set_fact: registered_var="this is from set_fact"
      # set fact cacheable so it persists across plays
    - name: use set_fact with cacheable to override set_facts_cacheable_var
      set_fact:
        set_fact_cacheable_var: "set_fact_cacheable_from_set_fact_cacheable"
        cacheable: true
      when: write_cache
    - name: use set_fact with cacheable to persist the gather fact nodename
      set_fact:
        set_fact_cacheable_machine_id: "{{ hostvars[inventory_hostname]['ansible_machine_id'] }}"
        cacheable: true
      when: write_cache
    - debug: var=extra_var
    - debug: var=extra_var_override_once_removed
    - debug: var=vars_var
    - debug: var=vars_files_var
    - debug: var=vars_files_var_role
    - debug: var=registered_var
    - debug: var=from_inventory_once_removed
    - debug: var=ansible_hostname
    - debug: var=ansible_machine_id
    - debug: var=set_fact_cacheable_var
    - debug: var=write_cache
    - assert:
        that: item
      with_items:
          - 'ansible_hostname == "BAD!"'
          - 'ansible_nodename == "nodename_from_play_vars"'
          - 'extra_var == "extra_var"'
          - 'extra_var_override == "extra_var_override"'
          - 'extra_var_override_once_removed == "extra_var_override"'
          - 'vars_var == "vars_var"'
          - 'vars_files_var == "vars_files_var"'
          - 'vars_files_var_role == "vars_files_var_role3"'
          - 'registered_var == "this is from set_fact"'
          - 'from_inventory_once_removed == "inventory_var"'

    - name: assert that set_fact_cacheable_var if write_cache is true
      assert:
        that:
          - 'set_fact_cacheable_var == "set_fact_cacheable_from_set_fact_cacheable"'
      when: write_cache

    - name: assert that set_fact_cacheable_var is from play_vars if write_cache is false
      assert:
        that:
          - 'set_fact_cacheable_var == "set_fact_cacheable_from_play_vars"'
      when: not write_cache

- hosts: inven_overridehosts
  vars_files:
    - "test_var_precedence.yml"
  roles:
    - role: test_var_precedence_inven_override
      foo: bar

- name: verify set_fact cacheable persists across plays
  hosts: testhost
  gather_facts: smart
  vars:
    - set_fact_cacheable_var: "set_fact_cacheable_from_play_vars_other_play"
  tasks:
    - debug: var=ansible_hostname
    - debug: var=ansible_machine_id
    - debug: var=set_fact_cacheable_var
    - debug: var=write_cache

    - assert:
        that: item
      with_items:
          - 'ansible_hostname != "BAD!"'
          - 'extra_var == "extra_var"'
          - 'extra_var_override == "extra_var_override"'

    - name: assert that ansible_machine_id matches set_fact_cacheable_machine_id
      assert:
        that:
          - 'ansible_machine_id == set_fact_cacheable_machine_id'
      when: write_cache

    - name: assert that set_fact_cacheable_var if write_cache is true in another play
      assert:
        that:
          - 'set_fact_cacheable_var == "set_fact_cacheable_from_set_fact_cacheable"'
      when: write_cache

    - name: assert that set_fact_cacheable_var is from play_vars if write_cache is false in another play
      assert:
        that:
          - 'set_fact_cacheable_var == "set_fact_cacheable_from_play_vars_other_play"'
      when: not write_cache
