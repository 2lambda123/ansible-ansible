- name: gather one and two facts
  hosts: localhost
  gather_facts: true
  vars_files:
    - vars/one_two.json
  vars:
   ansible_facts_modules:
     - facts_one
     - facts_two
  tasks:
    - name: check expected merge strings
      assert:
        that:
            - onetwo[item] == ansible_facts[item]
      loop: '{{onetwo.keys()|list}}'
      when: onetwo[item] is string

    - name: check expected merge sequences
      assert:
        that:
            - onetwo[item]|sort == ansible_facts[item]|sort
      loop: '{{onetwo.keys()|list}}'
      when: onetwo[item] is not string and onetwo[item] is not mapping

    - name: check expected merge dicts
      assert:
        that:
            - onetwo[item]|dictsort == ansible_facts[item]|dictsort
      loop: '{{onetwo.keys()|list}}'
      when: onetwo[item] is mapping


- name: gather two and one facts
  hosts: localhost
  gather_facts: true
  vars_files:
    - vars/two_one.json
  vars:
   ansible_facts_modules:
     - facts_two
     - facts_one
  tasks:

    - name: check expected merge strings
      assert:
        that:
            - twoone[item] == ansible_facts[item]
      loop: '{{twoone.keys()|list}}'
      when: twoone[item] is string

    - name: check expected merge sequences
      assert:
        that:
            - twoone[item]|sort == ansible_facts[item]|sort
      loop: '{{twoone.keys()|list}}'
      when: twoone[item] is not string and twoone[item] is not mapping

    - name: check expected merge dicts
      assert:
        that:
            - twoone[item]|dictsort == ansible_facts[item]|dictsort
      loop: '{{twoone.keys()|list}}'
      when: twoone[item] is mapping
