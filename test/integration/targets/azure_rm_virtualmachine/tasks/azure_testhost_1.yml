- name: TEST | Create virtual machine with a single NIC and no boot diagnostics
  register: output
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      vm_size: Standard_A0
      storage_account: "{{ storage_accounts[0] }}"
      storage_container: "{{ vm_name }}"
      storage_blob: "{{ vm_name }}.vhd"
      admin_username: adminuser
      admin_password: Password123!
      short_hostname: testvm
      os_type: Linux
      network_interfaces: "{{ vm_name }}"
      availability_set: "{{ availability_set_names[0] }}"
      image:
        offer: UbuntuServer
        publisher: Canonical
        sku: 16.04-LTS
        version: latest
      custom_data: |
        #!/bin/sh
        echo "custom_data was executed" > /tmp/custom_data.txt

- assert:
    that:
      - azure_vm.properties.provisioningState == 'Succeeded'
      - azure_vm.properties.availabilitySet.id
      # initial response from creation has no diagnosticsProfile
      # if you run it again however, there is one in the response
      # so we handle both cases
      - "'diagnosticsProfile' not in azure_vm.properties or not azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled"

- name: TEST | Get facts for virtual machine without boot diagnostics disabled
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
  register: output

- assert:
    that:
      - output.vms != []
      - not output.vms[0].boot_diagnostics.enabled
      - not output.vms[0].boot_diagnostics.storage_uri

- name: TEST | Enable boot diagnostics on an existing VM for the first time without specifying a storage account
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      boot_diagnostics:
        enabled: yes
        # without specifying storage_account you get a new default storage account for the VM
  register: output

- assert:
    that:
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.storageUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.consoleScreenshotBlobUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.serialConsoleLogBlobUri is defined

- name: TEST | Get facts for virtual machine with boot diagnostics enabled
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
  register: output

- assert:
    that:
      - output.vms != []
      - output.vms[0].boot_diagnostics.enabled
      - output.vms[0].boot_diagnostics.storage_uri is defined
      - output.vms[0].boot_diagnostics.console_screenshot_uri is defined
      - output.vms[0].boot_diagnostics.serial_console_log_uri is defined

- name: TEST | Change the boot diagnostics storage account while enabled
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      boot_diagnostics:
        enabled: yes
        storage_account: "{{ storage_accounts[1] }}"
  ignore_errors: yes
  register: output

- name: TEST | Disable boot diagnostics and change the storage account at the same time
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      boot_diagnostics:
        enabled: no
        storage_account: "{{ storage_accounts[0] }}"
  register: output

- assert:
    that:
      - not azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled

- name: TEST | Re-enable boot diagnostics on an existing VM where it was previously configured
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      boot_diagnostics:
        enabled: yes
  register: output

- assert:
    that:
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.storageUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.consoleScreenshotBlobUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.serialConsoleLogBlobUri is defined

# - add_host:
#       name: new_azure_vm
#       ansible_host: '{{ output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}'
#       ansible_connection: paramiko  # not guaranteed to have sshpass...
#       ansible_user: adminuser
#       ansible_password: Password123!
#       ansible_host_key_checking: no

# - name: TEST | wait for SSH port to be open
#   wait_for:
#       host: '{{ hostvars["new_azure_vm"].ansible_host }}'
#       port: 22
#       timeout: 60
#       state: started

#- block:
#   TODO: figure out how to make this work under ansible-test with the coverage injector
#  - name: TEST | wait for host to answer on SSH
#    delegate_to: new_azure_vm
#    wait_for_connection:
#  - name: TEST | get content from custom_data script
#    raw: cat /tmp/custom_data.txt
#    register: custom_data_content

#  - name: TEST | assert contents
#    assert:
#        that: custom_data_content.stdout | regex_search('custom_data was executed')
#  delegate_to: new_azure_vm

#   TODO: figure out how to make this work under ansible-test with the coverage injector
#  - name: TEST | wait for file/content created by custom_data script
#    delegate_to: new_azure_vm
#    vars:
#      ansible_python_interpreter: python
#    wait_for:
#      path: /tmp/custom_data.txt
#      search_regex: ^custom_data was executed$
#      timeout: 20

- name: TEST | Restart the virtual machine
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      restarted: yes
      vm_size: Standard_A0
  register: output

- assert:
      that:
          - "azure_vm.powerstate in ['starting', 'running']"
          - output.changed

- name: TEST | Deallocate the virtual machine
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      allocated: no
      vm_size: Standard_A0
  register: output

- assert:
      that:
          - azure_vm.powerstate == 'deallocated'
          - output.changed

- name: TEST | Start the virtual machine
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      vm_size: Standard_A0
  register: output

- assert:
      that:
          - "azure_vm.powerstate in ['starting', 'running']"
          - output.changed

- name: TEST | Should be idempotent with a single NIC
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      vm_size: Standard_A0
      storage_account: "{{ storage_accounts[0] }}"
      storage_container: "{{ vm_name }}"
      storage_blob: "{{ vm_name }}.vhd"
      admin_username: adminuser
      admin_password: Password123!
      short_hostname: testvm
      os_type: Linux
      network_interfaces: "{{ vm_name }}"
      image:
        offer: UbuntuServer
        publisher: Canonical
        sku: 16.04-LTS
        version: latest
  register: output

- assert:
      that: not output.changed

- name: TEST | Resize VM
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      vm_size: Standard_A1
      storage_account: "{{ storage_accounts[0] }}"
      storage_container: "{{ vm_name }}"
      storage_blob: "{{ vm_name }}.vhd"
      admin_username: adminuser
      admin_password: Password123!
      short_hostname: testvm
      os_type: Linux
      network_interfaces: "{{ vm_name }}"
      image:
        offer: UbuntuServer
        publisher: Canonical
        sku: 16.04-LTS
        version: latest
  register: output

- assert:
      that:
        - output.changed
        - output.ansible_facts.azure_vm.properties.hardwareProfile.vmSize == "Standard_A1"

- name: TEST | Delete VM
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      state: absent
      vm_size: Standard_A0
  register: output

- name: TEST | NIC should be gone
  azure_rm_networkinterface_facts:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
  register: output

- assert:
      that: azure_networkinterfaces | length == 0

- name: TEST | PIP should be gone
  azure_rm_publicipaddress_facts:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
  register: output

- assert:
      that: azure_publicipaddresses | length == 0
