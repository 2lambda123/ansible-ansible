- name: TEST | Create virtual network
  azure_rm_virtualnetwork:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    address_prefixes: "10.10.0.0/16"

- name: TEST | Add subnet
  azure_rm_subnet:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    address_prefix: "10.10.0.0/24"
    virtual_network: "{{ vm_name }}"

- name: TEST | Create public ip
  azure_rm_publicipaddress:
    resource_group: "{{ resource_group }}"
    allocation_method: Static
    name: "{{ vm_name }}"

- name: TEST | Create security group
  azure_rm_securitygroup:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    purge_rules: yes
    rules:
      - name: ALLOW_SSH
        protocol: Tcp
        destination_port_range: 22
        access: Allow
        priority: 100
        direction: Inbound

      - name: ALLOW_HTTP
        protocol: Tcp
        destination_port_range: 80
        access: Allow
        priority: 110
        direction: Inbound

- name: TEST | Create NIC for single nic VM
  azure_rm_networkinterface:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    virtual_network: "{{ vm_name }}"
    subnet: "{{ vm_name }}"
    public_ip_name: "{{ vm_name }}"
    security_group: "{{ vm_name }}"

- name: TEST | Create virtual machine with a single NIC and no boot diagnostics
  register: output
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    vm_size: Standard_A0
    storage_account: "{{ storage_accounts[0] }}"
    storage_container: "{{ vm_name }}"
    storage_blob: "{{ vm_name }}.vhd"
    admin_username: adminuser
    admin_password: Password123!
    short_hostname: testvm
    os_type: Linux
    network_interfaces: "{{ vm_name }}"
    availability_set: "{{ availability_set_names[0] }}"
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: 16.04-LTS
      version: latest
    custom_data: |
      #!/bin/sh
      echo "custom_data was executed" > /tmp/custom_data.txt

- assert:
    that:
      - azure_vm.properties.provisioningState == 'Succeeded'
      - azure_vm.properties.availabilitySet.id
      # initial response from creation has no diagnosticsProfile
      # if you run it again however, there is one in the response
      # so we handle both cases
      - "'diagnosticsProfile' not in azure_vm.properties or not azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled"

- name: TEST | Get facts for virtual machine without boot diagnostics disabled
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
  register: vm_facts_no_boot_diag_result

- assert:
    that:
      - vm_facts_no_boot_diag_result.vms != []
      - not vm_facts_no_boot_diag_result.vms[0].boot_diagnostics.enabled
      - not vm_facts_no_boot_diag_result.vms[0].boot_diagnostics.storage_uri

- name: TEST | Enable boot diagnostics on an existing VM for the first time without specifying a storage account
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    boot_diagnostics:
      enabled: yes
      # without specifying storage_account you get a new default storage account for the VM

- assert:
    that:
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.storageUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.consoleScreenshotBlobUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.serialConsoleLogBlobUri is defined

- name: TEST | Get facts for virtual machine with boot diagnostics enabled
  azure_rm_virtualmachine_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
  register: vm_facts_boot_diag_result

- assert:
    that:
      - vm_facts_boot_diag_result.vms != []
      - vm_facts_boot_diag_result.vms[0].boot_diagnostics.enabled
      - vm_facts_boot_diag_result.vms[0].boot_diagnostics.storage_uri is defined
      - vm_facts_boot_diag_result.vms[0].boot_diagnostics.console_screenshot_uri is defined
      - vm_facts_boot_diag_result.vms[0].boot_diagnostics.serial_console_log_uri is defined

- name: TEST | Change the boot diagnostics storage account while enabled
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    boot_diagnostics:
      enabled: yes
      storage_account: "{{ storage_accounts[1] }}"
  ignore_errors: yes

- name: TEST | Disable boot diagnostics and change the storage account at the same time
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      boot_diagnostics:
        enabled: no
        storage_account: "{{ storage_accounts[0] }}"

- assert:
    that:
      - not azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled

- name: TEST | Re-enable boot diagnostics on an existing VM where it was previously configured
  azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      boot_diagnostics:
        enabled: yes
  register: reenable_boot_diag_result

- assert:
    that:
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.enabled
      - azure_vm.properties.diagnosticsProfile.bootDiagnostics.storageUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.consoleScreenshotBlobUri is defined
      - azure_vm.properties.instanceView.bootDiagnostics.serialConsoleLogBlobUri is defined

# - add_host:
#     name: new_azure_vm
#     ansible_host: '{{ reenable_boot_diag_result.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}'
#     ansible_connection: paramiko  # not guaranteed to have sshpass...
#     ansible_user: adminuser
#     ansible_password: Password123!
#     ansible_host_key_checking: no

# - name: TEST | wait for SSH port to be open
#   wait_for:
#     host: '{{ hostvars["new_azure_vm"].ansible_host }}'
#     port: 22
#     timeout: 60
#     state: started

# # TODO: figure out how to make this work under ansible-test with the coverage injector
# - block:
#     - name: TEST | wait for host to answer on SSH
#      delegate_to: new_azure_vm
#      wait_for_connection:

#     - name: TEST | get content from custom_data script
#      raw: cat /tmp/custom_data.txt
#      register: custom_data_content

#    - name: TEST | assert contents
#      assert:
#        that: custom_data_content.stdout | regex_search('custom_data was executed')
#   delegate_to: new_azure_vm

# # TODO: figure out how to make this work under ansible-test with the coverage injector
# - name: TEST | wait for file/content created by custom_data script
#   delegate_to: new_azure_vm
#   vars:
#     ansible_python_interpreter: python
#   wait_for:
#     path: /tmp/custom_data.txt
#     search_regex: ^custom_data was executed$
#     timeout: 20

- name: TEST | Restart the virtual machine
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    restarted: yes
    vm_size: Standard_A0
  register: restart_result

- assert:
    that:
      - "azure_vm.powerstate in ['starting', 'running']"
      - restart_result is changed

- name: TEST | Deallocate the virtual machine
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    allocated: no
    vm_size: Standard_A0
  register: deallocate_result

- assert:
    that:
      - azure_vm.powerstate == 'deallocated'
      - deallocate_result is changed

- name: TEST | Start the virtual machine
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    vm_size: Standard_A0
  register: start_result

- assert:
    that:
      - "azure_vm.powerstate in ['starting', 'running']"
      - start_result is changed

- name: TEST | Should be idempotent with a single NIC
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    vm_size: Standard_A0
    storage_account: "{{ storage_accounts[0] }}"
    storage_container: "{{ vm_name }}"
    storage_blob: "{{ vm_name }}.vhd"
    admin_username: adminuser
    admin_password: Password123!
    short_hostname: testvm
    os_type: Linux
    network_interfaces: "{{ vm_name }}"
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: 16.04-LTS
      version: latest
  register: single_nic_result

- assert:
    that: single_nic_result is not changed

- name: TEST | Resize VM
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    vm_size: Standard_A1
    storage_account: "{{ storage_accounts[0] }}"
    storage_container: "{{ vm_name }}"
    storage_blob: "{{ vm_name }}.vhd"
    admin_username: adminuser
    admin_password: Password123!
    short_hostname: testvm
    os_type: Linux
    network_interfaces: "{{ vm_name }}"
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: 16.04-LTS
      version: latest
  register: resize_result

- assert:
    that:
      - resize_result is changed
      - resize_result.ansible_facts.azure_vm.properties.hardwareProfile.vmSize == "Standard_A1"

- name: TEST | Delete VM
  azure_rm_virtualmachine:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    state: absent
    vm_size: Standard_A0

- name: TEST | NIC should be gone
  azure_rm_networkinterface_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"

- assert:
    that: azure_networkinterfaces | length == 0

- name: TEST | PIP should be gone
  azure_rm_publicipaddress_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"

- assert:
    that: azure_publicipaddresses | length == 0

- name: TEST | Destroy NIC
  azure_rm_networkinterface:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    state: absent

- name: TEST | Destroy security groups
  azure_rm_securitygroup:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_vame }}"
    state: absent

- name: TEST | Destroy subnet
  azure_rm_subnet:
      resource_group: "{{ resource_group }}"
      virtual_network: "{{ vm_name }}"
      name: "{{ vm_name }}"
      state: absent

- name: TEST | Destroy virtual network
  azure_rm_virtualnetwork:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    state: absent

- name: TEST | Destroy public ip
  azure_rm_publicipaddress:
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name }}"
    state: absent
