---

- name: Create public ip
  azure_rm_publicipaddress:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    allocation_method: Static
    name: "{{ hostvars['localhost'].pip }}"

- name: Create security group
  azure_rm_securitygroup:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].nsg }}"
    purge_rules: yes
    rules:
      - name: ALLOW_SSH
        protocol: Tcp
        destination_port_range: 22
        access: Allow
        priority: 100
        direction: Inbound
      - name: ALLOW_HTTP
        protocol: Tcp
        destination_port_range: 80
        access: Allow
        priority: 110
        direction: Inbound

- name: Create storage account
  azure_rm_storageaccount:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].storage_account }}"
    account_type: "{{ hostvars['localhost'].storage_type }}"

- name: Create an availability set for blob storage
  azure_rm_availabilityset:
    name: "{{ hostvars['localhost'].availability_set_blob }}"
    resource_group: "{{ hostvars['localhost'].resource_group }}"

- name: Create first NIC with PublicIP
  azure_rm_networkinterface:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_nics[0] }}"
    virtual_network: "{{ hostvars['localhost'].vnet }}"
    subnet: "{{ hostvars['localhost'].subnet }}"
    security_group: "{{ hostvars['localhost'].nsg }}"
    public_ip_name: "{{ hostvars['localhost'].pip }}"

- name: Create second NIC
  azure_rm_networkinterface:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_nics[1] }}"
    virtual_network: "{{ hostvars['localhost'].vnet }}"
    subnet: "{{ hostvars['localhost'].subnet }}"
    security_group: "{{ hostvars['localhost'].nsg }}"

# Test VM basics; Legacy storage, nic creation and removal of resources post VM delete
- name: Create virtual machine with a single NIC and legacy storage
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    short_hostname: "{{ hostvars['localhost'].vm_names.basic }}"
    admin_username: "{{ hostvars['localhost'].admin_user }}"
    admin_password: "{{ hostvars['localhost'].password }}"
    availability_set: "{{ hostvars['localhost'].availability_set_blob }}"
    network_interface_names: "{{ hostvars['localhost'].vm_nics[0] }}"
    storage_account: "{{ hostvars['localhost'].storage_account }}"
    storage_container: "{{ hostvars['localhost'].vm_names.basic }}"
    storage_blob: "{{ hostvars['localhost'].vm_names.basic }}.vhd"
    os_type: "{{ hostvars['localhost'].os_type }}"
    image: "{{ hostvars['localhost'].image }}"
    vm_size: "{{ hostvars['localhost'].vm_size }}"
    custom_data: |
      #!/bin/sh
      echo "{{ hostvars['localhost'].target_custom_data }}" > "{{ hostvars['localhost'].target_custom_data_file }}"
  register: output

- assert:
    that:
      - azure_vm.properties.availabilitySet.id

- name: Should be idempotent with a single NIC and legacy storage
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    short_hostname: "{{ hostvars['localhost'].vm_names.basic }}"
    admin_username: "{{ hostvars['localhost'].admin_user }}"
    admin_password: "{{ hostvars['localhost'].password }}"
    availability_set: "{{ hostvars['localhost'].availability_set_blob }}"
    network_interface_names: "{{ hostvars['localhost'].vm_nics[0] }}"
    storage_account: "{{ hostvars['localhost'].storage_account }}"
    storage_container: "{{ hostvars['localhost'].vm_names.basic }}"
    storage_blob: "{{ hostvars['localhost'].vm_names.basic }}.vhd"
    os_type: "{{ hostvars['localhost'].os_type }}"
    image: "{{ hostvars['localhost'].image }}"
    vm_size: "{{ hostvars['localhost'].vm_size }}"
  register: output

- assert:
    that: not output.changed

- set_fact:
    new_azure_vm_hostname: "{{ output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"

#- add_host:
    #name: new_azure_vm
    #ansible_host: "{{ new_azure_vm_hostname }}"
    #ansible_connection: paramiko  # not guaranteed to have sshpass...
    #ansible_user: "{{ hostvars['localhost'].admin_user }}"
    #ansible_password: "{{ hostvars['localhost'].password }}"
    #ansible_host_key_checking: false

#- name: wait for SSH port to be open
  #wait_for:
    #host: "{{ new_azure_vm_hostname }}"
    #port: 22
    #timeout: 60
    #state: started

#- block:
##   TODO: figure out how to make this work under ansible-test with the coverage injector
  #- name: wait for host to answer on SSH
    #delegate_to: new_azure_vm
    #wait_for_connection:
  #- name: get content from custom_data script
    #raw: cat "{{ hostvars['localhost'].target_custom_data_file }}"
    #register: custom_data_content
  #- name: assert contents
    #assert:
      #that: custom_data_content.stdout is match('^' + target_custom_data + '$')
    #delegate_to: new_azure_vm

##   TODO: figure out how to make this work under ansible-test with the coverage injector
  #- name: wait for file/content created by custom_data script
    #delegate_to: new_azure_vm
    #vars:
      #ansible_python_interpreter: python
    #wait_for:
      #path: /tmp/custom_data.txt
      #search_regex: ^custom_data was executed$
      #timeout: 20

- name: Restart the virtual machine
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    restarted: yes
    vm_size: "{{ hostvars['localhost'].vm_size }}"
  register: output

- assert:
    that:
      - "azure_vm.powerstate in ['starting', 'running']"
      - output.changed

- name: Deallocate the virtual machine
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    allocated: no 
    vm_size: "{{ hostvars['localhost'].vm_size }}"
  register: output

- assert:
    that:
      - azure_vm.powerstate == 'deallocated'
      - output.changed

- name: Add a second NIC to the virtual machine
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    short_hostname: "{{ hostvars['localhost'].vm_names.basic }}"
    admin_username: "{{ hostvars['localhost'].admin_user }}"
    admin_password: "{{ hostvars['localhost'].password }}"
    availability_set: "{{ hostvars['localhost'].availability_set_blob }}"
    network_interface_names: "{{ hostvars['localhost'].vm_nics }}"
    storage_account: "{{ hostvars['localhost'].storage_account }}"
    storage_container: "{{ hostvars['localhost'].vm_names.basic }}"
    storage_blob: "{{ hostvars['localhost'].vm_names.basic}}.vhd"
    os_type: "{{ hostvars['localhost'].os_type }}"
    image: "{{ hostvars['localhost'].image }}"
    vm_size: "{{ hostvars['localhost'].vm_size }}"
  register: output

- assert:
    that:
      - output.changed
      - output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces | length == hostvars['localhost'].vm_nics | length

- name: Should be idepotent with a second NIC
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    short_hostname: "{{ hostvars['localhost'].vm_names.basic }}"
    admin_username: "{{ hostvars['localhost'].admin_user }}"
    admin_password: "{{ hostvars['localhost'].password }}"
    availability_set: "{{ hostvars['localhost'].availability_set_blob }}"
    network_interface_names: "{{ hostvars['localhost'].vm_nics }}"
    storage_account: "{{ hostvars['localhost'].storage_account }}"
    storage_container: "{{ hostvars['localhost'].vm_names.basic }}"
    storage_blob: "{{ hostvars['localhost'].vm_names.basic}}.vhd"
    os_type: "{{ hostvars['localhost'].os_type }}"
    image: "{{ hostvars['localhost'].image }}"
    vm_size: "{{ hostvars['localhost'].vm_size }}"
  register: output

- assert:
    that:
      - not output.changed

- name: Start the virtual machine
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    vm_size: "{{ hostvars['localhost'].vm_size }}"
  register: output

- assert:
    that:
      - "azure_vm.powerstate in ['starting', 'running']"

- name: Delete 
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    state: absent
    vm_size: "{{ hostvars['localhost'].vm_size }}"

- name: NICs should be gone
  azure_rm_networkinterface_facts:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
  register: output

- assert:
    that: azure_networkinterfaces | length == 0

- name: PIP should be gone
  azure_rm_publicipaddress_facts:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].pip }}"
  register: output

- assert:
    that: azure_publicipaddresses | length == 0

- name: Delete storage account
  azure_rm_storageaccount:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].storage_account }}"
    state: absent

# Test VM creation fails if image or plan mis-specified
# TODO: Until we have a module to create/delete images this is the best tests
# I can do
- name: assert error thrown with invalid image dict
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    state: present
    image:
      offer: UbuntuServer
  register: fail_invalid_image_dict
  failed_when: 'fail_invalid_image_dict.msg != "parameter error: expecting image to contain [publisher, offer, sku, version] or [name, resource_group]"'

- name: assert error thrown with invalid image type
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    state: present
    image:
    - testing
  register: fail_invalid_image_type
  failed_when: 'fail_invalid_image_type.msg != "parameter error: expecting image to be a string or dict not list"'

- name: assert error finding missing custom image
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    state: present
    image: invalid-image
  register: fail_missing_custom_image
  failed_when: fail_missing_custom_image.msg != "Error could not find image with name invalid-image"

- name: assert error finding missing custom image (dict style)
  azure_rm_virtualmachine:
    resource_group: "{{ hostvars['localhost'].resource_group }}"
    name: "{{ hostvars['localhost'].vm_names.basic }}"
    state: present
    image:
      name: invalid-image
  register: fail_missing_custom_image_dict
  failed_when: fail_missing_custom_image_dict.msg != "Error could not find image with name invalid-image"
