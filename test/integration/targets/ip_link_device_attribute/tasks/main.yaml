- become: true
  block:
    - name: Ensure iproute2 is present
      become: true
      package: name=iproute2 state=present
    - name: Integration tests for ip_link_device_attribute
      become: true
      block:
        - name: Create veth (normal interface)
          command: ip link add dev vethN type veth peer name vethNP
        - name: Create vcan (interface without mac)
          command: ip link add dev vcan_example type vcan
        - name: assign vcan alias
          command: ip link set dev vcan_example alias foo
        - name: Create veths (group)
          command: ip link add dev {{ item }} type veth peer name {{ item }}_peer
          loop:
           - gr1
           - gr2
        - name: Create namespaces
          ip_netns: name={{ item }}
          loop:
           - ip_net_set_src
           - ip_net_set_dst
        - name: Test1 - set paramters for veth
          ip_link_device_attribute:
              name: vethN
              state: up
              mtu: '{{ mock_mtu }}'
              address: '{{ mock_mac }}'
              broadcast: '{{ mock_broadcast }}'
              alias: vethalias
              promisc: on
              txqueuelen: '{{ mock_txqlen }}'
              arp: off
              group: '{{ mock_group }}'
          register: ip_link_device_attribute_res
        - name: Test1 - check module output
          assert:
              that:
                  - ip_link_device_attribute_res.interfaces|length == 1
                  - ip_link_device_attribute_res.interfaces[0].name == 'vethN'
                  - ip_link_device_attribute_res.interfaces[0].alias == 'vethalias'
                  - ip_link_device_attribute_res.interfaces[0].txqueuelen == mock_txqlen
                  - ip_link_device_attribute_res.interfaces[0].promisc == true
                  - ip_link_device_attribute_res.interfaces[0].broadcast == mock_broadcast
                  - ip_link_device_attribute_res.interfaces[0].state == 'up'
                  - ip_link_device_attribute_res.interfaces[0].group == mock_group
        - name: Test1 - gather results
          command: ip link show dev vethN
          register: test1_res
        - name: Test1 - check results
          assert:
              that:
                 - ('UP' in test1_res.stdout)
                 - ('mtu '+ mock_mtu|string in test1_res.stdout)
                 - ('alias vethalias' in test1_res.stdout)
                 - ('PROMISC' in test1_res.stdout)
                 - ('NOARP' in test1_res.stdout)
                 - ('qlen ' + mock_txqlen|string in test1_res.stdout)
                 - ('ether ' +  mock_mac in test1_res.stdout)
                 - ('brd ' + mock_broadcast in test1_res.stdout)
                 - ('group ' + mock_group in test1_res.stdout)
        - name: Test2 - move veth into namespace
          ip_link_device_attribute:
            name: vethN
            netns: ip_net_set_src
            alias: vethalias2
            state: down
          register: ip_link_device_attribute_res
        - name: Test2 - check module output
          assert:
              that:
                - ip_link_device_attribute_res.interfaces|length == 1
                - ip_link_device_attribute_res.interfaces[0].name == 'vethN'
                - ip_link_device_attribute_res.interfaces[0].alias == 'vethalias2'
                - ip_link_device_attribute_res.interfaces[0].txqueuelen == mock_txqlen
                - ip_link_device_attribute_res.interfaces[0].promisc == true
                - ip_link_device_attribute_res.interfaces[0].address == mock_mac
                - ip_link_device_attribute_res.interfaces[0].broadcast == mock_broadcast
                - ip_link_device_attribute_res.interfaces[0].state == 'down'
                - ip_link_device_attribute_res.interfaces[0].group == mock_group
        - name: Test2 - check results
          # we just check if interface is in namespace
          command: ip net exec ip_net_set_src ip link show dev vethN
        - name: Test3 - setup, Move gr1 into src namespace
          command: ip link set dev gr1 netns ip_net_set_src
        - name: Test3 - setup, Move gr2 into dst namespace
          command: ip link set dev gr2 netns ip_net_set_dst
        - name: Test3 - setup, Restore group membership for gr1
          command: ip net exec ip_net_set_src ip link set dev gr1 group 42
        - name: Test3 - setup, Restore group membership for gr2
          command: ip net exec ip_net_set_dst ip link set dev gr2 group 42
        - name: Test3 - move group 42 into dst namespace, partial move
          ip_link_device_attribute:
            group_id: '42'
            namespace: ip_net_set_src
            netns: ip_net_set_dst
            state: up
            promisc: true
          register: ip_link_device_attribute_res
        - name: Test 3 check module output
          assert:
             that:
               - ip_link_device_attribute_res.interfaces|length == 2
               - ip_link_device_attribute_res.interfaces[0].state == 'up'
               - ip_link_device_attribute_res.interfaces[1].state == 'up'
               - ip_link_device_attribute_res.interfaces[0].promisc == True
               - ip_link_device_attribute_res.interfaces[1].promisc == True
        - name: Test3 - check result
          command: ip net exec ip_net_set_dst ip link show {{ item }}
          loop: ['gr1', 'gr2']
        - name: Test4 - non-ethernet interface
          ip_link_device_attribute:
              device: vcan_example  # test alias use as well
              state: up
          register: ip_link_device_attribute_res
        - name: Test4 - check output results
          assert:
              that:
                  - ip_link_device_attribute_res.interfaces[0].state == 'up'
                  - ip_link_device_attribute_res.interfaces[0].alias == 'foo'
                  - ip_link_device_attribute_res.interfaces[0].name == 'vcan_example'
        - name: Test5 - check idempotency
          ip_link_device_attribute:
              device: vcan_example
              state: up
          register: ip_link_device_attribute_res
        - name: Test5 - run asserts for test
          assert:
            that:
              - ip_link_device_attribute_res is not changed
        - name: Test6 - check check_mode, prepare
          command: ip net exec ip_net_set_dst ip link show gr1
          register: test6_pre
        - name: Test6  check preparation
          assert:
              that:
                '"UP" in test6_pre.stdout'
        - name: Test6 - check check_mode, run1
          check_mode: true
          ip_link_device_attribute:
              name: gr1
              namespace: ip_net_set_dst
              state: down
          register: ip_link_device_attribute_res
        - name: Tes6 - check assertion for run1
          assert:
            that:
              ip_link_device_attribute_res is changed
        - name: Test6 - check check_mode, run2
          check_mode: true
          ip_link_device_attribute:
              name: gr1
              namespace: ip_net_set_dst
              state: down
          register: ip_link_device_attribute_res
        - name: Tes6 - check assertions for run2
          assert:
            that:
              ip_link_device_attribute_res is changed
        - name: Tes6 - get results
          command: ip net exec ip_net_set_dst ip link show gr1
          register: test6_res
        - name: Test6 - check results
          assert:
            that:
              '"UP" in test6_res.stdout'
      always:
          - name: Delete namespaces
            ip_netns: name={{item}} state=absent
            with_items:
              - ip_net_set_src
              - ip_net_set_dst
          - name: Delete interfaces
            command: ip link delete '{{ item }}'
            # if tests failed we want to cleanup, but if tests passed
            # those interfaces are removed together with namespaces
            failed_when: false
            with_items:
              - vcan_example
              - vethN
              - gr1
              - gr2
  when: ansible_virtualization_type | default('') != 'docker'
