---
- name: test ec2_snapshot incomplete parameters

  block:

    - name: set connection information for all tasks
      set_fact:
        aws_connection_info: &aws_connection_info
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          security_token: "{{ security_token }}"
          region: "{{ aws_region }}"
      no_log: yes

    # ============================================================

    - name: test failure with no parameters
      ec2_snapshot:
      register: result
      ignore_errors: true

    - name: assert failure with no parameters
      assert:
        that:
           - result.failed
           - result.msg == "Either region or ec2_url must be specified"

    # ============================================================

    - name: test failure with no credentials
      ec2_snapshot:
        snapshot_id: snap-12345678912345678
        state: present
        snapshot_tags:
          Another: Tag
          Ansible: IntegrationTests
        region: "{{ ec2_region }}"
      register: result
      ignore_errors: true

    - name:
      assert:
        that:
          - result.failed
          - result.msg == "No handler was ready to authenticate. 1 handlers were checked. ['HmacAuthV4Handler'] Check your credentials"

    # ============================================================

    - name: test failure with invalid profile
      ec2_snapshot:
        profile: doesnotexist
        region: "{{ ec2_region }}"
        state: present
        snapshot_id: snap-12345678912345678
      register: result
      ignore_errors: true

    - name: debug result
      debug: var=result

    - name: assert a helpful error is provided
      assert:
        that:
          - result.msg == 'Profile given for AWS was not found.  Please fix and retry.'

    # ============================================================

    - name: test deleting a snapshot without providing a unique identifier
      ec2_snapshot:
        state: absent
        <<: *aws_connection_info
      ignore_errors: true
      register: result

    - name: assert failure
      assert:
        that:
          - result.failed
          - result.msg == "One and only one of volume_id or instance_id or snapshot_id must be specified"

    # ============================================================

    - name: test deleting a snapshot providing only the volume id
      ec2_snapshot:
        state: absent
        volume_id: vol-12345678912345678
        <<: *aws_connection_info
      ignore_errors: true
      register: result

    - name: assert failure
      assert:
        that:
          - result.failed
          - result.msg == "snapshot_id must be set when state is absent"

    # ============================================================

- name: run ec2_snapshot functional tests

  block:

    # ============================================================

        # Set up VPC, subnet, security group, instance

    - name: Announce setup start
      debug:
        msg: "***** SETTING UP TESTING DEPENDENCIES *****"

    - name: create a VPC to test in
      ec2_vpc_net:
        cidr_block: 10.0.0.0/24
        state: present
        name: '{{ test_id }}_setup'
        resource_tags:
          Name: '{{ test_id }}_setup'
        <<: *aws_connection_info
      register: setup_vpc

    - name: create a key pair to use for creating an ec2 instance
      ec2_key:
        name: '{{ test_id }}_setup'
        state: present
        <<: *aws_connection_info
      register: setup_key

    - name: create a subnet to use for creating an ec2 instance
      ec2_vpc_subnet:
        az: '{{ ec2_region }}a'
        tags: '{{ test_id }}_setup'
        vpc_id: '{{ setup_vpc.vpc.id }}'
        cidr: 10.0.0.0/24
        state: present
        resource_tags:
          Name: '{{ test_id }}_setup'
        <<: *aws_connection_info
      register: setup_subnet

    - name: create a security group to use for creating an ec2 instance
      ec2_group:
        name: '{{ test_id }}_setup'
        description: 'created by Ansible integration tests'
        state: present
        vpc_id: '{{ setup_vpc.vpc.id }}'
        <<: *aws_connection_info
      register: setup_sg

    - name: provision ec2 instance to create an image
      ec2:
        key_name: '{{ setup_key.key.name }}'
        instance_type: t2.micro
        state: present
        image: '{{ ec2_ami_image[ec2_region] }}'
        wait: yes
        instance_tags:
          '{{ test_id }}_instance_setup': 'integration_tests'
        group_id: '{{ setup_sg.group_id }}'
        vpc_subnet_id: '{{ setup_subnet.subnet.id }}'
        <<: *aws_connection_info
      register: setup_instance

    - name: Announce testing start
      debug:
        msg: "***** SETTING UP TESTING DEPENDENCIES COMPLETE. RUNNING TESTS. *****"

    # ============================================================

    - name: create a snapshot of the instance
      ec2_snapshot:
        instance_id: '{{ setup_instance.instance_ids[0] }}'
        device_name: /dev/xvda
        state: present
        snapshot_tags:
          Ansible: IntegrationTests
        <<: *aws_connection_info
      register: snapshot_1

    - name: assert that a snapshot was created
      assert:
        that:
          - snapshot_1.changed
          - snapshot_1.snapshot_id.startswith('snap-')
          - snapshot_1.volume_id.startswith('vol-')
          - snapshot_1.volume_size == 8
          - "snapshot_1.tags == {'Ansible': 'IntegrationTests'}"

    # ============================================================

    - name: wait to avoid rate limits
      pause:
        seconds: 30

    # ============================================================

# FIXME: Currently ec2_snapshot does not support adding or removing tags
#    - name: modify snapshot tags
#      ec2_snapshot:
#        ec2_region: '{{ec2_region}}'
#        ec2_access_key: '{{ec2_access_key}}'
#        ec2_secret_key: '{{ec2_secret_key}}'
#        security_token: '{{security_token}}'
#        snapshot_id: '{{ snapshot.snapshot_id }}'
#        state: present
#        snapshot_tags:
#          Another: Tag
#          Ansible: IntegrationTests
#      register: snapshot

#    - name: assert that tags have been modified
#      assert:
#        that:
#          - snapshot.changed
#          - "'Another' in snapshot.tags"
#          - "'Ansible' in snapshot.tags"

    # ============================================================

# FIXME: currently ec2_snapshot does not support creating encrypted snapshots

    # ============================================================

    - name: create a snapshot from the volume id
      ec2_snapshot:
        volume_id: '{{ snapshot_1.volume_id }}'
        state: present
        snapshot_tags:
          Another: Tag
          Ansible: IntegrationTests
        <<: *aws_connection_info
      register: snapshot_2

    - name: assert a new snapshot has been created
      assert:
        that:
          - snapshot_1.snapshot_id != snapshot_2.snapshot_id
          - snapshot_2.changed
          - "'Another' in snapshot_2.tags"
          - "'Ansible' in snapshot_2.tags"

    # ============================================================

    - name: wait to avoid rate limits
      pause:
        seconds: 30

    # ============================================================

    - name: test deleting a snapshot providing snapshot_id
      ec2_snapshot:
        state: absent
        snapshot_id: '{{ snapshot_1.snapshot_id }}'
        <<: *aws_connection_info
      ignore_errors: true
      register: result

    - name: assert the module shows the snapshot was deleted
      assert:
        that:
          - result.changed

    - name: verify the snapshot was deleted
      ec2_snapshot_facts:
        snapshot_ids:
          - '{{ snapshot_1.snapshot_id }}'
        <<: *aws_connection_info
      ignore_errors: true
      register: result

    - name: assert no snapshot with that id exists
      assert:
        that:
          - not result.snapshots

    # ============================================================

  always:

    # ============================================================


    # TEAR DOWN: snapshot, ec2 instance, ec2 key pair, security group, vpc
    - name: Announce teardown start
      debug:
        msg: "***** TESTING COMPLETE. COMMENCE TEARDOWN *****"

    - name: remove snapshots
      ec2_snapshot:
        state: absent
        snapshot_id: '{{ item }}'
        <<: *aws_connection_info
      with_items:
        - "{{ snapshot_1.snapshot_id }}"
        - "{{ snapshot_2.snapshot_id }}"
      ignore_errors: yes

    - name: remove setup ec2 instance
      ec2:
        instance_type: t2.micro
        instance_ids: '{{ setup_instance.instance_ids }}'
        state: absent
        wait: yes
        instance_tags:
          '{{ test_id }}_instance_setup': 'integration_tests'
        group_id: '{{ setup_sg.group_id }}'
        vpc_subnet_id: '{{ setup_subnet.subnet.id }}'
        <<: *aws_connection_info
      ignore_errors: yes

    - name: remove setup keypair
      ec2_key:
        name: '{{ test_id }}_setup'
        state: absent
        <<: *aws_connection_info
      ignore_errors: yes

    - name: remove setup security group
      ec2_group:
        name: '{{ test_id }}_setup'
        description: 'created by Ansible integration tests'
        state: absent
        vpc_id: '{{ setup_vpc.vpc.id }}'
        <<: *aws_connection_info
      ignore_errors: yes

    - name: remove setup subnet
      ec2_vpc_subnet:
        az: '{{ ec2_region }}a'
        tags: '{{ test_id }}_setup'
        vpc_id: '{{ setup_vpc.vpc.id }}'
        cidr: 10.0.0.0/24
        state: absent
        resource_tags:
          Name: '{{ test_id }}_setup'
        <<: *aws_connection_info
      ignore_errors: yes

    - name: remove setup VPC
      ec2_vpc_net:
        cidr_block: 10.0.0.0/24
        state: absent
        name: '{{ test_id }}_setup'
        resource_tags:
          Name: '{{ test_id }}_setup'
        <<: *aws_connection_info
      ignore_errors: yes
