---

- name: Generate service base name
  set_fact:
    service_base_name: "{{ 'ansible-test-%0x' % ((2**32) | random) }}"

- name: Registering service names
  set_fact:
    service_name_1: "{{ service_base_name ~ '-1' }}"
    service_name_2: "{{ service_base_name ~ '-2' }}"
    service_name_3: "{{ service_base_name ~ '-3' }}"

- block:
  - name: Make sure we're not already using Docker swarm
    docker_swarm:
      state: absent
      force: true

  - name: Try to get docker_swarm_service_info when docker is not running in swarm mode
    docker_swarm_service_info:
    ignore_errors: yes
    register: output

  - name: assert failure when called when swarm is not in use or not run on manager node
    assert:
      that:
        - 'output is failed'
        - 'output.msg == "Error running docker swarm module: must run on swarm manager node"'

  - name: Create a Swarm cluster
    docker_swarm:
      state: present
    register: output

  - name: Create services
    docker_swarm_service:
      name: "{{ service_name }}"
      image: alpine:3.8
    loop:
      - "{{ service_name_1 }}"
      - "{{ service_name_2 }}"
      - "{{ service_name_3 }}"
    loop_control:
      loop_var: service_name

  - name: Try to get docker_swarm_service_info for a single service
    docker_swarm_service_info:
      name: "{{ service_name_1 }}"
    register: output

  - name: assert reading reading service info
    assert:
      that:
        - 'output.services|length == 1'
        - 'output.services[0].ID is string'

  - name: Try to get docker_swarm_service_info for all services
    docker_swarm_service_info:
    register: output

  - name: assert reading reading service info
    assert:
      that:
        - 'output.services|length == 3'
        - 'output.services[0].ID is string'
        - 'output.services[1].ID is string'
        - 'output.services[2].ID is string'

  - name: Try to get docker_swarm_service_info for multiple services
    docker_swarm_service_info:
      name:
        - "{{ service_name_1 }}"
        - "{{ service_name_2 }}"
    register: output

  - name: assert reading reading service info
    assert:
      that:
        - 'output.services|length == 2'
        - 'output.services[0].ID is string'
        - 'output.services[1].ID is string'

  - name: Create random name
    set_fact:
      random_service_name: "{{ 'random-service-%0x' % ((2**32) | random) }}"

  - name: Try to get docker_swarm_service_info using random service name as parameter
    docker_swarm_service_info:
      name: "{{ random_service_name }}"
    register: output

  - name: assert reading reading service info
    assert:
      that:
        - 'output.services|length == 0'

  always:
    - name: Remove services
      docker_swarm_service:
        name: "{{ service_name }}"
        state: absent
      loop:
        - "{{ service_name_1 }}"
        - "{{ service_name_2 }}"
      loop_control:
        loop_var: service_name
      ignore_errors: yes

    - name: Remove swarm
      docker_swarm:
        state: absent
        force: true
