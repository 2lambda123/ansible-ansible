#!/usr/bin/env python
# (C) 2012, Michael DeHaan, <michael.dehaan@gmail.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

#######################################################

import sys
import getpass
from optparse import OptionParser

import ansible.playbook
import ansible.constants as C
from ansible import errors
from ansible import callbacks
from ansible import utils

def main(args):
    ''' run ansible-playbook operations '''

    # create parser for CLI options
    usage = "%prog <playbook-file1 [playbook-file2...]> [options]"
    options = {
       '-e' : dict(long='--extra-vars', dest='extra_vars',
                   help='pass in extra key=value variables from outside the playbook'),
       '-O' : dict(long='--override-hosts', dest="override_hosts", default=None,
                   help="run playbook against only hosts, ignorning the inventory file")
    }
    parser = utils.make_parser(options, constants=C, usage=usage)
    options, args = parser.parse_args(args)

    if len(args) == 0:
        parser.print_help(file=sys.stderr)
        #QUESTION for M.D. This would match bin/ansible's behavior. Do we want them consistent?
        #parser.print_help()
        return 1

    sshpass = None
    if options.ask_pass:
        sshpass = getpass.getpass(prompt="SSH password: ")
    override_hosts = None
    if options.override_hosts:
        override_hosts = options.override_hosts.split(",")

    # run all playbooks specified on the command line
    for playbook in args:

        stats = callbacks.AggregateStats()
        playbook_cb = callbacks.PlaybookCallbacks()
        runner_cb = callbacks.PlaybookRunnerCallbacks(stats)

        pb = ansible.playbook.PlayBook(
            playbook=playbook,module_path=options.module_path,
            host_list=options.inventory, override_hosts=override_hosts,
            extra_vars=options.extra_vars,
            forks=options.forks, debug=options.debug, verbose=True,
            remote_pass=sshpass, remote_port=options.remote_port,
            callbacks=playbook_cb, runner_callbacks=runner_cb, stats=stats,
            timeout=options.timeout,
        )
        try:

            pb.run()
            hosts = sorted(pb.stats.processed.keys())
            print "\n\nPLAY RECAP **********************\n\n"
            for h in hosts:
                t = pb.stats.summarize(h)
                print "%-30s : ok=%4s changed=%4s unreachable=%4s failed=%4s " % (h, 
                   t['ok'], t['changed'], t['unreachable'], t['failures']
                )
            print "\n"

        except errors.AnsibleError, e:
            print >>sys.stderr, "ERROR: %s" % e
            return 1

    return 0


if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv[1:]))
    except errors.AnsibleError, e:
        print >>sys.stderr, "ERROR: %s" % e
        sys.exit(1)

