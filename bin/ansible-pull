#!/usr/bin/env python

# ansible-pull is a script that runs ansible in local mode after
# checking out a playbooks directory from git.  There is an example
# playbook to bootstrap this script in the examples/ dir which
# installs ansible and sets it up to run on cron.
#
# usage:
#   ansible-pull -d /var/lib/ansible -U http://wherever/content.git [-C production] [path/playbook.yml]
#
# the -d and -U arguments are required; the -C argument is optional.
#
# ansible-pull accepts an optional argument to specify a playbook
# location underneath the workdir and then searches the git repo
# for playbooks in the following order, stopping at the first match:
#
# 1. $workdir/path/playbook.yml, if specified
# 2. $workdir/$hostname.yml
# 3. $workdir/local.yml
#
# the git repo must contain at least one of these playbooks.
#
# (c) 2012, Stephen Fromm <sfromm@gmail.com>
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys
import datetime
import platform
from optparse import OptionParser

DEFAULT_PLAYBOOK = 'local.yml'

def _run(cmd):
    cmd = subprocess.Popen(cmd, shell=True,
                           stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (out, err) = cmd.communicate()
    print out
    if cmd.returncode != 0:
        print err
    return cmd.returncode

def main(args):
    """ Set up and run a local playbook """
    usage = "%prog [options] [path/playbook.yml]"
    parser = OptionParser(usage=usage)
    parser.add_option('-d',
                      '--directory',
                      dest='dest',
                      default=None,
                      help='REQUIRED.  Directory for git repo clone and playbook run root.')
    parser.add_option('-U',
                      '--url',
                      dest='url',
                      default=None,
                      help='REQUIRED.  URL of git repo; if needed, specify credentials as https://<username>:<password>@github.com/...')
    parser.add_option('-C',
                      '--checkout',
                      dest='checkout',
                      default="HEAD",
                      help='Branch/Tag/Commit to checkout.  Defaults to HEAD.')
    options, args = parser.parse_args(args)

    if not options.dest:
      parser.error("directory for git clone and playbook run not specified, use -h for help")
      return 1

    if not options.url:
      parser.error("URL for git repo not specified, use -h for help")
      return 1

    now = datetime.datetime.now()
    print now.strftime("ansible-pull_started: %Y%m%d-%H%M-%S"), "\n"

    git_opts = "repo=%s dest=%s version=%s" % (options.url, options.dest, options.checkout)
    cmd = 'ansible all -c local -m git -a "%s"' % git_opts
    print "cmd=%s" % cmd, "\n"
    rc = _run(cmd)
    if rc != 0:
        return rc

    hostname = "%s.yml" % platform.node()

    if not args:
      try:
        with open('%s/%s' % (options.dest, hostname)) as f: pass
        playbook = hostname
        print 'using playbook %s/%s' % (options.dest, hostname)
      except IOError as e:
        print 'playbook %s/%s does not exist, falling back to %s' % (options.dest, hostname, DEFAULT_PLAYBOOK)
        try:
          with open('%s/%s' % (options.dest, DEFAULT_PLAYBOOK)) as f: pass
          playbook = DEFAULT_PLAYBOOK
          print 'using playbook %s/%s' % (options.dest, DEFAULT_PLAYBOOK)
        except IOError as e:
          print 'playbook %s/%s does not exist, no playbooks to run; use -h for help' % (options.dest, DEFAULT_PLAYBOOK)
          return 1
    else:
      try:
        with open('%s/%s' % (options.dest, args[0])) as f: pass
        playbook = args[0]
        print 'using playbook %s/%s' % (options.dest, args[0])
      except IOError as e:
        print 'playbook %s/%s does not exist, falling back to %s' % (options.dest, args[0], hostname)
        try:
          with open('%s/%s' % (options.dest, hostname)) as f: pass
          playbook = hostname
          print 'using playbook %s/%s' % (options.dest, hostname)
        except IOError as e:
          print 'playbook %s/%s does not exist, falling back to %s' % (options.dest, hostname, DEFAULT_PLAYBOOK)
          try:
            with open('%s/%s' % (options.dest, DEFAULT_PLAYBOOK)) as f: pass
            playbook = DEFAULT_PLAYBOOK
            print 'using playbook %s/%s' % (options.dest, DEFAULT_PLAYBOOK)
          except IOError as e:
            print 'playbook %s/%s does not exist, no playbooks to run; use -h for help' % (options.dest, DEFAULT_PLAYBOOK)
            return 1

    print

    cmd = 'ansible-playbook -c local %s' % playbook
    print "cmd=%s" % cmd
    os.chdir(options.dest)
    rc = _run(cmd)
    return rc

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv[1:]))
    except KeyboardInterrupt, e:
        print >>sys.stderr, "Exit on user request.\n"
        sys.exit(1)
