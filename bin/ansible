#!/usr/bin/env python

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

########################################################
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

__requires__ = ['ansible']
try:
    # Use pkg_resources to find the correct versions of libraries and set
    # sys.path appropriately when there are multiversion installs...
    import pkg_resources
except Exception:
    # ... we have code that better expresses the errors in the places where the
    # code is actually used (the deps are optional for many code paths) so we
    # don't want to fail here.
    pass

import os
import sys
import traceback

from ansible.errors import AnsibleError, AnsibleOptionsError, AnsibleParserError
from ansible.utils.display import Display
from ansible.utils.unicode import to_unicode

ERROR_GENERIC = 1
ERROR_HOST_FAILED = 2 # Reserved. Returned by TaskQueueManager
ERROR_HOST_UNREACHABLE = 3 # Reserved. Returned by TaskQueueManager
ERROR_PARSING = 4
ERROR_COMMAND_OPTIONS = 5
ERROR_EXECUTION_INTERRUPTED = 99
ERROR_UNEXPECTED = 250

########################################
### OUTPUT OF LAST RESORT ###
class LastResort(object):
    def display(self, msg):
        print(msg, file=sys.stderr)

    def error(self, msg, wrap_text=None):
        print(msg, file=sys.stderr)


########################################

if __name__ == '__main__':

    display = LastResort()
    cli = None
    me = os.path.basename(sys.argv[0])

    try:
        display = Display()

        if me == 'ansible-playbook':
            from ansible.cli.playbook import PlaybookCLI as mycli
        elif me == 'ansible':
            from ansible.cli.adhoc import AdHocCLI as mycli
        elif me == 'ansible-pull':
            from ansible.cli.pull import PullCLI as mycli
        elif me == 'ansible-doc':
            from ansible.cli.doc import DocCLI as mycli
        elif me == 'ansible-vault':
            from ansible.cli.vault import VaultCLI as mycli
        elif me == 'ansible-galaxy':
            from ansible.cli.galaxy import GalaxyCLI as mycli

        try:
            cli = mycli(sys.argv, display=display)
        except NameError:
            raise AnsibleError("Ansible sub-program not implemented: %s" % me)

        cli.parse()
        sys.exit(cli.run())

    except AnsibleOptionsError as e:
        cli.parser.print_help()
        display.error(to_unicode(e), wrap_text=False)
        sys.exit(ERROR_COMMAND_OPTIONS)

    except AnsibleParserError as e:
        display.error(to_unicode(e), wrap_text=False)
        sys.exit(ERROR_PARSING)

    except AnsibleError as e:
        display.error(to_unicode(e), wrap_text=False)
        sys.exit(ERROR_GENERIC)

    except KeyboardInterrupt:
        display.error("User interrupted execution")
        sys.exit(ERROR_EXECUTION_INTERRUPTED)

    except Exception as e:
        have_cli_options = cli is not None and cli.options is not None
        display.error('Unexpected Exception: %s' % to_unicode(e),
                      wrap_text=False)
        if (not have_cli_options
                or have_cli_options and cli.options.verbosity > 2):
            full_traceback = traceback.format_exc()
            display.display('the full traceback was:\n\n%s' % full_traceback)
        else:
            display.display("to see the full traceback, use -vvv")
        sys.exit(ERROR_UNEXPECTED)
