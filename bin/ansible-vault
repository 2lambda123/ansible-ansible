#!/usr/bin/env python

# (c) 2013, Jan-Piet Mens <jpmens()gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

########################################################

import os
import sys
import optparse

import ansible.constants as C
from ansible import errors
from ansible.utils import version

HAVE_VAULT=1
try:
    import keyczar.readers
    import keyczar.keys
    import base64
except ImportErrror:
    HAVE_VAULT=None
########################################################

def main():

    p = optparse.OptionParser(
        version=version("%prog"),
        usage='usage: %prog [options] file',
        description='Create variable for Ansible vault'
    )

    p.add_option("-K", "--keystore",
            action="store",
            dest="keystore",
            default=C.ANSIBLE_VAULT_KEYSTORE,
            help="Keystore directory (default: %s)" % C.ANSIBLE_VAULT_KEYSTORE)
    p.add_option("-k", "--key",
            action="store",
            default=C.ANSIBLE_VAULT_DEFAULTKEY,
            dest='keyname',
            help='Key name. (default: %s)' % C.ANSIBLE_VAULT_DEFAULTKEY)
    p.add_option("-V", "--var",
            action="store",
            default=None,
            dest='varname',
            help='Variable name')
    p.add_option('-v', action='version', help='Show version number and exit')

    (options, args) = p.parse_args()

    if HAVE_VAULT is None:
        sys.exit("ERROR: Vault is not available; keyczar is not installed")

    if options.keyname is None:
        sys.exit("ERROR: keyname must be specified")

    keydir = "%s/%s" % (options.keystore, options.keyname)
    if not os.path.isdir(keydir):
        sys.exit("ERROR: keystore %s is not a directory" % keydir)

    if len(args) != 1:
        p.print_help()

    # Load key from keystore
    try:
        filereader = keyczar.readers.FileReader(keydir)
        key = filereader.GetKey(1)

        aeskey = keyczar.keys.AesKey.Read(key)
    except keyczar.errors.KeyczarError, e:
        sys.exit("ERROR: Key doesn't exist in keydirectory: %s" % e)

    for filename in args:
        try:
            if filename == '-':
                f = sys.stdin
            else:
                f = open(filename, 'rb')
        except IOError:
            sys.exit("ERROR: Cannot open %s for reading" % filename)

        # Read base64-encoded string, decode, and pass the resulting
        # clear text to Keyczar for decrypting.

        cleartext = f.read()
        f.close()

        ciphertext = aeskey.Encrypt(cleartext)
        base64_str =  base64.b64encode(ciphertext)

        if options.varname is not None:
            print "%s: \"%s\"" % (options.varname, base64_str)
        else:
            print base64_str
   
if __name__ == '__main__':
    main()
