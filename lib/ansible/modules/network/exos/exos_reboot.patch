commit 090aeb0c22287c63b03bf060e03dc5ada29eda59
Author: Ujwal Komarla <ujwalkomarla@gmail.com>
Date:   Tue Aug 13 17:28:43 2019 -0400

    TRY

diff --git a/lib/ansible/module_utils/network/exos/exos.py b/lib/ansible/module_utils/network/exos/exos.py
index d8f6f959cb..1e8c57af62 100644
--- a/lib/ansible/module_utils/network/exos/exos.py
+++ b/lib/ansible/module_utils/network/exos/exos.py
@@ -65,14 +65,22 @@ class Cli:
             self._device_configs = to_text(out, errors='surrogate_then_replace').strip()
         return self._device_configs
 
-    def run_commands(self, commands, check_rc=True):
+    def run_commands(self, commands, check_rc=True, opts=None):
         """Runs list of commands on remote device and returns results
         """
+        if opts is None:
+            opts = {}
         connection = self._get_connection()
         try:
             response = connection.run_commands(commands=commands, check_rc=check_rc)
         except ConnectionError as exc:
-            self._module.fail_json(msg=to_text(exc, errors='surrogate_then_replace'))
+            code = getattr(exc, 'code', 1)
+            message = getattr(exc, 'err', exc)
+            err = to_text(message, errors='surrogate_then_replace')
+            if opts.get('ignore_timeout') and code:
+                responses.append(err)
+                return responses
+            self._module.fail_json(msg=to_text(exc, errors='surrogate_then_replace')
         return response
 
     def get_diff(self, candidate=None, running=None, diff_match='line', diff_ignore_lines=None, path=None, diff_replace='line'):
@@ -119,18 +127,28 @@ class HttpApi:
             self._device_configs = to_text(out, errors='surrogate_then_replace').strip()
         return self._device_configs
 
-    def run_commands(self, commands, check_rc=True):
+    def run_commands(self, commands, check_rc=True, opts=None):
         """Runs list of commands on remote device and returns results
         """
+        if opts is None:
+            opts = {}
         try:
             response = self._connection.run_commands(commands=commands, check_rc=check_rc)
         except ConnectionError as exc:
+            code = getattr(exc, 'code', 1)
+            message = getattr(exc, 'err', exc)
+            err = to_text(message, errors='surrogate_then_replace')
+            if opts.get('ignore_timeout') and code:
+                responses.append(err)
+                return responses
             self._module.fail_json(msg=to_text(exc, errors='surrogate_then_replace'))
         return response
 
-    def send_requests(self, requests):
+    def send_requests(self, requests, opts=None):
         """Send a list of http requests to remote device and return results
         """
+        if opts is None:
+            opts = {}
         if requests is None:
             raise ValueError("'requests' value is required")
 
@@ -139,6 +157,12 @@ class HttpApi:
             try:
                 response = self._connection.send_request(**req)
             except ConnectionError as exc:
+                code = getattr(exc, 'code', 1)
+                message = getattr(exc, 'err', exc)
+                err = to_text(message, errors='surrogate_then_replace')
+                if opts.get('ignore_timeout') and code:
+                    responses.append(err)
+                    return responses
                 self._module.fail_json(msg=to_text(exc, errors='surrogate_then_replace'))
             responses.append(response)
         return responses
@@ -183,9 +207,9 @@ def load_config(module, commands):
     return conn.run_commands(to_command(module, commands))
 
 
-def run_commands(module, commands, check_rc=True):
+def run_commands(module, commands, check_rc=True, opts=None):
     conn = get_connection(module)
-    return conn.run_commands(to_command(module, commands), check_rc=check_rc)
+    return conn.run_commands(to_command(module, commands), check_rc=check_rc, opts)
 
 
 def to_command(module, commands):
@@ -200,9 +224,9 @@ def to_command(module, commands):
     return transform(to_list(commands))
 
 
-def send_requests(module, requests):
+def send_requests(module, requests, opts=None):
     conn = get_connection(module)
-    return conn.send_requests(to_request(module, requests))
+    return conn.send_requests(to_request(module, requests, opts))
 
 
 def to_request(module, requests):
