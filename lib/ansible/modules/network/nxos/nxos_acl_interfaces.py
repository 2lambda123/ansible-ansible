#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for nxos_acl_interfaces
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
  'metadata_version': '1.1',
  'status': ['preview'],
  'supported_by': 'network'
}

DOCUMENTATION = """
---
module: nxos_acl_interfaces
version_added: '2.10'
short_description: Add and remove Access Control Lists on interfaces in NX-OS platform
description: Add and remove Access Control Lists on interfaces in NX-OS platform
author: Adharsh Srivats Rangarajan (@adharshsrivatsr)
notes:
  - Tested against NX-OS 7.3.(0)D1(1) on VIRL
options:
  running_config:
    description:
      - Used to parse given commands into structured format, only in parsed state
    type: str
  config:
    description: A list of interfaces to be configured with ACLs
    type: list
    elements: dict
    suboptions:
      name: 
        description: Name of the interface
        type: str
        required: true
      access_groups:
        description: List of address family indicators with ACLs to be configured on the interface
        type: list
        elements: dict
        suboptions:
          afi:
            description: Address Family Indicator of the ACLs to be configured
            type: str
            required: true
            choices: ['ipv4','ipv6']
          acls:
            description: List of Access Control Lists for the interface
            type: list
            elements: dict
            suboptions:
              name: 
                description: Name of the ACL to be added/removed
                type: str
                required: true
              direction:
                description: Direction to be applied for the ACL
                type: str
                required: true
                choices: ['in','out']
              port:
                description: Use ACL as port policy. 
                type: bool
  state: 
    description: The state the configuration should be left in
    type: str
    choices:
      - deleted
      - gathered
      - merged
      - overridden
      - rendered
      - replaced
      - parsed
    default: merged
"""
EXAMPLES = """





















"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.nxos.argspec.acl_interfaces.acl_interfaces import Acl_interfacesArgs
from ansible.module_utils.network.nxos.config.acl_interfaces.acl_interfaces import Acl_interfaces


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Acl_interfacesArgs.argument_spec,
                           supports_check_mode=True)

    result = Acl_interfaces(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
