#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for nxos_tms_global
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type  # pylint: disable=C0103

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': '<support_group>'
}

DOCUMENTATION = """
---
module: nxos_tms_global
version_added: 2.9
short_description: 'Telemetry Monitoring Service (TMS) global-level configuration'
description: 'Manages Telemetry Monitoring Service (TMS) global-level configuration'
author: Mike Wiebe (@mikewiebe)
notes:
  - 'Tested against N9k Version 7.0(3)I7(5) and later.'
options:
  config:
    description: The provided configuration
    type: list
    elements: dict
    suboptions:
      certificate:
        type: dict
        description:
          - Certificate SSL/TLS and hostname values.
          - Value must be a dict defining values for keys (key and hostname).
        suboptions:
          key:
            description:
            - Certificate key
            type: str
          hostname:
            description:
            - Certificate hostname
            type: str
      destination_profile_compression:
        type: str
        description:
          - Destination profile compression method.
        choices:
          - gzip
      destination_profile_source_interface:
        type: str
        description:
          - Destination profile source interface.
            Valid value is a str representing the source interface name.
      destination_profile_vrf:
        type: str
        description:
          - Destination profile vrf.
            Valid value is a str representing the vrf name.
  state:
    description:
    - Final configuration state
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using deleted

- name: Delete Global Telemetry Configuration
  nxos_tms_global:
    operation: deleted


# Using merged

- name: Merge Global Telemetry Configuration
  nxos_tms_global:
    config:
      certificate:
        key: /bootflash/server.key
        hostname: localhost
      destination_profile_compression: gzip
      destination_profile_source_interface: Ethernet1/1
      destination_profile_vrf: management
    operation: merged


# Using overridden

- name: Override Global Telemetry Configuration
  nxos_tms_global:
    config:
      certificate:
        key: /bootflash/server.key
        hostname: localhost
      destination_profile_compression: gzip
      destination_profile_source_interface: Ethernet1/1
      destination_profile_vrf: management
    operation: overridden


# Using replaced

- name: Replace Global Telemetry Configuration
  nxos_tms_global:
    config:
      certificate:
        key: /bootflash/server.key
        hostname: localhost
      destination_profile_compression: gzip
      destination_profile_source_interface: Ethernet1/1
      destination_profile_vrf: management
    operation: replaced


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


# pylint: disable=C0413
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network. \
    nxos.config.tms_global.tms_global import Tms_global
# pylint: enable=C0413


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Tms_global.argument_spec,
                           supports_check_mode=True)

    result = Tms_global(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
