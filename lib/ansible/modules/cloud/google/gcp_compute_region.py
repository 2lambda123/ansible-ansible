#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Google
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/GoogleCloudPlatform/magic-modules
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

################################################################################
# Documentation
################################################################################

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ["preview"],
                    'supported_by': 'community'}

DOCUMENTATION = '''
---
module: gcp_compute_region
description:
    - Represents a Region resource. A region is a specific geographical
      location where you can run your resources. Each region has one or more
      zones
short_description: Creates a GCP Region
version_added: 2.5
author: Google Inc. (@googlecloudplatform)
requirements:
    - python >= 2.6
    - requests >= 2.18.4
    - google-auth >= 1.3.0
options:
    state:
        description:
            - Whether the given object should exist in GCP
        required: true
        choices: ['present', 'absent']
        default: 'present'
    name:
        description:
            - Name of the resource.
        required: false
extends_documentation_fragment: gcp
'''

EXAMPLES = '''
- name: verify a region
  gcp_compute_region:
      name: 'us-west1'
      project: testProject
      auth_kind: service_account
      service_account_file: /tmp/auth.pem
      scopes:
        - https://www.googleapis.com/auth/compute
      state: present
'''

RETURN = '''
    creation_timestamp:
        description:
            - Creation timestamp in RFC3339 text format.
        returned: success
        type: str
    deprecated_deleted:
        description:
            - An optional RFC3339 timestamp on or after which the deprecation
              state
              of this resource will be changed to DELETED.
        returned: success
        type: str
    deprecated_deprecated:
        description:
            - An optional RFC3339 timestamp on or after which the deprecation
              state
              of this resource will be changed to DEPRECATED.
        returned: success
        type: str
    deprecated_obsolete:
        description:
            - An optional RFC3339 timestamp on or after which the deprecation
              state
              of this resource will be changed to OBSOLETE.
        returned: success
        type: str
    deprecated_replacement:
        description:
            - The URL of the suggested replacement for a deprecated resource. The
              suggested replacement resource must be the same kind of resource as
              the deprecated resource.
        returned: success
        type: str
    deprecated_state:
        description:
            - The deprecation state of this resource. This can be DEPRECATED,
              OBSOLETE, or DELETED. Operations which create a new resource using
              a
              DEPRECATED resource will return successfully, but with a warning
              indicating the deprecated resource and recommending its
              replacement.
              Operations which use OBSOLETE or DELETED resources will be rejected
              and result in an error.
        returned: success
        type: str
    description:
        description:
            - An optional description of this resource.
        returned: success
        type: str
    id:
        description:
            - The unique identifier for the resource.
        returned: success
        type: int
    zones:
        description:
            - List of zones within the region
        returned: success
        type: list
'''

################################################################################
# Imports
################################################################################

from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequestException
import json

################################################################################
# Main
################################################################################


def main():
    """Main function"""

    module = GcpModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
            name=dict(type='str'),
        )
    )

    state = module.params['state']
    kind = 'compute#region'

    fetch = fetch_resource(module, self_link(module), kind)
    changed = False
    if not fetch:
        module.fail_json(msg="Region is not valid")

    module.exit_json(**fetch)


def resource_to_request(module):
    request = {
        u'kind': 'compute#region',
        u'name': module.params['name'],
    }
    return_vals = {}
    for k, v in request.items():
        if v:
            return_vals[k] = v

    return return_vals


def fetch_resource(module, link, kind):
    auth = GcpSession(module, 'g')
    return return_if_object(module, auth.get(link), kind)


def self_link(module):
    return "https://www.googleapis.com/compute/v1/projects/{project}/regions/{name}".format(**module.params)


def collection(module):
    return "https://www.googleapis.com/compute/v1/projects/{project}/regions".format(**module.params)


def return_if_object(module, response, kind):
    # If not found, return nothing.
    if response.status_code == 404:
        return None

    # If no content, return nothing.
    if response.status_code == 204:
        return None

    try:
        response.raise_for_status
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)
    except GcpRequestException as inst:
        module.fail_json(msg="Network error: %s" % inst)

    if navigate_hash(result, ['error', 'errors']):
        module.fail_json(msg=navigate_hash(result, ['error', 'errors']))
    if result['kind'] != kind:
        module.fail_json(msg="Incorrect result: {kind}".format(**result))

    return result


def is_different(module, response):
    request = resource_to_request(module)

    # Remove all output-only from response.
    response_vals = {}
    for k, v in response.items():
        if k in request:
            response_vals[k] = v

    request_vals = {}
    for k, v in request.items():
        if k in response:
            request_vals[k] = v

    return response_vals != request_vals

if __name__ == '__main__':
    main()
