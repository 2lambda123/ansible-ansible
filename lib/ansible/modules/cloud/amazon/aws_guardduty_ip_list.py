#!/usr/bin/python

# Copyright: (c) 2018, Aaron Smith <ajsmith10381@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = r'''
---
module: aws_guardduty_ip_list
short_description: Manage Trusted/Threat IP list for AWS GuardDuty.
description:
    - Manage a Trusted/Threat IP list assigned to a AWS GuardDuty detector.
author: "Aaron Smith (@slapula)"
version_added: "2.7"
requirements: [ 'botocore', 'boto3' ]
options:
  name:
    description:
    - A user-friendly name that is displayed in all finding generated by activity that involves
      IP addresses included in this list.
    required: true
  list_type:
    description:
    - Whether the list should be exist or not on the detector.
    required: true
    choices: ['trusted', 'threat']
  state:
    description:
    - Whether the list should be exist or not on the detector.
    default: 'present'
    choices: ['present', 'absent']
  enabled:
    description:
    - Whether the list should be enabled or disabled.
    type: bool
    default: true
  detector_id:
    description:
    - The unique ID of the detector that you want to update.
    required: true
  format:
    description:
    - The format of the file that contains the IP list.
    choices: ['TXT', 'STIX', 'OTX_CSV', 'ALIEN_VAULT', 'PROOF_POINT', 'FIRE_EYE']
  location:
    description:
    - The URI of the file that contains the IP list.
extends_documentation_fragment:
    - ec2
    - aws
'''


EXAMPLES = r'''
- name: create GuardDuty detector
  guardduty_threatlist:
    state: present
    enabled: true

- name: disable GuardDuty detector
  guardduty_threatlist:
    state: present
    enabled: false

- name: delete GuardDuty detector
  guardduty_threatlist:
    state: absent
'''


RETURN = r'''
ip_list_id:
    description: The ID of the GuardDuty IP Set or Threat Intel Set you just created or updated.
    returned: always
    type: string
'''

import os

from ansible.module_utils.aws.core import AnsibleAWSModule
from ansible.module_utils.aws.core import is_boto3_error_code

try:
    from botocore.exceptions import BotoCoreError, ClientError
except ImportError:
    pass  # handled by AnsibleAWSModule


def ip_list_exists(client, module):
    try:
        if module.params.get('list_type') == 'trusted':
            paginator = client.get_paginator('list_ip_sets')
            sets = paginator.paginate(
                DetectorId=module.params.get('detector_id')
            )
            for i in sets:
                for s in i['IpSetIds']:
                    ti_set = client.get_ip_set(
                        DetectorId=module.params.get('detector_id'),
                        IpSetId=s
                    )
                    if ti_set['Name'] == module.params.get('name'):
                        return {'exists': True, 'ip_list_id': s}
        if module.params.get('list_type') == 'threat':
            paginator = client.get_paginator('list_threat_intel_sets')
            sets = paginator.paginate(
                DetectorId=module.params.get('detector_id')
            )
            for i in sets:
                for s in i['ThreatIntelSetIds']:
                    ti_set = client.get_threat_intel_set(
                        DetectorId=module.params.get('detector_id'),
                        ThreatIntelSetId=s
                    )
                    if ti_set['Name'] == module.params.get('name'):
                        return {'exists': True, 'ip_list_id': s}
    except is_boto3_error_code('TheListIsntFoundError'):
        return {'exists': False}
    except (BotoCoreError, ClientError) as e:  # pylint: disable=duplicate-except
        module.fail_json_aws(e, msg="Unable to list {0} sets".format(module.params.get('list_type')))

    return {'exists': False}


def create_ip_list(client, module, params):
    if module.check_mode:
        module.exit_json(changed=True)
    try:
        if module.params.get('list_type') == 'trusted':
            response = client.create_ip_set(**params)
            return {'changed': True, 'ip_list_id': response['IpSetId']}
        if module.params.get('list_type') == 'threat':
            response = client.create_threat_intel_set(**params)
            return {'changed': True, 'ip_list_id': response['ThreatIntelSetId']}
    except (BotoCoreError, ClientError) as e:
        module.fail_json_aws(e, msg="Failed to create IP list")

    return {'changed': False}


def update_ip_list(client, module, params, status):
    if module.check_mode:
        module.exit_json(changed=True)
    try:
        if module.params.get('list_type') == 'trusted':
            params['IpSetId'] = status['ip_list_id']
            del params['Format']
            response = client.update_ip_set(**params)
            return {'changed': True, 'ip_list_id': status['ip_list_id']}
        if module.params.get('list_type') == 'threat':
            params['ThreatIntelSetId'] = status['ip_list_id']
            del params['Format']
            response = client.update_threat_intel_set(**params)
            return {'changed': True, 'ip_list_id': status['ip_list_id']}
    except (BotoCoreError, ClientError) as e:
        module.fail_json_aws(e, msg="Failed to update IP list")

    return {'changed': False, 'ip_list_id': status['ip_list_id']}


def delete_ip_list(client, module, status):
    if module.check_mode:
        module.exit_json(changed=True)
    try:
        if module.params.get('list_type') == 'trusted':
            response = client.delete_ip_set(
                DetectorId=module.params.get('detector_id'),
                IpSetId=status['ip_list_id']
            )
            return {'changed': True, 'ip_list_id': ''}
        if module.params.get('list_type') == 'threat':
            response = client.delete_threat_intel_set(
                DetectorId=module.params.get('detector_id'),
                ThreatIntelSetId=status['ip_list_id']
            )
            return {'changed': True, 'ip_list_id': ''}
    except (BotoCoreError, ClientError) as e:
        module.fail_json_aws(e, msg="Failed to delete IP list")

    return {'changed': False, 'ip_list_id': ''}


def main():
    module = AnsibleAWSModule(
        argument_spec={
            'name': dict(type='str', required=True),
            'list_type': dict(type='str', choices=['trusted', 'threat'], required=True),
            'state': dict(type='str', choices=['present', 'absent'], default='present'),
            'enabled': dict(type='bool', default=True),
            'detector_id': dict(type='str', required=True),
            'format': dict(type='str', choices=['TXT', 'STIX', 'OTX_CSV', 'ALIEN_VAULT', 'PROOF_POINT', 'FIRE_EYE']),
            'location': dict(type='str', required=True),
        },
        supports_check_mode=True,
    )

    result = {
        'changed': False,
        'ip_list_id': ''
    }

    desired_state = module.params.get('state')

    client = module.client('guardduty')

    ip_list_status = ip_list_exists(client, module)

    params = {}
    params['Name'] = module.params.get('name')
    params['Location'] = module.params.get('location')
    params['Format'] = module.params.get('format')
    params['DetectorId'] = module.params.get('detector_id')
    params['Activate'] = module.params.get('enabled')

    if desired_state == 'present':
        if not ip_list_status['exists']:
            result = create_ip_list(client, module, params)
        if ip_list_status['exists']:
            result = update_ip_list(client, module, params, ip_list_status)

    if desired_state == 'absent':
        if ip_list_status['exists']:
            result = delete_ip_list(client, module, ip_list_status)

    module.exit_json(changed=result['changed'], ip_list_id=result['ip_list_id'])


if __name__ == '__main__':
    main()
